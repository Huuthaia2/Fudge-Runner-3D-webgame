(function () {
    'use strict';

    class ColorConfig {
        constructor(obj) {
            this.mainColor = new Laya.Vector4(obj.main[0] / 255, obj.main[1] / 255, obj.main[2] / 255, obj.main[3] / 255);
            this.fresnelColor = new Laya.Vector4(obj.fresnel[0] / 255, obj.fresnel[1] / 255, obj.fresnel[2] / 255, obj.fresnel[3] / 255);
            this.uiColor = obj.ui;
        }
    }

    class LevelInfo {
        constructor() {
            this.roadConfigArray = new Array();
        }
    }

    class MachineConfigInfo {
        constructor(id, showHideConfig, multiAnimConfig, movableConfig, bombMachineIndex) {
            this.id = id;
            this.showHideConfig = 0;
            if (showHideConfig && showHideConfig.length > 0) {
                let arr = showHideConfig.split("_");
                for (let i in arr) {
                    this.showHideConfig = this.showHideConfig << 1;
                    this.showHideConfig += parseInt(arr[i]);
                }
            }
            this.multiAnimConfig = multiAnimConfig;
            this.movableConfig = movableConfig / 10;
            this.bombMachineIndexes = new Array();
            if (bombMachineIndex && bombMachineIndex.length > 0) {
                let arr = bombMachineIndex.split("_");
                for (let i in arr) {
                    this.bombMachineIndexes.push(parseInt(arr[i]));
                }
            }
        }
    }

    class RoadConfig {
        constructor(obj) {
            let mac1 = obj.mach1;
            let mac2 = obj.mach2;
            this.roleConfig = obj.role;
            let coin = obj.coin;
            this.machineConfig = new Array();
            this.machineConfig.push(new MachineConfigInfo(mac1[0], mac1[1], mac1[2], mac1[3], mac1[4]));
            this.machineConfig.push(new MachineConfigInfo(mac2[0], mac2[1], mac2[2], mac2[3], mac2[4]));
            this.coinConfig = new Array();
            for (let i = 0; i < coin.length; i++) {
                this.coinConfig.push(0);
                if (coin[i].length > 0) {
                    let arr = coin[i].split("_");
                    switch (arr[0]) {
                        case "a": {
                            for (let j = 1; j < 7; j++) {
                                this.coinConfig[i] = this.coinConfig[i] << 1;
                                if (arr[j]) {
                                    this.coinConfig[i] += parseInt(arr[j]);
                                }
                            }
                            this.coinConfig[i] += 100;
                            break;
                        }
                        case "b": {
                            this.coinConfig[i] += 200;
                            this.coinConfig[i] += parseInt(arr[1]);
                            break;
                        }
                        case "c": {
                            for (let j = 1; j < 4; j++) {
                                this.coinConfig[i] = this.coinConfig[i] << 1;
                                if (arr[j]) {
                                    this.coinConfig[i] += parseInt(arr[j]);
                                }
                            }
                            this.coinConfig[i] += 300;
                            break;
                        }
                        case "d": {
                            for (let j = 1; j < 4; j++) {
                                this.coinConfig[i] = this.coinConfig[i] << 1;
                                if (arr[j]) {
                                    this.coinConfig[i] += parseInt(arr[j]);
                                }
                            }
                            this.coinConfig[i] += 400;
                            break;
                        }
                        case "e": {
                            for (let j = 1; j < 4; j++) {
                                this.coinConfig[i] = this.coinConfig[i] << 1;
                                if (arr[j]) {
                                    this.coinConfig[i] += parseInt(arr[j]);
                                }
                            }
                            this.coinConfig[i] += 500;
                            break;
                        }
                    }
                }
            }
        }
    }

    class SceneInfo {
        constructor() {
            this.roadConfigArray = new Array();
            this.machineInfoArr = new Array();
        }
    }

    class SelfGameConfig {
    }
    SelfGameConfig.PATH_MAIN_SCENE_ROOT = "res3d/res3d/LayaScene_MainScene/Conventional/";
    SelfGameConfig.NAME_SHOP_ROLE_PREFAB = "Jellydude_weird_2_0";
    SelfGameConfig.NAME_ROLE_PREFAB = "Jellydude_weird_2_1";
    SelfGameConfig.NAME_BOSS_PREFAB = "Jellydude_weird_1_0";
    SelfGameConfig.NAME_DIR_LIGHT = "Directional_Light";
    SelfGameConfig.NAME_WATER_SURFAVE = "water_surface";
    SelfGameConfig.NAME_MAIN_CAMERA_PREFAB = "Main_Camera";
    SelfGameConfig.NAME_GAME_CAMERA_PREFAB = "Game_Camera";
    SelfGameConfig.NAME_END_1_CAMERA_PREFAB = "endCamera";
    SelfGameConfig.NAME_END_2_CAMERA_PREFAB = "endCamera2";
    SelfGameConfig.NAME_END_3_CAMERA_PREFAB = "endCamera3";
    SelfGameConfig.NAME_END_4_CAMERA_PREFAB = "endCamera4";
    SelfGameConfig.NAME_END_5_CAMERA_PREFAB = "endCamera5";
    SelfGameConfig.NAME_BASIC_ROAD_PREFAB = "node_basic_road";
    SelfGameConfig.NAME_ROAD_START_PREFAB = "Ground_tile_start";
    SelfGameConfig.NAME_ROAD_END_PREFAB = "Ground_tile_final";
    SelfGameConfig.NAME_JUMP_NODE_PREFAB = "jump_Node";
    SelfGameConfig.NAME_NODE_COIN_PREFAB = "node_coin";
    SelfGameConfig.NAME_MULTI_PREFAB = "number_multi";
    SelfGameConfig.NAME_SHOP_LIGHT = "Shop_Light";
    SelfGameConfig.PATH_EFFECT_SCENE_ROOT = "res3d/res3da/LayaScene_EffectScene/Conventional/";
    SelfGameConfig.NAME_NODE_EXPLOSION_PREFAB = "node_explosion";
    SelfGameConfig.NAME_NODE_COIN_EFFECT_PREFAB = "node_coin";
    SelfGameConfig.NAME_ROLE_GLOVE_PREFAB = "Glove";
    SelfGameConfig.NAME_BOSS_GLOVE_PREFAB = "Boss_Glove";
    SelfGameConfig.NAME_SMASH_CRASH_RPEAFAB = "node_smash_crash";
    SelfGameConfig.NAME_NODE_GET_HIT_PREFAB = "node_get_hit";
    SelfGameConfig.NAME_NODE_BLOOD_PREFAB = "node_blood";
    SelfGameConfig.NAME_NODE_ACCELERATE_PREFAB = "node_accelerate";
    SelfGameConfig.NAME_NODE_ACCELERATE_LINES_PREFAB = "node_accelerate_lines";
    SelfGameConfig.NAME_NODE_TRANSFORM_PREFAB = "node_transform";
    SelfGameConfig.NAME_NODE_INFECT_PREFAB = "node_infect";
    SelfGameConfig.NAME_NODE_FOOTPRINT_PREFAB = "node_footprint";
    SelfGameConfig.NAME_CUT_AXIS_XY_PREFAB = "qiege_qh";
    SelfGameConfig.NAME_CUT_AXIS_YZ_PREFAB = "qiege_zy";
    SelfGameConfig.NAME_CUT_AXIS_XZ_PREFAB = "qiege_sx";
    SelfGameConfig.NAME_NODE_FIREWORK_PREFAB = "node_fireworks";
    SelfGameConfig.NAME_NODE_WALL_BREAK_PREFAB = "node_wall_break";
    SelfGameConfig.NAME_SKIN_SHOP_PREFAB = "skin_shop_";
    SelfGameConfig.NAME_SKIN_ROAD_PREFAB = "skin_road_";
    SelfGameConfig.NAME_HAT_SHOP_PREFAB = "hat_shop_";
    SelfGameConfig.NAME_HAT_ROAD_PREFAB = "hat_road_";
    SelfGameConfig.NAME_BOSS_HAT_PREFAB = "boss_hat_";
    SelfGameConfig.EVENT_START_GAME = "start_game";
    SelfGameConfig.EVENT_NEXT_STAGE = "next_stage";
    SelfGameConfig.EVENT_RESET_STAGE = "reset_stage";
    SelfGameConfig.EVENT_FINISH_PROGRESS = "finish_progress";
    SelfGameConfig.EVENT_GAME_OVER = "game_over";
    SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS = "refresh_role_visual_status";
    SelfGameConfig.EVENT_START_SPEED_UP = "start_speed_up";
    SelfGameConfig.EVENT_CREATE_NAV_ADS = "create_nav_ads";
    SelfGameConfig.EVENT_INIT_NAV_AD_PROGRESS = "init_navAd_progress";
    SelfGameConfig.EVENT_REGET_SDK_CONFIG = "reget_sdkConfig";
    SelfGameConfig.EVENT_MACHINE_EXPLODE = "machine_explode";
    SelfGameConfig.EVENT_ROLE_PUNCH = "role_punch";
    SelfGameConfig.EVENT_LOOP_ROLE_PUNCH = "loop_role_punch";
    SelfGameConfig.EVENT_REFRESH_ROLE_HP = "refresh_role_hp";
    SelfGameConfig.EVENT_REFRESH_BOSS_HP = "refresh_boss_hp";
    SelfGameConfig.EVENT_INFECT_ROLE = "infect_role";
    SelfGameConfig.EVENT_CREATE_EMOJI = "create_emoji";
    SelfGameConfig.EVENT_ROLE_PLUS = "role_plus";
    SelfGameConfig.EVENT_PAUSE_GAME = "pause_game";
    SelfGameConfig.EVENT_RESUME_GAME = "resume_game";
    SelfGameConfig.EVENT_REFRESH_SKILL_BTN = "refresh_skill_btns";
    SelfGameConfig.EVENT_GET_KEY = "get_key";
    SelfGameConfig.SPEED_NORMAL = 2;
    SelfGameConfig.SPEED_FAST = 4;
    SelfGameConfig.SPEED_ROLL = 3;
    SelfGameConfig.ROLE_SLOW_MOVE_SPEED = 0.032;
    SelfGameConfig.MIDDLE_TO_EDGE_AT_ROAD = 1.1;
    SelfGameConfig.MIDDLE_TO_EDGE_IN_AIR = 1.8;
    SelfGameConfig.DIFF_X_MULTI_AT_ROAD = 1;
    SelfGameConfig.DIFF_X_MULTI_IN_AIR = 1.4;
    SelfGameConfig.MULTI_HIDE_THRESHOLD = 30;
    SelfGameConfig.ZORDER_DIALOG = 10;
    SelfGameConfig.ZORDER_REWARD_DIALOG = 11;
    SelfGameConfig.ZORDER_ABOVE_DIALOG = 21;
    SelfGameConfig.ZORDER_NAV_LEVEL_0_DIALOG = 22;
    SelfGameConfig.ZORDER_NAV_LEVEL_1_DIALOG = 23;
    SelfGameConfig.ZORDER_NAV_LEVEL_2_DIALOG = 25;
    SelfGameConfig.ZORDER_NAV_LEVEL_3_DIALOG = 19;
    SelfGameConfig.ZORDER_WRONGCLICK_DIALOG = 20;
    SelfGameConfig.ZORDER_SCENE_3D = 0;
    SelfGameConfig.ZORDER_SCENE_3D_ABOVE_DIALOGS = 21;
    SelfGameConfig.SHARE_TYPES = {};
    SelfGameConfig.SHARE_CANCEL = "share_cancel";
    SelfGameConfig.NAME_LOADING_DIALOG = "LoadingDialog";
    SelfGameConfig.NAME_MAIN_VIEW_DIALOG = "MainViewDialog";
    SelfGameConfig.NAME_GAME_VIEW_DIALOG = "GameViewDialog";
    SelfGameConfig.NAME_FIGHT_VIEW_DIALOG = "FightViewDialog";
    SelfGameConfig.NAME_RESULT_VIEW_DIALOG = "ResultViewDialog";
    SelfGameConfig.NAME_GET_REWARD_VIEW_DIALOG = "GetRewardViewDialogs";
    SelfGameConfig.NAME_ENERGY_DIALOG = "EnergyDialog";
    SelfGameConfig.NAME_SHOP_DIALOG = "ShopDialog";
    SelfGameConfig.NAME_LEVEL_SKIN_DIALOG = "LevelThroughSkinDialog";
    SelfGameConfig.NAME_GET_LEVEL_SKIN_DIALOG = "GetLevelSkinDialog";
    SelfGameConfig.NAME_ONLINE_SKIN_DIALOG = "OnlineSkinDialog";
    SelfGameConfig.NAME_TRY_SKIN_DIALOG = "TrySkinDialog";
    SelfGameConfig.NAME_KEY_BOX_DIALOG = "KeyBoxDialog";
    SelfGameConfig.NAME_WRONGCLICK_DIALOG = "wrong_click_dialog";
    SelfGameConfig.DATA_SETTING_VIBRATE = "setting_vibrate";
    SelfGameConfig.DATA_SETTING_SOUND = "setting_sound";
    SelfGameConfig.NAME_SCENE_3D_SKY = "scene_3d_sky";
    SelfGameConfig.NAME_NODE_ROLE_PARENT = "role_parent";
    SelfGameConfig.NAME_NODE_ROLE = "node_role";
    SelfGameConfig.NAME_NODE_MAIN_CAMERA = "Main_Camera";
    SelfGameConfig.COLLIDER_GROUP_MACHINE = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1;
    SelfGameConfig.COLLIDER_GROUP_COIN = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2;
    SelfGameConfig.COLLIDER_GROUP_UNSAME = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER3;
    SelfGameConfig.COLLIDER_GROUP_SAME = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER4;
    SelfGameConfig.COLLIDER_GROUP_JUMP_PAD = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5;
    SelfGameConfig.COLLIDER_GROUP_ROLL = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER6;
    SelfGameConfig.COLLIDER_GROUP_SPEED_UP = Laya.Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER7;
    SelfGameConfig.MIDDLE_TO_EDGE = 1.6;
    SelfGameConfig.NAME_ANI_IDLE = "Idle";
    SelfGameConfig.NAME_ANI_IDLE1 = "Idle1";
    SelfGameConfig.NAME_ANI_IDLE2 = "Idle2";
    SelfGameConfig.NAME_ANI_IDLE3 = "Idle3";
    SelfGameConfig.NAME_ANI_DIE = "Die";
    SelfGameConfig.NAME_ANI_ROLL = "Roll";
    SelfGameConfig.NAME_ANI_SPEED_UP = "SpeedUp";
    SelfGameConfig.NAME_ANI_WIN = "Win";
    SelfGameConfig.NAME_ANI_JUMP = "Jump";
    SelfGameConfig.NAME_ANI_RUN = "Run";
    SelfGameConfig.NAME_ANI_LEFT_RIGHT = "Left_Right";
    SelfGameConfig.NAME_ANI_BLOW_UP = "Blow_Up";
    SelfGameConfig.NAME_ANI_FIGHT_READY = "Fight_Ready";
    SelfGameConfig.NAME_ANI_FIGHT_IDLE = "Fight_Idle";
    SelfGameConfig.NAME_ANI_FIGHT_PUNCH_1 = "Fight_Punch_1";
    SelfGameConfig.NAME_ANI_FIGHT_PUNCH_2 = "Fight_Punch_2";
    SelfGameConfig.NAME_ANI_FIGHT_PUNCH_3 = "Fight_Punch_3";
    SelfGameConfig.NAME_ANI_FIGHT_PUNCH_4 = "Fight_Punch_4";
    SelfGameConfig.NAME_ANI_FIGHT_KO = "Fight_KO";
    SelfGameConfig.NAME_ANI_DANCE = "Dance";
    SelfGameConfig.NAME_ANI_KNOCK_OUT = "KnockOut";
    SelfGameConfig.NAME_ANI_GET_HIT = "GetHit";
    SelfGameConfig.NAME_ANI_GLOVE_HIT = "Hit";
    SelfGameConfig.NAME_ANI_GLOVE_RESET = "Reset";
    var RoleStatus;
    (function (RoleStatus) {
        RoleStatus[RoleStatus["IDLE"] = 0] = "IDLE";
        RoleStatus[RoleStatus["RUN"] = 1] = "RUN";
        RoleStatus[RoleStatus["LEFT_RIGHT"] = 2] = "LEFT_RIGHT";
        RoleStatus[RoleStatus["SPEED_UP"] = 3] = "SPEED_UP";
        RoleStatus[RoleStatus["ROLL"] = 4] = "ROLL";
        RoleStatus[RoleStatus["JUMP"] = 5] = "JUMP";
    })(RoleStatus || (RoleStatus = {}));
    var AnimatorStatus;
    (function (AnimatorStatus) {
        AnimatorStatus[AnimatorStatus["IDLE1"] = 0] = "IDLE1";
        AnimatorStatus[AnimatorStatus["IDLE2"] = 1] = "IDLE2";
        AnimatorStatus[AnimatorStatus["IDLE3"] = 2] = "IDLE3";
        AnimatorStatus[AnimatorStatus["DIE"] = 3] = "DIE";
        AnimatorStatus[AnimatorStatus["ROLL"] = 4] = "ROLL";
        AnimatorStatus[AnimatorStatus["SPEED_UP"] = 5] = "SPEED_UP";
        AnimatorStatus[AnimatorStatus["WIN"] = 6] = "WIN";
        AnimatorStatus[AnimatorStatus["JUMP"] = 7] = "JUMP";
        AnimatorStatus[AnimatorStatus["RUN"] = 8] = "RUN";
        AnimatorStatus[AnimatorStatus["LEFT_RIGHT"] = 9] = "LEFT_RIGHT";
        AnimatorStatus[AnimatorStatus["BLOW_UP"] = 10] = "BLOW_UP";
        AnimatorStatus[AnimatorStatus["FIGHT_READY"] = 11] = "FIGHT_READY";
        AnimatorStatus[AnimatorStatus["FIGHT_IDLE"] = 12] = "FIGHT_IDLE";
        AnimatorStatus[AnimatorStatus["FIGHT_PUNCH_1"] = 13] = "FIGHT_PUNCH_1";
        AnimatorStatus[AnimatorStatus["FIGHT_PUNCH_2"] = 14] = "FIGHT_PUNCH_2";
        AnimatorStatus[AnimatorStatus["FIGHT_PUNCH_3"] = 15] = "FIGHT_PUNCH_3";
        AnimatorStatus[AnimatorStatus["FIGHT_PUNCH_4"] = 16] = "FIGHT_PUNCH_4";
        AnimatorStatus[AnimatorStatus["FIGHT_KO"] = 17] = "FIGHT_KO";
    })(AnimatorStatus || (AnimatorStatus = {}));
    var CameraStatus;
    (function (CameraStatus) {
        CameraStatus[CameraStatus["ORIGIN"] = 0] = "ORIGIN";
        CameraStatus[CameraStatus["FOLLOW"] = 1] = "FOLLOW";
        CameraStatus[CameraStatus["CHANGE"] = 2] = "CHANGE";
        CameraStatus[CameraStatus["FIGHT"] = 3] = "FIGHT";
        CameraStatus[CameraStatus["BOSS"] = 4] = "BOSS";
        CameraStatus[CameraStatus["SLOW_MOTION"] = 5] = "SLOW_MOTION";
        CameraStatus[CameraStatus["KNOCK_OUT"] = 6] = "KNOCK_OUT";
        CameraStatus[CameraStatus["BACK_TO_BOSS"] = 7] = "BACK_TO_BOSS";
    })(CameraStatus || (CameraStatus = {}));
    var EffectType;
    (function (EffectType) {
        EffectType[EffectType["EXPLOSION"] = 0] = "EXPLOSION";
        EffectType[EffectType["COIN"] = 1] = "COIN";
    })(EffectType || (EffectType = {}));

    class SkinProgressInfo {
        constructor(length) {
            this.indexUsingNow = 0;
            this.indexTryingNow = 0;
            this.levelProgress = {};
            this.tryOnProgress = {};
            this.unlockStatus = [true];
            for (let i = 1; i < length; i++) {
                this.unlockStatus.push(false);
            }
        }
    }

    class LocalStorageUtils {
        constructor() {
        }
        static setInt(key, value) {
            Laya.LocalStorage.setItem(key, value + "");
        }
        static getInt(key, defaultValue) {
            var str = Laya.LocalStorage.getItem(key);
            if (str) {
                return parseInt(str);
            }
            else {
                return defaultValue;
            }
        }
        static setFloat(key, value) {
            Laya.LocalStorage.setItem(key, value + "");
        }
        static getFloat(key, defaultValue) {
            var str = Laya.LocalStorage.getItem(key);
            if (str) {
                return parseFloat(str);
            }
            else {
                return defaultValue;
            }
        }
        static setJson(key, value) {
            Laya.LocalStorage.setItem(key, JSON.stringify(value));
        }
        static getJson(key, defaultValue) {
            var str = Laya.LocalStorage.getItem(key);
            if (str) {
                return JSON.parse(str);
            }
            else {
                return defaultValue;
            }
        }
        static getBoolean(key, defaultValue) {
            var str = Laya.LocalStorage.getItem(key);
            if (str == "true") {
                return true;
            }
            else if (str == "false") {
                return false;
            }
            else {
                return defaultValue;
            }
        }
        static setBoolean(key, value) {
            if (value) {
                Laya.LocalStorage.setItem(key, "true");
            }
            else {
                Laya.LocalStorage.setItem(key, "false");
            }
        }
    }

    class EventInfo {
        constructor(node, type, event) {
            this.node = node;
            this.envent = event;
            this.type = type;
        }
    }

    class Utils {
        static log(message, ...optionalParams) {
        }
        static nextInt(n, m) {
            var random = Math.floor(Math.random() * (m - n + 1) + n);
            return random;
        }
        static nextFloat(n, m) {
            var random = Math.random() * (m - n) + n;
            return random;
        }
        static getRandomItemByArr(arr) {
            if (arr && arr.length > 0) {
                return arr[Math.floor(Math.random() * arr.length)];
            }
            else {
                return null;
            }
        }
        static angle2Radian(angle) {
            return Math.PI / 180 * angle;
        }
        static radian2Angle(radian) {
            return 180 / Math.PI * radian;
        }
        static randomRate(rateArr) {
            var leng = 0;
            for (var i = 0; i < rateArr.length; i++) {
                leng += rateArr[i];
            }
            for (var i = 0; i < rateArr.length; i++) {
                var random = Math.random() * leng;
                if (random < rateArr[i]) {
                    return i;
                }
                else {
                    leng -= rateArr[i];
                }
            }
            return 0;
        }
        static shuffleArr(arr) {
            for (var i = arr.length - 1; i >= 0; i--) {
                var randomIndex = Math.floor(Math.random() * (i + 1));
                var itemAtIndex = arr[randomIndex];
                arr[randomIndex] = arr[i];
                arr[i] = itemAtIndex;
            }
            return arr;
        }
        static dispatchEvent(type, data) {
            for (var i = 0; i < Utils.eventArr.length; i++) {
                var event = Utils.eventArr[i];
                if (event.type == type) {
                    event.envent.bind(event.node, data)();
                }
            }
        }
        static onEvent(node, type, event) {
            var obj = new EventInfo(node, type, event);
            Utils.eventArr.push(obj);
        }
        static offAllEventByNode(node) {
            var tempEventArr = new Array();
            for (var i = 0; i < Utils.eventArr.length; i++) {
                var event = Utils.eventArr[i];
                if (event.node != node) {
                    tempEventArr.push(event);
                }
            }
            Utils.eventArr = tempEventArr;
        }
        static coverColor(data) {
            var color;
            if (data instanceof Array) {
                color = new Laya.Vector4();
                color.x = parseFloat((data[0] / 255).toFixed(2));
                color.y = parseFloat((data[1] / 255).toFixed(2));
                color.z = parseFloat((data[2] / 255).toFixed(2));
                color.w = parseFloat((data[3] / 255).toFixed(2));
            }
            else {
                color = data;
            }
            return color;
        }
        static dateFormat(fmt, date) {
            let ret;
            const opt = {
                "Y+": date.getFullYear().toString(),
                "m+": (date.getMonth() + 1).toString(),
                "d+": date.getDate().toString(),
                "H+": date.getHours().toString(),
                "M+": date.getMinutes().toString(),
                "S+": date.getSeconds().toString(),
                "s+": (Math.floor(date.getMilliseconds() / 10)).toString(),
            };
            for (let k in opt) {
                ret = new RegExp("(" + k + ")").exec(fmt);
                if (ret) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
                ;
            }
            ;
            return fmt;
        }
        static checkInCircle(centerX, centerY, r, pointX, pointY) {
            if (Math.pow((pointX - centerX), 2) + Math.pow((pointY - centerY), 2) > Math.pow(r, 2)) {
                return false;
            }
            else {
                return true;
            }
        }
        static getBinaryConfig(config, numReturn) {
            let arr = new Array();
            for (let i = 0; i < numReturn; i++) {
                if ((config >> 1) << 1 == config) {
                    arr.push(false);
                }
                else {
                    arr.push(true);
                }
                config = (config >> 1);
            }
            return arr;
        }
    }
    Utils.ORIENTATION_UP = 1;
    Utils.ORIENTATION_RIGHT = 2;
    Utils.ORIENTATION_DOWN = 3;
    Utils.ORIENTATION_LEFT = 4;
    Utils.eventArr = new Array();

    class SkinManager {
        constructor() {
            this.DATA_SKIN_PROGRESS = "skin_progress";
            this.ROLE_VISUAL_STATUS_TYPE = 3;
        }
        static getInstance() {
            if (!this.instance) {
                this.instance = new SkinManager();
            }
            return this.instance;
        }
        init(config) {
            this.config = config;
            this.indexForOnline = new Array();
            this.indexForLevelUp = new Array();
            this.indexForKeyOpen = new Array();
            this.indexForTryOn = new Array();
            for (let i in this.config) {
                if (this.config[i].onlineUnlock) {
                    this.indexForOnline.push(this.config[i].id);
                }
                else if (this.config[i].levelUnlock) {
                    this.indexForLevelUp.push(this.config[i].id);
                }
                else if (this.config[i].keyOpenUnlock) {
                    this.indexForKeyOpen.push(this.config[i].id);
                }
                else if (this.config[i].tryOnUnlock) {
                    this.indexForTryOn.push(this.config[i].id);
                }
            }
            this.getProgress();
        }
        checkNeedNextLevelIndex() {
            let needNew = false;
            if (this.progress.indexLevelUnlocking > 0) {
                if (this.progress.unlockStatus[this.progress.indexLevelUnlocking]) {
                    needNew = true;
                }
            }
            else {
                needNew = true;
            }
            if (needNew) {
                let arr = this.getLockedArray(SkinManager.TYPE.type_level);
                if (arr.length > 0) {
                    arr = Utils.shuffleArr(arr);
                    this.progress.indexLevelUnlocking = arr[0];
                }
                else {
                    this.progress.indexLevelUnlocking = 0;
                }
            }
        }
        getProgress() {
            this.progress = LocalStorageUtils.getJson(this.DATA_SKIN_PROGRESS, null);
            if (!this.progress) {
                this.progress = new SkinProgressInfo(this.config.length);
            }
            if (this.progress.indexTryingNow > 0) {
                this.progress.indexTryingNow = 0;
            }
            this.checkNeedNextLevelIndex();
        }
        setProgress() {
            LocalStorageUtils.setJson(this.DATA_SKIN_PROGRESS, this.progress);
        }
        unlock(index, use) {
            this.progress.unlockStatus[index] = true;
            if (use) {
                this.progress.indexUsingNow = index;
                this.progress.indexTryingNow = 0;
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
            }
            this.setProgress();
        }
        tryOn(index) {
            if (this.progress.tryOnProgress["" + index]) {
                this.progress.tryOnProgress["" + index] += 1;
                if (this.progress.tryOnProgress["" + index] == SkinManager.TRY_ON_TIMES_NEED) {
                    this.unlock(index, true);
                }
                else {
                    this.progress.indexTryingNow = index;
                    this.setProgress();
                    Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
                }
            }
            else {
                this.progress.tryOnProgress["" + index] = 1;
                this.progress.indexTryingNow = index;
                this.setProgress();
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
            }
        }
        tryOver() {
            if (this.progress.indexTryingNow > 0) {
                this.progress.indexTryingNow = 0;
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
                this.setProgress();
            }
        }
        getIndexUsing() {
            if (this.progress.indexTryingNow > 0) {
                return this.progress.indexTryingNow;
            }
            else {
                return this.progress.indexUsingNow;
            }
        }
        change(index) {
            if (this.progress.unlockStatus[index]) {
                this.progress.indexUsingNow = index;
                this.progress.indexTryingNow = 0;
                this.setProgress();
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
            }
        }
        resetStatus() {
            this.progress.indexTryingNow = 0;
            this.progress.indexUsingNow = 0;
            this.setProgress();
        }
        getLockedArray(type) {
            let arrReturn = new Array();
            let arrTarget;
            switch (type) {
                case SkinManager.TYPE.type_key: {
                    arrTarget = this.indexForKeyOpen;
                    break;
                }
                case SkinManager.TYPE.type_level: {
                    arrTarget = this.indexForLevelUp;
                    break;
                }
                case SkinManager.TYPE.type_online: {
                    arrTarget = this.indexForOnline;
                    break;
                }
                case SkinManager.TYPE.type_try: {
                    arrTarget = this.indexForTryOn;
                    break;
                }
                default: {
                    console.log("类型错误");
                    return null;
                }
            }
            for (let i in arrTarget) {
                if (!this.progress.unlockStatus[arrTarget[i]]) {
                    arrReturn.push(arrTarget[i]);
                }
            }
            return arrReturn;
        }
        getTryOnProgress(index) {
            let str = "" + index;
            if (!this.progress.tryOnProgress[str]) {
                return 0;
            }
            else {
                return this.progress.tryOnProgress[str];
            }
        }
        getLevelProgress(index) {
            let str = "" + index;
            if (!this.progress.levelProgress[str]) {
                return 0;
            }
            else {
                return this.progress.levelProgress[str];
            }
        }
        setLevelProgress(progress) {
            this.progress.levelProgress["" + this.progress.indexLevelUnlocking] = progress;
            if (progress == 100) {
                this.progress.unlockStatus[this.progress.indexLevelUnlocking] = true;
            }
            this.setProgress();
            return this.progress.unlockStatus[this.progress.indexLevelUnlocking];
        }
    }
    SkinManager.LEVEL_PROGRESS_NEED = 100;
    SkinManager.TRY_ON_TIMES_NEED = 3;
    SkinManager.CURRENCY_NEED = 10000;
    SkinManager.TYPE = {
        type_online: 0,
        type_level: 1,
        type_key: 2,
        type_try: 3
    };

    class UserGD extends Laya.Script {
    }
    UserGD.sceneId = 0;
    UserGD.canVibrate = true;
    UserGD.canShowBanner = true;
    UserGD.showBannerNow = false;
    UserGD.isOfficial = false;
    UserGD.navAdArray = new Array();
    UserGD.navAdNotJumpedArray = new Array();
    UserGD.imgSkinTransparent = "common/pure_transparent.png";
    UserGD.openBtnConfig = [2, 1, 0, 2, 1];
    UserGD.bannerConfig = [3, 5, 4];
    UserGD.onlineRewardConfig = 200;
    UserGD.openPrimordialClick = false;
    UserGD.openBtn = false;
    UserGD.openBox = false;
    UserGD.openClickAd = false;
    UserGD.openBanner = false;
    UserGD.openJiaout = false;
    UserGD.openSuperShare = false;
    UserGD.openPay = false;
    UserGD.openLRMutual = false;
    UserGD.openBottomMutual = false;
    UserGD.openIndexHot1 = false;
    UserGD.openSkinVideo = false;
    UserGD.openUnionAd = false;
    UserGD.openStartbtn = false;
    UserGD.openRisk = false;
    UserGD.openShipin = false;
    UserGD.openQiangtan = false;
    UserGD.openIndexHot = false;
    UserGD.openFullScreenThree = false;
    UserGD.openFullScreenThree1 = false;
    UserGD.openFullScreenThree2 = false;
    UserGD.openFullScreenTwo = false;
    UserGD.openFullScreenTwo1 = false;
    UserGD.openFullScreenTwo2 = false;
    UserGD.openSkinVideoAddition = false;
    UserGD.openSkinBannerAddition = false;
    UserGD.openSpecialEffect = false;
    UserGD.videoMarkSwitch = false;
    UserGD.openPower = false;
    UserGD.energyConfig = [25, 30, 200, 3, 0, 0];
    UserGD.energyRegenerateMostNum = 5;
    UserGD.openEnergyDialogCount = 0;
    UserGD.showExtension = false;
    UserGD.isGameing = false;
    UserGD.isIphoneX = false;
    UserGD.touchOn = false;
    UserGD.touchBlock = true;
    UserGD.shareType = "";
    UserGD.saveShareKey = "saveShareKey";
    UserGD.openId = "";
    UserGD.toastOnShow = false;
    UserGD.strToastOnShow = null;
    UserGD.playCount = 0;
    UserGD.isNavigaTing = false;
    UserGD.navAdLoaded = false;
    UserGD.fullAdCount = 0;
    UserGD.fullAdIntroClickCount = 0;
    UserGD.openResultCount = 0;
    UserGD.levelSkinConfig = [20, 30, 30];
    UserGD.clickWrongClickAppBox = false;
    UserGD.delayWrongClickPlayCount = 0;
    UserGD.delayWrongClickPlayCountNow = 0;
    UserGD.riskConfig = 3;
    UserGD.toastPowerUsed = false;
    UserGD.rolePlus = false;
    UserGD.skipWrongClickAd = false;
    UserGD.trySkinConfig = [2, 1];
    UserGD.trySkinSwitch = true;
    UserGD.shipinConfig = [3, 5, 30];
    UserGD.sceneSwitch = false;
    UserGD.openWrongClickCount = 0;
    UserGD.isNewPlayer = false;
    UserGD.openFightViewDialogCount = 0;

    class SystemInfo {
    }

    class WxConfig {
    }
    WxConfig.DELAY_SHOW_CLOSE = 4000;
    WxConfig.LOCAL_SHARE_IMAGE = null;
    WxConfig.LOCAL_SHARE_TITLE = null;
    WxConfig.DRAW_AD_ARR = [];
    WxConfig.advArrDraw = [];

    class Utils$1 {
        static nextInt(n, m) {
            var random = Math.floor(Math.random() * (m - n + 1) + n);
            return random;
        }
        static nextFloat(n, m) {
            var random = Math.random() * (m - n) + n;
            return random;
        }
        static isIphoneX() {
            var width = Laya.Browser.width;
            var height = Laya.Browser.height;
            var ratio = width > height ? (width / height) : (height / width);
            var isIphoneX = ratio > 1.95 ? true : false;
            return isIphoneX;
        }
        static shuffeArrSelf(arr) {
            for (var i = arr.length - 1; i >= 0; i--) {
                var randomIndex = Math.floor(Math.random() * (i + 1));
                var itemAtIndex = arr[randomIndex];
                arr[randomIndex] = arr[i];
                arr[i] = itemAtIndex;
            }
            return arr;
        }
        static shuffeArr(arr) {
            let temArr = [];
            for (let k = 0; k < arr.length; k++) {
                const ele = arr[k];
                temArr.push(ele);
            }
            for (var i = temArr.length - 1; i >= 0; i--) {
                var randomIndex = Math.floor(Math.random() * (i + 1));
                var itemAtIndex = temArr[randomIndex];
                temArr[randomIndex] = temArr[i];
                temArr[i] = itemAtIndex;
            }
            return temArr;
        }
        static WxLwSortArr(arr) {
            var temp;
            for (var i = 0; i < arr.length; i++) {
                for (var j = i + 1; j < arr.length; j++) {
                    if (arr[j].sort < arr[i].sort) {
                        temp = arr[j];
                        arr[j] = arr[i];
                        arr[i] = temp;
                    }
                }
            }
            return arr;
        }
        static getOrderItem(arr) {
            this.curIndex += 1;
            if (this.curIndex >= arr.length - 1) {
                this.curIndex = 0;
            }
            return arr[this.curIndex];
        }
        static getRandomIndex(arr) {
            if (arr && arr.length > 0) {
                return Math.floor(Math.random() * arr.length);
            }
            else {
                return -1;
            }
        }
        static getRandomItem(arr) {
            if (arr && arr.length > 0) {
                return arr[Math.floor(Math.random() * arr.length)];
            }
            else {
                return null;
            }
        }
        static isLowScreen() {
            var clientWidth = Laya.Browser.clientWidth;
            var clientHeight = Laya.Browser.clientHeight;
            if (clientHeight / clientWidth <= 1.7) {
                return true;
            }
            return false;
        }
        static autoFix() {
            if (Laya.Browser.onPC || this.isLowScreen()) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL;
                Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
                Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
                console.log("pc--mode--");
            }
            else {
                Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
                Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
                Laya.stage.screenMode = Laya.Stage.SCREEN_VERTICAL;
                if (this.isAllScreen()) {
                    Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                    console.log("mb--SCALE_FIXED_WIDTH--");
                }
                else {
                    Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                    console.log("mb--SCALE_FIXED_HEIGHT--");
                }
            }
        }
        static isAllScreen() {
            var clientWidth = Laya.Browser.clientWidth;
            var clientHeight = Laya.Browser.clientHeight;
            if (clientHeight / clientWidth >= 1.9) {
                return true;
            }
            return false;
        }
        static getBottom() {
            let bottomMaxHeight = 250 * Laya.Browser.clientHeight / 1334;
            let bottomDiff = Laya.Browser.clientHeight - (1334 * Laya.Browser.clientWidth / 750);
            let bottomNeed = bottomDiff > 0 ?
                (bottomDiff > bottomMaxHeight ? bottomDiff - bottomMaxHeight : bottomMaxHeight - bottomDiff)
                : bottomMaxHeight - bottomDiff;
            bottomNeed = bottomNeed * 750 / Laya.Browser.clientWidth;
            bottomNeed = Utils$1.isIphoneX() ? Laya.stage.height - 1334 + bottomNeed + 40 : bottomNeed + 20;
            if (Utils$1.isIphoneX()) {
                bottomNeed = bottomNeed < 340 ? 340 : bottomNeed;
            }
            if (bottomNeed >= 350) {
                bottomNeed = 350;
            }
            console.log("bottomNeed--->    ", bottomNeed);
            return bottomNeed;
        }
        static compareVersion(v1, v2) {
            let va1 = v1.split('.');
            let va2 = v2.split('.');
            let len = Math.max(va1.length, va2.length);
            while (va1.length < len) {
                va1.push('0');
            }
            while (va2.length < len) {
                va2.push('0');
            }
            for (let i = 0; i < len; i++) {
                let num1 = parseInt(va1[i]);
                let num2 = parseInt(va2[i]);
                if (num1 > num2) {
                    return true;
                }
                else if (num1 < num2) {
                    return false;
                }
            }
            return true;
        }
        static saveNavigateAd() {
            LocalStorageUtils.setJson(this.DATA_NAV, UserGD.navAdArray);
        }
        static getNavigateAd() {
            let navAdArr = LocalStorageUtils.getJson(this.DATA_NAV, new Array());
            return navAdArr;
        }
        static getNotJumpedNavigateAd() {
            let ads = Utils$1.getJumpedNavigateAd();
            let adsToReturn = new Array();
            if (UserGD.navAdArray.length > 0) {
                for (let ele of UserGD.navAdArray) {
                    if (!ads[ele.wxAppId]) {
                        adsToReturn.push(ele);
                    }
                }
            }
            return adsToReturn;
        }
        static getJumpedNavigateAd() {
            let ads = LocalStorageUtils.getJson(this.DATA_JUMPED_NAV, null);
            let dateToday = new Date();
            let defaultAds = {
                date: {
                    year: dateToday.getFullYear(),
                    month: dateToday.getMonth(),
                    day: dateToday.getDate()
                }
            };
            if (ads) {
                if (ads.date.year == dateToday.getFullYear() && ads.date.month == dateToday.getMonth() && ads.date.day == dateToday.getDate()) {
                    return ads;
                }
                else {
                    return defaultAds;
                }
            }
            else {
                return defaultAds;
            }
        }
        static setNavgatedId(AdId) {
            let ads = Utils$1.getJumpedNavigateAd();
            ads[AdId] = true;
            LocalStorageUtils.setJson(this.DATA_JUMPED_NAV, ads);
        }
        static setWxInterShowTime(time) {
            LocalStorageUtils.setInt(this.DATA_WX_INTER_SHOW_TIME, time);
        }
        static getWxInterShowTime() {
            return LocalStorageUtils.getInt(this.DATA_WX_INTER_SHOW_TIME, 0);
        }
        static showLeftRightDrawAd(box, processAfterCreate, caller) {
            if (SdkCenter.getInstannce().isWx() && UserGD.openUnionAd && UserGD.navAdArray.length > 0) {
            }
        }
    }
    Utils$1.DATA_NAV = "data_nav";
    Utils$1.DATA_JUMPED_NAV = "data_jumped_nav";
    Utils$1.DATA_WX_INTER_SHOW_TIME = "data_wx_interAd_show_time";
    Utils$1.curIndex = -1;

    class JJSdkConfig {
    }
    JJSdkConfig.SDK_VERSION = "1.0.0";
    JJSdkConfig.GAME_ID = 184;
    JJSdkConfig.UNION_CHANNEL_ID = 148;

    class UserInfo {
    }

    class Http extends Laya.Script {
        constructor() {
            super();
        }
        static getInstance() {
            if (this._instance == null) {
                this._instance = new Http();
            }
            return this._instance;
        }
        get(url, data, caller, callback) {
            var http = new Laya.HttpRequest();
            http.once(Laya.Event.COMPLETE, this, function (e) {
                callback.apply(caller, [{ state: 200, data: http.data }]);
            });
            http.once(Laya.Event.ERROR, this, function (e) {
                callback.apply(caller, [{ state: 500, msg: e }]);
            });
            if (data) {
                for (var key in data) {
                    url += "&" + key + "=" + data[key];
                }
            }
            console.log("-----url", url);
            http.send(url, null, 'get', 'json');
            return this;
        }
        post(url, data, caller, callback) {
            var http = new Laya.HttpRequest();
            http.once(Laya.Event.COMPLETE, this, function (e) {
                callback.apply(caller, [{ state: 200, data: http.data }]);
            });
            http.once(Laya.Event.ERROR, this, function (e) {
                callback.apply(caller, [{ state: 500, msg: e }]);
            });
            let index = 0;
            let dataStr = "";
            for (let key in data) {
                dataStr += index ? "&" + key + "=" + data[key] : key + "=" + data[key];
                ++index;
            }
            http.send(url, dataStr, 'post', "json");
            return this;
        }
    }

    class JJSdkCenter extends Laya.Script {
        constructor() {
            super();
            this.ENV = "prod";
            this.moreGameAppId = "wx100aaa003b8934d9";
            this.JUMP_MINI_PROGRAM_ENV = "release";
            this.HOST = "https://xyx.45app.com";
            this.SDKVERSION = JJSdkConfig.SDK_VERSION;
            this.gameId = JJSdkConfig.GAME_ID;
            this.unionChannelId = JJSdkConfig.UNION_CHANNEL_ID;
            this.wx = Laya.Browser.window.wx;
            this.qq = Laya.Browser.window.qq;
            this.sysInfo = null;
            this.helpid = null;
            this.isNavMini = false;
            this.requestLoginTimeLeft = 3;
            this.drawerAd = new Array();
            this.shareArr = new Array();
            this.shareNormalArr = new Array();
        }
        getWxAdInfo() {
            var self = this;
            if (self.adInfo) {
                return self.adInfo.wxAd;
            }
            else {
                return null;
            }
        }
        getPlatAd() {
            return this.adInfo.platAd;
        }
        getSdkVersion() {
            if (this.gameInfo == undefined) {
                return "1.0.0";
            }
            return this.gameInfo.versionCode;
        }
        getIOSPayLevel() {
            if (this.gameInfo == undefined) {
                return 10;
            }
            return this.gameInfo.IOSPayLevel;
        }
        getShareKey() {
            if (this.gameInfo == undefined) {
                return false;
            }
            return this.gameInfo.openShare;
        }
        getSwitch(key) {
            if (this.gameInfo) {
                return this.gameInfo[key];
            }
            else {
                return null;
            }
        }
        getSDKConfig(gameId, callback) {
            var self = this;
            if (gameId != undefined) {
                this.gameId = gameId;
            }
            var lauchSyn = this.wx.getLaunchOptionsSync();
            var query = lauchSyn.query;
            var referrerInfo = lauchSyn.referrerInfo;
            this.sysInfo = Laya.Browser.window.wx.getSystemInfoSync();
            Http.getInstance().get(this.HOST + "/getConfiginfo?port=9002", {
                version: this.SDKVERSION,
                gameId: this.gameId,
                SDKVERSION: this.SDKVERSION,
                channelId: this.unionChannelId,
            }, this, function (res) {
                var data = res.data;
                console.log("sdkdata: => ", data);
                if (!data) {
                    if (callback) {
                        callback();
                    }
                    return;
                }
                if (data.adInfo != "" && data.adInfo != undefined) {
                    var platAd = data.adInfo.platAd;
                    if (platAd != "" && platAd) {
                    }
                    else {
                        data.adInfo.platAd = null;
                    }
                }
                if (data.gameInfo != "" && data.gameInfo != undefined) {
                    var gameInfo = data.gameInfo;
                    self.gameId = gameInfo.id;
                    self.gameInfo = gameInfo;
                    self.adInfo = data.adInfo;
                    if (self.adInfo.wxAd == undefined) {
                        self.adInfo.wxAd = {};
                    }
                    self.shareInfo = data.shareInfo;
                    if (self.shareInfo != null) {
                        var grouprank = self.shareInfo.grouprank;
                        var menu = self.shareInfo.menu;
                        var regular = self.shareInfo.regular;
                        var result = self.shareInfo.result;
                        var extension1 = self.shareInfo.extension1;
                        var extension2 = self.shareInfo.extension2;
                        var extension3 = self.shareInfo.extension3;
                        var extension4 = self.shareInfo.extension4;
                        var extension5 = self.shareInfo.extension5;
                        var extension6 = self.shareInfo.extension6;
                        self.shareArr = new Array();
                        self.shareNormalArr = new Array();
                        if (grouprank != undefined && grouprank.length > 0) {
                            for (let i = 0; i < grouprank.length; i++) {
                                const element = grouprank[i];
                                self.shareArr.push(element);
                            }
                        }
                        if (menu != undefined && menu.length > 0) {
                            for (let i = 0; i < menu.length; i++) {
                                const element = menu[i];
                                self.shareArr.push(element);
                            }
                        }
                        if (regular != undefined && regular.length > 0) {
                            for (let i = 0; i < regular.length; i++) {
                                const element = regular[i];
                                self.shareArr.push(element);
                            }
                        }
                        if (result != undefined && result.length > 0) {
                            for (let i = 0; i < result.length; i++) {
                                const element = result[i];
                                self.shareArr.push(element);
                            }
                        }
                        if (extension1 != undefined && extension1.length > 0) {
                            for (let i = 0; i < extension1.length; i++) {
                                const element = extension1[i];
                                self.shareNormalArr.push(element);
                            }
                        }
                        if (extension2 != undefined && extension2.length > 0) {
                            for (let i = 0; i < extension2.length; i++) {
                                const element = extension2[i];
                                self.shareNormalArr.push(element);
                            }
                        }
                        if (extension3 != undefined && extension3.length > 0) {
                            for (let i = 0; i < extension3.length; i++) {
                                const element = extension3[i];
                                self.shareNormalArr.push(element);
                            }
                        }
                        if (extension4 != undefined && extension4.length > 0) {
                            for (let i = 0; i < extension4.length; i++) {
                                const element = extension4[i];
                                self.shareNormalArr.push(element);
                            }
                        }
                        if (extension5 != undefined && extension5.length > 0) {
                            for (let i = 0; i < extension5.length; i++) {
                                const element = extension5[i];
                                self.shareNormalArr.push(element);
                            }
                        }
                        if (extension6 != undefined && extension6.length > 0) {
                            for (let i = 0; i < extension6.length; i++) {
                                const element = extension6[i];
                                self.shareNormalArr.push(element);
                            }
                        }
                    }
                    if (callback) {
                        callback(data);
                    }
                }
            });
        }
        ;
        selfLogin(code, callback) {
            var launchOptions = this.wx.getLaunchOptionsSync();
            var launchOptionsData = JSON.stringify(launchOptions);
            if (code) {
                let self = this;
                Http.getInstance().get(this.HOST + "/login?port=9002", {
                    code: code,
                    gameId: this.gameId,
                    extData: launchOptionsData,
                }, this, function (res2) {
                    console.log("-------------login11111111111", res2);
                    let state = res2.state;
                    console.log("request callback state: ", state);
                    if (!res2 || !res2.data || !res2.data.userInfo) {
                        if (--self.requestLoginTimeLeft > 0) {
                            self.selfLogin(code, callback);
                        }
                        else {
                            console.log("重复请求后台登陆失败");
                        }
                    }
                    else {
                        self.userInfo = res2.data.userInfo;
                        if (self.userInfo) {
                            var userInfo = new UserInfo();
                            userInfo.uid = self.userInfo.uid;
                            userInfo.openId = self.userInfo.openId ? self.userInfo.openId : "fsffafsfsffsfsfff";
                            userInfo.avatar = self.userInfo.avatar;
                            userInfo.userName = self.userInfo.userName;
                            userInfo.sceneId = self.userInfo.sceneId;
                            self.userInfo = userInfo;
                            UserGD.openId = userInfo.openId;
                            Laya.LocalStorage.setItem("userOpneId", userInfo.openId);
                            console.log("----------self.userInfo", self.userInfo);
                        }
                        else {
                        }
                        if (callback) {
                            callback(res2.data);
                        }
                    }
                });
            }
            else {
            }
        }
        checkScene(arr) {
            if (!SdkCenter.getInstannce().isWx() && !SdkCenter.getInstannce().isQQ()) {
                return null;
            }
            var launchOptions = this.wx.getLaunchOptionsSync();
            var launchOptionsData = JSON.stringify(launchOptions);
            PulCenter.checkScene(launchOptions, null, arr);
            return launchOptionsData;
        }
        login(callback) {
            var self = this;
            if (SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ()) {
                let launchOptionsData = this.checkScene();
                this.wx.login({
                    success(res) {
                        console.log("-------登陆成功", launchOptionsData);
                        self.selfLogin(res.code, callback);
                    },
                    fail: function () {
                        console.log("-------登陆失败");
                    },
                    complete: function () {
                        console.log("--------登陆完成");
                    }
                });
            }
        }
        ;
        getHelpInfo(type, limitNum, callback) {
            var self = this;
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () { },
                    complete: function () { },
                    url: this.HOST + "/getHelpInfo",
                    data: {
                        port: 9002,
                        gameId: this.gameId,
                        type: type,
                        uid: this.userInfo.uid,
                        limitNum: limitNum,
                    },
                    success: function (res) {
                        var data = res.data;
                        var helpInfo = null;
                        if (data.errcode == 0 && data.helpInfo != undefined) {
                            helpInfo = data.helpInfo;
                            self.helpid = helpInfo.id;
                        }
                        if (callback != undefined) {
                            callback(data);
                        }
                    }
                });
            }
        }
        setHelpInfo(gameId, hid, callback) {
            var self = this;
            if (gameId != undefined) {
                this.gameId = gameId;
            }
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () {
                    },
                    complete: function () { },
                    url: this.HOST + "/setHelp",
                    data: {
                        port: 9002,
                        gameId: this.gameId,
                        uid: self.userInfo.uid,
                        hid: hid ? hid : self.helpid,
                    },
                    success: function (res) {
                        var data = res.data;
                        var helpUserList = null;
                        if (data.errcode == 0 && data.helpUserList != undefined) {
                            helpUserList = data.helpUserList;
                        }
                        if (callback != undefined) {
                            callback(helpUserList);
                        }
                    }
                });
            }
        }
        updateUserInfo(object, callback) {
            var self = this;
            if (typeof (Laya.Browser.window.wx) != "undefined" && this.userInfo && this.userInfo.openId) {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () { },
                    complete: function () { },
                    url: this.HOST + "/updateUserInfo?port=9002",
                    data: {
                        openId: self.userInfo.openId,
                        rawData: object,
                        gameId: this.gameId,
                    },
                    success: function (res) {
                        if (callback != undefined) {
                            callback(res.data);
                        }
                    }
                });
            }
        }
        ;
        submitScore(score, callback) {
            var self = this;
            var userInfo = this.getUserInfo();
            if (!userInfo) {
                return;
            }
            var avatar = self.userInfo.avatar;
            var userName = self.userInfo.userName;
            if (avatar != null && userName != null
                && typeof (avatar) == "string" && typeof (userName) == "string") {
                if (avatar.length > 0 && userName.length > 0) {
                    if (typeof (Laya.Browser.window.wx) != "undefined") {
                        Laya.Browser.window.wx.request({
                            header: {},
                            method: "GET",
                            dataType: "",
                            responseType: "text",
                            fail: function () { },
                            complete: function () { },
                            url: self.HOST + "/submitScore?port=9002",
                            data: {
                                openId: userInfo.openId,
                                score: score,
                                gameId: self.gameId,
                            },
                            success: function (res) {
                                if (callback != undefined) {
                                    callback(res.data);
                                }
                            }
                        });
                    }
                }
            }
        }
        ;
        getRank(num, callback) {
            var self = this;
            if (self.userInfo != undefined) {
                if (typeof (Laya.Browser.window.wx) != "undefined") {
                    Laya.Browser.window.wx.request({
                        header: {},
                        method: "GET",
                        dataType: "",
                        responseType: "text",
                        fail: function () { },
                        complete: function () { },
                        url: self.HOST + "/rank?port=9002",
                        data: {
                            openId: self.userInfo.openId,
                            gameId: self.gameId,
                            num: num
                        },
                        success: function (res) {
                            if (callback != undefined) {
                                callback(res.data);
                            }
                        }
                    });
                }
            }
        }
        ;
        getScore(callback) {
            var self = this;
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () { },
                    complete: function () { },
                    url: self.HOST + "/getScore?port=9002",
                    data: {
                        openId: self.userInfo.openId,
                        gameId: self.gameId
                    },
                    success: function (res) {
                        if (callback != undefined) {
                            callback(res.data);
                        }
                    }
                });
            }
        }
        ;
        subscribe(tempIds, callback) {
            var idstr = "";
            for (let index = 0; index < tempIds.length; index++) {
                const element = tempIds[index];
                idstr += element + ",";
            }
            idstr = idstr.substr(0, idstr.length - 1);
            var requestData = {
                version: this.SDKVERSION,
                gameId: this.gameId,
                openId: (this.userInfo) ? this.userInfo.openId : "",
                tempids: idstr,
                SDKVERSION: this.SDKVERSION,
                channelId: this.unionChannelId,
            };
            this.qq.request({
                header: {},
                method: "GET",
                dataType: "",
                responseType: "text",
                url: "https://xyx.45app.com" + "/subscribe?port=9002",
                data: requestData,
                success: function (res) {
                    console.log("------发送订阅记录, res: ", res);
                    if (callback) {
                        callback();
                    }
                },
                fail: function () {
                },
                complete: function () {
                }
            });
        }
        ClickAd(data, callback, failcallback, type) {
            var self = this;
            if (data) {
                if (data.wxAppId) {
                    self.navigateToAd(data, callback, failcallback, type);
                }
                else if (data.miniQR) {
                    self.previewImage(data, callback, failcallback, type);
                }
            }
            else {
                if (failcallback) {
                    failcallback();
                }
            }
        }
        ;
        getSysInfo(data) {
            var sysInfo = Laya.Browser.window.wx.getSystemInfoSync();
            var pdata = { "adId": 0, "gameId": 0, "openId": 0 };
            pdata = sysInfo;
            pdata.adId = data.id;
            pdata.gameId = this.gameId;
            pdata.openId = (this.userInfo != undefined) ? this.userInfo.openId : 0;
            return pdata;
        }
        navigateToAd(data, success, failCallBack, type) {
            var self = this;
            if (data.wxAppId) {
                var pdata = this.getSysInfo(data);
                if (typeof (Laya.Browser.window.wx) != "undefined") {
                    if (!this.isNavMini) {
                        this.isNavMini = true;
                        Laya.Browser.window.wx.navigateToMiniProgram({
                            fail: function () {
                                self.isNavMini = false;
                                if (failCallBack) {
                                    failCallBack();
                                }
                            },
                            complete: function () {
                            },
                            envVersion: "",
                            appId: data.wxAppId,
                            path: data.path,
                            extraData: { appid: data.wxAppId, channel: data.path },
                            success: function () {
                                self.isNavMini = false;
                                if (success) {
                                    success();
                                }
                                Laya.Browser.window.wx.request({
                                    header: {},
                                    method: "GET",
                                    dataType: "",
                                    responseType: "text",
                                    fail: function () {
                                    },
                                    complete: function () { },
                                    url: self.HOST + "/adClick?port=9002",
                                    data: pdata,
                                    success: function (res) {
                                    }
                                });
                            }
                        });
                    }
                    else {
                        if (failCallBack) {
                            failCallBack();
                        }
                    }
                }
            }
        }
        ;
        previewImage(data, callback, failcallback, type) {
            var self = this;
            var pdata = this.getSysInfo(data);
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.previewImage({
                    current: "",
                    fail: function () { },
                    complete: function () { },
                    urls: [data.miniQR],
                    success: function success() {
                        Laya.Browser.window.wx.request({
                            header: {},
                            method: "GET",
                            dataType: "",
                            responseType: "text",
                            fail: function () {
                                if (failcallback) {
                                    failcallback();
                                }
                            },
                            complete: function () { },
                            url: self.HOST + "/adClick?port=9002",
                            data: pdata,
                            success: function success(res) {
                                if (callback != undefined) {
                                    callback(res.data);
                                }
                            }
                        });
                    }
                });
            }
        }
        ;
        shareAppMessage(data) {
            var self = this;
            if (data.id == undefined || data.id == null || data.id == "") {
                data.id = 0;
            }
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () { },
                    complete: function () { },
                    url: self.HOST + "/share?port=9002",
                    data: {
                        sceneId: data.id,
                        gameId: self.gameId,
                        openId: self.userInfo.openId,
                    },
                    success: function (res) {
                    }
                });
            }
        }
        ;
        updateRole(data, callback) {
            var self = this;
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () { },
                    complete: function () { },
                    url: self.HOST + "/updateRole?port=9002",
                    data: {
                        roleName: this.userInfo.userName,
                        serverId: self.gameId,
                        gameId: self.gameId,
                        openId: this.userInfo.openId,
                        roleLevel: this.userInfo.userLv,
                        extInfo: data.extInfo
                    },
                    success: function (res) {
                        if (callback != undefined) {
                            callback(res.data);
                        }
                    }
                });
            }
        }
        ;
        getRole(data, callback) {
            var self = this;
            if (typeof (Laya.Browser.window.wx) != "undefined") {
                Laya.Browser.window.wx.request({
                    header: {},
                    method: "GET",
                    dataType: "",
                    responseType: "text",
                    fail: function () { },
                    complete: function () { },
                    url: self.HOST + "/getRole?port=9002",
                    data: {
                        serverId: self.gameId,
                        gameId: self.gameId,
                        openId: self.userInfo.openId
                    },
                    success: function (res) {
                        if (callback != undefined) {
                            callback(res.data);
                        }
                    }
                });
            }
        }
        ;
        getDrawerAd() {
            return this.drawerAd;
        }
        getShareArr() {
            return this.shareArr;
        }
        getShareNormalArr() {
            return this.shareNormalArr;
        }
        getUserInfo() {
            return this.userInfo;
        }
    }

    class BaseSdkUtils {
        constructor() {
            this.callTimeLeft = 2;
        }
        init(params, callback, loginCallback) {
            var self = this;
            this.callbackAfterGetSDKConfig = callback;
            this.mJjSdk = new JJSdkCenter();
            if (SdkCenter.getInstannce().isQQ() || SdkCenter.getInstannce().isWx()) {
                this.mJjSdk.login(loginCallback);
            }
            this.mJjSdk.getSDKConfig(null, (data) => {
                self.initAfterGetSdkConfig(data);
            });
        }
        initAfterGetSdkConfig(data) {
            let self = this;
            if (!data) {
                if (this.callTimeLeft > 0) {
                    console.log("开始重新获取后台数据");
                    this.mJjSdk.getSDKConfig(null, (data) => {
                        self.initAfterGetSdkConfig(data);
                    });
                    --this.callTimeLeft;
                }
                else {
                    console.log("重新获取后台数据失败");
                }
            }
            else if (this.callTimeLeft != 2) {
                console.log("重新获取后台数据成功");
                Utils.dispatchEvent(SelfGameConfig.EVENT_REGET_SDK_CONFIG, true);
            }
            this.initSwitchs(data);
            if (this.callbackAfterGetSDKConfig) {
                this.callbackAfterGetSDKConfig(data);
                this.callbackAfterGetSDKConfig = null;
            }
        }
        compareVersion(v1, v2) {
            v1 = v1.split('.');
            v2 = v2.split('.');
            const len = Math.max(v1.length, v2.length);
            while (v1.length < len) {
                v1.push('0');
            }
            while (v2.length < len) {
                v2.push('0');
            }
            for (let i = 0; i < len; i++) {
                const num1 = parseInt(v1[i]);
                const num2 = parseInt(v2[i]);
                if (num1 > num2) {
                    return 1;
                }
                else if (num1 < num2) {
                    return -1;
                }
            }
            return 0;
        }
        getSwitch(key) {
            var value = this.mJjSdk.getSwitch(key);
            if (value != undefined && value == "yes") {
                value = true;
            }
            else {
                value = false;
            }
            return value;
        }
        initSwitchs(data) {
            if (!data) {
                return;
            }
            var self = this;
            this.getVersion();
            let obj = [
                "openBtn",
                "openBox",
                "openPrimordialClick",
                "openClickAd",
                "openBanner",
                "openUnionAd",
                "openStartbtn",
                "openShipin",
                "openJiaout",
                "openIndexHot",
                "openFullScreenThree",
                "openFullScreenThree1",
                "openFullScreenThree2",
                "openFullScreenTwo",
                "openFullScreenTwo1",
                "openFullScreenTwo2",
                "openQiangtan",
                "openRisk",
                "openSuperShare",
                "openPay",
                "openPower",
                "openIndexHot1",
                "openBottomMutual",
                "openLRMutual",
                "openSkinVideo",
                "openSkinVideoAddition",
                "openSkinBannerAddition",
                "openSpecialEffect",
                "trySkinSwitch",
                "videoMarkSwitch",
                "sceneSwitch"
            ];
            for (let i in obj) {
                UserGD[obj[i]] = this.getSwitch(obj[i]);
            }
            if (data.tempIds && data.tempIds.length > 0) {
                this.SUBSCRIBE_ID_ARR = data.tempIds;
            }
            let btnConfigStr = data.gameInfo.openBtnConfig;
            if (btnConfigStr) {
                let openBtnConfig = btnConfigStr.split(",");
                UserGD.openBtnConfig = new Array();
                for (let i in openBtnConfig) {
                    UserGD.openBtnConfig.push(parseInt(openBtnConfig[i]));
                }
            }
            let bannerConfigStr = data.gameInfo.bannerConfig;
            if (bannerConfigStr) {
                let bannerConfig = bannerConfigStr.split(",");
                UserGD.bannerConfig = new Array();
                for (let i in bannerConfig) {
                    UserGD.bannerConfig.push(parseInt(bannerConfig[i]));
                }
            }
            let onlineRewardConfigStr = data.gameInfo.onlineRewardConfig;
            if (onlineRewardConfigStr && onlineRewardConfigStr.length > 0) {
                UserGD.onlineRewardConfig = parseInt(onlineRewardConfigStr);
            }
            let energyConfigStr = data.gameInfo.powerConfig;
            if (energyConfigStr) {
                let energyConfig = energyConfigStr.split(",");
                UserGD.energyConfig = new Array();
                for (let i in energyConfig) {
                    UserGD.energyConfig.push(parseInt(energyConfig[i]));
                }
            }
            let skinRateConfigStr = data.gameInfo.skinrateConfig;
            if (skinRateConfigStr) {
                let skinRateConfig = skinRateConfigStr.split(",");
                UserGD.levelSkinConfig = new Array();
                for (let i in skinRateConfig) {
                    UserGD.levelSkinConfig.push(parseInt(skinRateConfig[i]));
                }
            }
            let riskCongigStr = data.gameInfo.riskConfig;
            if (riskCongigStr && riskCongigStr.length > 0) {
                UserGD.riskConfig = parseInt(riskCongigStr);
            }
            let shipinConfigStr = data.gameInfo.ShipinConfig;
            if (shipinConfigStr) {
                let shipinConfig = shipinConfigStr.split(",");
                UserGD.shipinConfig = new Array();
                for (let i in shipinConfig) {
                    UserGD.shipinConfig.push(parseInt(shipinConfig[i]));
                }
            }
            let trySkinConfigStr = data.gameInfo.trySkinConfig;
            if (trySkinConfigStr) {
                let trySkinConfig = trySkinConfigStr.split(",");
                UserGD.trySkinConfig = new Array();
                for (let i in trySkinConfig) {
                    UserGD.trySkinConfig.push(parseInt(trySkinConfig[i]));
                }
            }
            let limitSceneStr = data.gameInfo.limitScene;
            if (limitSceneStr) {
                let limitScene = limitSceneStr.split(",");
                let sceneNumArr = new Array();
                for (let i in limitScene) {
                    sceneNumArr.push(parseInt(limitScene[i]));
                }
                this.mJjSdk.checkScene(sceneNumArr);
            }
            console.log("UserGD.openBtnConfig: ", UserGD.openBtnConfig);
        }
        getVersion() {
            var versionCode = this.mJjSdk.getSdkVersion();
            if (versionCode != undefined && versionCode == JJSdkConfig.SDK_VERSION) {
                UserGD.isOfficial = true;
            }
            else {
                UserGD.isOfficial = false;
            }
            console.log("--------UserGD.isOfficial", UserGD.isOfficial);
        }
    }

    class AudioUtils {
        static init() {
            AudioUtils.resetAudio();
            Laya.SoundManager.useAudioMusic = false;
            Laya.SoundManager.autoReleaseSound = false;
            Laya.SoundManager.autoStopMusic = true;
        }
        static resetAudio() {
            AudioUtils.mBgmVolume = AudioUtils.getBgmVolume();
            this.setBgmVolume(AudioUtils.mBgmVolume);
            AudioUtils.mSoundVolume = AudioUtils.getSoundVolume();
            this.setSoundVolume(AudioUtils.mSoundVolume);
        }
        static setSoundVolume(v) {
            AudioUtils.mSoundVolume = v;
            Laya.SoundManager.setSoundVolume(AudioUtils.mSoundVolume);
            console.log("AudioUtils.mSoundVolume: --->", AudioUtils.mSoundVolume);
            Laya.LocalStorage.setItem("sound_volume", AudioUtils.mSoundVolume + "");
        }
        static getSoundVolume() {
            var soundVolumeStr = Laya.LocalStorage.getItem("sound_volume");
            if (soundVolumeStr) {
                AudioUtils.mSoundVolume = parseInt(soundVolumeStr);
            }
            else {
                AudioUtils.mSoundVolume = AudioUtils.DEFAULT_VOLUME;
            }
            return AudioUtils.mSoundVolume;
        }
        static setBgmVolume(v) {
            AudioUtils.mBgmVolume = v;
            Laya.SoundManager.setMusicVolume(AudioUtils.mBgmVolume);
            Laya.LocalStorage.setItem("bgm_volume", AudioUtils.mBgmVolume + "");
        }
        static getBgmVolume() {
            var bgmVolumeStr = Laya.LocalStorage.getItem("bgm_volume");
            if (bgmVolumeStr) {
                AudioUtils.mBgmVolume = parseFloat(bgmVolumeStr);
            }
            else {
                AudioUtils.mBgmVolume = AudioUtils.DEFAULT_VOLUME;
            }
            console.log("LocalStorage.getItem(bgm_volume) ->", bgmVolumeStr);
            console.log("getBgmVolume()  ---- >", AudioUtils.mBgmVolume);
            return AudioUtils.mBgmVolume;
        }
        static setTempBgmVolume(v) {
            if (this.mBgmChannel) {
                this.mBgmChannel.volume = v;
            }
        }
        static playBgm(name, startTime) {
            let path = this.path_music + name + ".mp3";
            startTime = startTime ? startTime : 0;
            this.mBgmIsOver = false;
            this.mBgmPath = path;
            if (this.mBgmChannel) {
                this.mBgmChannel.stop();
            }
            this.mBgmChannel = Laya.SoundManager.playMusic(path, 0, Laya.Handler.create(this, function () {
                AudioUtils.mBgmIsOver = true;
            }), startTime);
        }
        static playSound(name, isLoop) {
            if (AudioUtils.mSoundVolume > 0) {
                if (isLoop) {
                    Laya.SoundManager.playSound(this.path_sound + name + this.suffix, 0);
                }
                else {
                    Laya.SoundManager.playSound(this.path_sound + name + this.suffix);
                }
            }
        }
        static stopSound(name) {
            Laya.SoundManager.stopSound(this.path_sound + name + +this.suffix);
        }
        static openAll() {
            if (AudioUtils.mBgmChannel) {
                AudioUtils.mBgmChannel.resume();
            }
            else {
                AudioUtils.playBgm("bgm");
            }
            AudioUtils.setBgmVolume(AudioUtils.DEFAULT_BGM_VOLUME);
            AudioUtils.setSoundVolume(AudioUtils.DEFAULT_VOLUME);
            this.setSound(true);
        }
        static stopBgm() {
            if (this.mBgmChannel) {
                this.mBgmChannel.stop();
            }
        }
        static destroyBgm() {
            Laya.SoundManager.destroySound(this.mBgmPath);
        }
        static muted() {
            if (AudioUtils.mBgmChannel) {
                AudioUtils.mBgmChannel.pause();
            }
            AudioUtils.setBgmVolume(0);
            AudioUtils.setSoundVolume(0);
            this.setSound(false);
        }
        static resumeBgm() {
            if (this.mBgmChannel) {
                this.mBgmChannel.resume();
            }
        }
        static pauseBgm() {
            Laya.SoundManager.stopMusic();
        }
        static resumeAll() {
            if (AudioUtils.mBgmChannel) {
                AudioUtils.mBgmChannel.resume();
            }
            AudioUtils.setBgmVolume(AudioUtils.DEFAULT_BGM_VOLUME);
            AudioUtils.setSoundVolume(AudioUtils.DEFAULT_VOLUME);
            console.log("resumeVolume----- ");
        }
        static pauseAll() {
            if (AudioUtils.mBgmChannel) {
                AudioUtils.mBgmChannel.pause();
            }
            AudioUtils.setBgmVolume(0);
            AudioUtils.setSoundVolume(0);
            console.log("pauseAll******* ");
        }
        static isSound() {
            return LocalStorageUtils.getBoolean(SelfGameConfig.DATA_SETTING_SOUND, true);
        }
        static setSound(b) {
            LocalStorageUtils.setBoolean(SelfGameConfig.DATA_SETTING_SOUND, b);
        }
    }
    AudioUtils.mBgmVolume = 0.1;
    AudioUtils.mSoundVolume = 1;
    AudioUtils.DEFAULT_VOLUME = 0.1;
    AudioUtils.DEFAULT_BGM_VOLUME = 0.1;
    AudioUtils.mBgmIsOver = false;
    AudioUtils.suffix = ".mp3";
    AudioUtils.path_sound = "res2d/resAudio/sounds/";
    AudioUtils.path_music = "res2d/resAudio/music/";

    class AudioManager {
        static init() {
            AudioUtils.init();
        }
        static playClick() {
            AudioUtils.playSound(this.sounds.click);
        }
        static playBgm() {
            AudioUtils.playBgm("bgm");
        }
        static isSound() {
            return AudioUtils.isSound();
        }
        static soundSwitch() {
            AudioUtils.isSound() ? AudioUtils.muted() : AudioUtils.openAll();
        }
        static stopBgm() {
            console.log("停止背景音乐");
            AudioUtils.stopBgm();
        }
        static playInfect() {
            AudioUtils.playSound(this.sounds.infect);
        }
        static playGetCoin() {
            AudioUtils.playSound(this.sounds.get_coin);
        }
        static playSmokeAtFinal() {
            AudioUtils.playSound(this.sounds.smoke_at_final);
        }
        static playExplosion() {
            AudioUtils.playSound(this.sounds.explosion);
        }
        static playFail() {
            AudioUtils.playSound(this.sounds.fail);
        }
        static playCut() {
            AudioUtils.playSound((Math.random() > 0.5) ? this.sounds.cut_1 : this.sounds.cut_2);
        }
        static playHit() {
            AudioUtils.playSound((Math.random() > 0.5) ? this.sounds.hit_1 : this.sounds.hit_2);
        }
        static playJump() {
            AudioUtils.playSound(this.sounds.jump);
        }
        static playPunch() {
            AudioUtils.playSound(this.sounds.punch);
        }
        static playUiCoin() {
            AudioUtils.playSound(this.sounds.ui_coin);
        }
        static playSpeedUp() {
            AudioUtils.playSound(this.sounds.speed_up);
        }
        static playFly() {
            AudioUtils.playSound(this.sounds.fly);
        }
        static playWin() {
            AudioUtils.playSound(this.sounds.win);
        }
        static playFinishProgress() {
            AudioUtils.playSound(this.sounds.finish_progress);
        }
        static playWallFall() {
            AudioUtils.playSound(this.sounds.wall_fall);
        }
        static playDoorBreak() {
            AudioUtils.playSound(this.sounds.door_break);
        }
        static playGetEnergy() {
        }
    }
    AudioManager.sounds = {
        click: "click",
        infect: "infect",
        get_coin: "get_coin",
        smoke_at_final: "smoke_at_final",
        explosion: "explosion",
        fail: "fail",
        cut_1: "cut_1",
        cut_2: "cut_2",
        hit_1: "hit_1",
        hit_2: "hit_2",
        jump: "jump",
        punch: "punch",
        ui_coin: "ui_coin",
        speed_up: "speed_up",
        fly: "fly",
        win: "win",
        finish_progress: "finish_progress",
        wall_fall: "wall_fall",
        door_break: "door_break"
    };

    class WxSdkUtils extends BaseSdkUtils {
        constructor() {
            super(...arguments);
            this.wx = Laya.Browser.window.wx;
            this.mIsVibrate = false;
            this.mVideoIdArr = [];
            this.mVideoMap = {};
            this.mIsShowingVideo = false;
            this.isForceVideo = false;
            this.mBannerIdArr = [];
            this.mBannerMap = {};
            this.mIsShowBanner = false;
            this.currentBannerIndex = 0;
            this.currentBanerIndexForClick = 0;
            this.isFirstTimeForClick = true;
            this.currentCreateBannerIndex = 0;
            this.bannerPullChance = 3;
            this.mInterstitialAdIdArr = [];
            this.mInterstitialAdMap = {};
            this.mInterstitialAdIndex = 0;
            this.mIsShowedodal = false;
            this.mLatticeAds = new Array();
            this.mLatticeAdMap = {};
            this.mLatticeAdIndex = 0;
            this.mPrimordialIndex = 0;
            this.mPrimordialAds = new Array();
            this.mIsShowLatticeAd = false;
            this.mIsShowPrimordialAd = false;
            this.mShowExtension = false;
            this.mBannerShowTime = 0;
            this.mBannerAdShowing = false;
            this.mVideoAdShowing = false;
        }
        init(params, callback) {
            const updateManager = Laya.Browser.window.wx.getUpdateManager();
            updateManager.onCheckForUpdate(function (res) {
                console.log("res.hasUpdate: ", res.hasUpdate);
            });
            updateManager.onUpdateReady(function () {
                Laya.Browser.window.wx.showModal({
                    title: '更新提示',
                    content: '新版本已经准备好，是否重启应用？',
                    success(res) {
                        if (res.confirm) {
                            updateManager.applyUpdate();
                        }
                    }
                });
            });
            let gameConfig = params.gameConfig;
            JJSdkConfig.GAME_ID = gameConfig.wx.id;
            JJSdkConfig.SDK_VERSION = gameConfig.wx.ver;
            JJSdkConfig.UNION_CHANNEL_ID = gameConfig.wx.channel;
            Utils.onEvent(this, SelfGameConfig.EVENT_REGET_SDK_CONFIG, this.initAdvs);
            UserGD.bannerConfig = [1, 6, 30];
            let self = this;
            super.init(params, (data) => {
                if (data) {
                    self.initAdvs();
                }
                if (callback) {
                    callback();
                }
            });
            this.wx.onShow((res) => {
                if (self.mOnShowCallback) {
                    self.mOnShowCallback(res);
                }
                if (UserGD.shareType == "normal") {
                    UserGD.shareType = null;
                    return;
                }
                let curTime = Date.now();
                let lastTime = PulCenter.getDataByDay(UserGD.saveShareKey, null);
                if (lastTime) {
                    if (curTime - lastTime < 3 * 1000) {
                        Utils.dispatchEvent(SelfGameConfig.SHARE_CANCEL, true);
                        UserGD.shareType = null;
                        return;
                    }
                }
                if (UserGD.shareType) {
                    switch (UserGD.shareType) {
                    }
                }
                UserGD.shareType = null;
            });
            this.wx.onHide((res) => {
                if ((res.targetAction == 8 || res.targetAction == 9 || res.targetAction == 10)
                    && res.targetPagePath.length > 50) {
                    console.log("----------------点击了banner");
                }
                if (self.mOnHideCallback) {
                    self.mOnHideCallback(res);
                }
            });
            Laya.timer.loop(500, self, function loopBanner() {
                if (UserGD.canShowBanner) {
                    if (UserGD.isGameing) {
                        if (UserGD.isOfficial && UserGD.openBanner && (UserGD.showExtension || UserGD.sceneSwitch)) {
                            let passTime = Math.ceil(new Date().getTime() - self.mBannerShowTime);
                            if (passTime >= (UserGD.bannerConfig[2] * 1000)) {
                                self.mBannerShowTime = new Date().getTime();
                                console.log("---------------showBanner wx1-------------------");
                                self.showBannerNormal();
                            }
                        }
                        else {
                            if (self.mBannerAdShowing == true) {
                                self.mBannerAdShowing = false;
                                self.hideBanner();
                            }
                        }
                    }
                    else {
                        let passTime = Math.ceil(new Date().getTime() - self.mBannerShowTime);
                        if (passTime >= (UserGD.bannerConfig[2] * 1000) || UserGD.showBannerNow == true) {
                            if (UserGD.showBannerNow == true) {
                                UserGD.showBannerNow = false;
                            }
                            self.mBannerShowTime = new Date().getTime();
                            console.log("---------------showBanner wx2-------------------");
                            self.showBannerNormal();
                        }
                    }
                }
                else {
                    if (self.mBannerAdShowing == true) {
                        self.mBannerAdShowing = false;
                        self.hideBanner();
                    }
                }
            });
        }
        loopCreateBanner() {
            if (this.currentCreateBannerIndex < this.mBannerIdArr.length) {
                this.createBannerAd(this.mBannerIdArr[this.currentCreateBannerIndex]);
                ++this.currentCreateBannerIndex;
            }
            else {
                Laya.timer.clear(this, this.loopCreateBanner);
            }
        }
        initAdvs() {
            let self = this;
            let platAd = this.mJjSdk.getPlatAd();
            if (platAd) {
                let navAdArr = platAd.drawerAd;
                if (navAdArr && navAdArr.length > 0) {
                    UserGD.navAdArray = navAdArr;
                    Utils$1.saveNavigateAd();
                    UserGD.navAdNotJumpedArray = Utils$1.getNotJumpedNavigateAd();
                }
            }
            Utils.dispatchEvent(SelfGameConfig.EVENT_INIT_NAV_AD_PROGRESS, true);
            this.showShareMenu();
            let wxAdInfo = this.mJjSdk.getWxAdInfo();
            console.log("wxAdinfo  ", wxAdInfo);
            if (wxAdInfo != null) {
                var bannerAd = wxAdInfo.bannerAd;
                var rewardAd = wxAdInfo.videoAd;
                var popupAd = wxAdInfo.popupAd;
                if (bannerAd) {
                    let length = bannerAd.length;
                    this.currentCreateBannerIndex = 1;
                    this.mBannerIdArr = new Array();
                    for (let i = 0; i < length; i++) {
                        const ad = bannerAd[i];
                        this.mBannerIdArr.push(ad.unitId);
                    }
                    this.mBannerIdArr = Utils$1.shuffeArr(this.mBannerIdArr);
                    this.createBannerAd(this.mBannerIdArr[0]);
                    Laya.timer.loop(300, this, function createBannerAd() {
                        self.createBannerAd(self.mBannerIdArr[self.currentCreateBannerIndex]);
                        ++self.currentCreateBannerIndex;
                        if (self.currentCreateBannerIndex >= UserGD.bannerConfig[0] || self.currentCreateBannerIndex >= self.mBannerIdArr.length) {
                            Laya.timer.clear(self, createBannerAd);
                        }
                    });
                    Laya.timer.loop(UserGD.bannerConfig[1] * 1000, this, this.loopCreateBanner);
                }
                if (rewardAd) {
                    this.mVideoIdArr = new Array();
                    for (let j = 0; j < rewardAd.length; j++) {
                        let element = rewardAd[j];
                        this.mVideoIdArr.push(element.unitId);
                    }
                }
                if (popupAd && popupAd.length > 0) {
                    console.log("popupAd--------------> " + popupAd.length);
                    this.mInterstitialAdIdArr = new Array();
                    for (let j = 0; j < popupAd.length; j++) {
                        let element = popupAd[j];
                        this.mInterstitialAdIdArr.push(element.unitId);
                    }
                    let index = 0;
                    Laya.timer.loop(6000, this, function createInterAd() {
                        if (index < this.mInterstitialAdIdArr.length) {
                            self.createInterstitialAd(self.mInterstitialAdIdArr[index++], () => {
                            });
                        }
                        else {
                            Laya.timer.clear(self, createInterAd);
                        }
                    });
                }
                else {
                    console.log("interstitialAd is null");
                }
            }
        }
        setLoadingProgress(progress) {
        }
        loadSubpackage(nameArr, success, fail) {
            this.recursionLoadSubpackage(0, nameArr, function (code) {
                if (code == -1 && fail) {
                    fail();
                }
                else if (success) {
                    success();
                }
            });
        }
        vibrateShort(success, fail, complete) {
            let self = this;
            if (!this.mIsVibrate) {
                this.mIsVibrate = true;
                this.wx.vibrateShort({
                    "success": function () {
                        if (success) {
                            success();
                        }
                    },
                    "fail": function () {
                        if (fail) {
                            fail();
                        }
                    },
                    "complete": function () {
                        self.mIsVibrate = false;
                        if (complete) {
                            complete();
                        }
                    }
                });
            }
        }
        vibrateLong(success, fail, complete) {
            let self = this;
            if (!this.mIsVibrate) {
                this.mIsVibrate = true;
                this.wx.vibrateLong({
                    "success": function () {
                        if (success) {
                            success();
                        }
                    },
                    "fail": function () {
                        if (fail) {
                            fail();
                        }
                    },
                    "complete": function () {
                        self.mIsVibrate = false;
                        if (complete) {
                            complete();
                        }
                    }
                });
            }
        }
        onShow(callback) {
            this.mOnShowCallback = callback;
        }
        onHide(callback) {
            this.mOnHideCallback = callback;
        }
        showToast(title, icon, img) {
            let obj = {};
            obj.title = title;
            obj.icon = "none";
            img ? obj.image = img : "";
            this.wx.showToast(obj);
        }
        hideToast() {
            this.wx.hideToast();
        }
        showLoading(title) {
            Laya.timer.clear(this, this.hideLoading);
            this.wx.showLoading({
                title: title,
            });
            Laya.timer.once(2000, this, this.hideLoading);
        }
        hideLoading() {
            this.wx.hideLoading();
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            let self = this;
            let button = this.wx.createUserInfoButton({
                type: type,
                lang: lang,
                text: text,
                style: style
            });
            button.onTap((res) => {
                if (res && res.userInfo) {
                }
                if (res && onTap) {
                    onTap(res);
                }
                button.destroy();
            });
        }
        postMessage(message) {
            this.wx.postMessage(message);
        }
        showModal(modalInfo) {
            if (this.mIsShowedodal) {
                return;
            }
            this.mIsShowedodal = true;
            let self = this;
            let obj = {};
            modalInfo.title ? obj.title = modalInfo.title : null;
            modalInfo.content ? obj.content = modalInfo.content : null;
            obj.showCancal = modalInfo.showCancel;
            modalInfo.cancelText ? obj.cancelText = modalInfo.cancelText : null;
            modalInfo.cancelColor ? obj.cancelColor = modalInfo.cancelColor : null;
            modalInfo.confirmText ? obj.confirmText = modalInfo.confirmText : null;
            modalInfo.confirmColor ? obj.confirmColor = modalInfo.confirmColor : null;
            obj.success = function (res) {
                if (res.confirm) {
                    if (modalInfo.confirm) {
                        modalInfo.confirm();
                    }
                }
                else if (res.cancel) {
                    if (modalInfo.cancel) {
                        modalInfo.cancel();
                    }
                }
            };
            obj.fail = function () {
                if (modalInfo.fail) {
                    modalInfo.fail();
                }
            };
            obj.complete = function () {
                if (modalInfo.complete) {
                    modalInfo.complete();
                }
                self.mIsShowedodal = false;
            };
            this.wx.showModal(obj);
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.1.0") == false || !adUnitId) {
                this.mVideoAdShowing = false;
                if (onError) {
                    onError();
                }
                return;
            }
            let self = this;
            this.mVideoSuccessCallback = onSuccess;
            this.mVideoCancelCallback = onCancel;
            this.mVideoErrorCallback = onError;
            if (this.isForceVideo) {
                this.isForceVideo = false;
            }
            else {
                this.showLoading("视频加载中...");
            }
            let videoAd = this.wx.createRewardedVideoAd({
                adUnitId: adUnitId,
                multiton: true,
            });
            videoAd.onError(function (res) {
                self.mVideoAdShowing = false;
                self.mIsShowingVideo = false;
                if (self.mVideoErrorCallback) {
                    self.mVideoErrorCallback();
                    self.mVideoErrorCallback = null;
                }
            });
            videoAd.onClose(function (res) {
                self.eventToGame();
                self.mVideoAdShowing = false;
                self.mIsShowingVideo = false;
                if (res && res.isEnded || res === undefined) {
                    if (self.mVideoSuccessCallback) {
                        self.mVideoSuccessCallback({ "videoInfo": null, "showTime": null });
                        self.mVideoSuccessCallback = null;
                    }
                }
                else {
                    if (self.mVideoCancelCallback) {
                        self.mVideoCancelCallback({ "videoInfo": null, "showTime": null });
                        self.mVideoCancelCallback = null;
                    }
                }
            });
            videoAd.onLoad(() => {
            });
            this.mVideoMap[adUnitId] = videoAd;
            return videoAd;
        }
        eventToGame() {
            AudioManager.playBgm();
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel) {
            var unitId;
            var self = this;
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.1.0") == false) {
                return;
            }
            if (!this.mVideoAdShowing) {
                this.mVideoAdShowing = true;
                this.mVideoSuccessCallback = onSuccess;
                this.mVideoCancelCallback = onCancel;
                this.mVideoErrorCallback = onError;
                if (this.mVideoIdArr.length == 0) {
                    this.mVideoAdShowing = false;
                    if (onError) {
                        onError();
                    }
                    return;
                }
                else {
                    var random = Math.floor(Math.random() * this.mVideoIdArr.length);
                    unitId = this.mVideoIdArr[random];
                }
                let videoAd = this.mVideoMap[unitId];
                if (!videoAd) {
                    if (adUnitId) {
                        this.isForceVideo = true;
                    }
                    videoAd = this.createRewardedVideoAd(unitId, onSuccess, onCancel, onError);
                }
                if (videoAd) {
                    videoAd.show().then(() => {
                    }).catch(err => {
                        videoAd.load().then(() => {
                            videoAd.show().then(() => {
                                self.mIsShowingVideo = true;
                            });
                        });
                    });
                }
            }
        }
        isShowingRewardedVideoAd() {
            return this.mIsShowingVideo;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
            var self = this;
            var shareArr = this.mJjSdk.getShareArr();
            var shareNormalArr = this.mJjSdk.getShareNormalArr();
            let obj = {};
            if (!Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.11.3") || Laya.Browser.onIOS) {
                console.log("sdkVersion is too low for ShareTimeline");
            }
            else {
                obj.menus = ['shareAppMessage', 'shareTimeline'];
            }
            console.log("是否ios", Laya.Browser.onIOS);
            this.wx.showShareMenu(obj);
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            if (!shareInfo) {
                shareInfo = { id: 0, title: null, pic: null };
            }
            let openId = userInfo ? userInfo.openId : "9527";
            var uid = userInfo ? userInfo.uid : "9527";
            let queryContent = "materialID=" + shareInfo.id + "&openId=" + openId
                + "&JJshareId=" + shareInfo.id + "&inviteUid=" + uid;
            this.wx.onShareAppMessage(function (res) {
                return {
                    title: shareInfo.title,
                    query: queryContent,
                    imageUrl: shareInfo.pic
                };
            });
            if (!Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.11.3") || Laya.Browser.onIOS) {
                console.log("sdkVersion is too low to wx.onShareTimeline");
            }
            else {
                this.wx.onShareTimeline(() => {
                    return {
                        title: shareInfo.title,
                        query: queryContent,
                        imageUrl: shareInfo.pic
                    };
                });
            }
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
            var obj = {};
            title ? obj.title = title : "";
            imageUrl ? obj.imageUrl = imageUrl : "";
            query ? obj.query = query : "";
            imageUrlId ? obj.imageUrlId = imageUrlId : "";
            this.wx.onShareAppMessage(() => {
                return obj;
            });
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
            UserGD.shareType = query.replace("ac=", "");
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            if (!shareInfo) {
                shareInfo = { id: 0, title: null, pic: null };
            }
            var qType = query ? query : "";
            let openId = userInfo ? userInfo.openId : "9527";
            var uid = userInfo ? userInfo.uid : "9527";
            let queryContent = "queryType=" + qType + "&JJshareId=" + shareInfo.id + "&inviteUid=" + uid;
            this.showLoading("加载中...");
            this.mJjSdk.shareAppMessage(shareInfo);
            PulCenter.saveDataByDay(UserGD.saveShareKey, Date.now());
            this.wx.shareAppMessage({
                title: shareInfo.title,
                query: queryContent,
                imageUrl: shareInfo.pic
            });
        }
        getSystemInfoSync() {
            let systemInfo = new SystemInfo();
            let info = this.wx.getSystemInfoSync();
            systemInfo.brand = info.brand;
            systemInfo.model = info.model;
            systemInfo.pixelRatio = info.pixelRatio;
            systemInfo.screenWidth = info.screenWidth;
            systemInfo.screenHeight = info.screenHeight;
            systemInfo.windowWidth = info.windowWidth;
            systemInfo.windowHeight = info.windowHeight;
            systemInfo.statusBarHeight = info.statusBarHeight;
            systemInfo.language = info.language;
            systemInfo.version = info.version;
            systemInfo.system = info.system;
            systemInfo.platform = info.platform;
            systemInfo.fontSizeSetting = info.fontSizeSetting;
            systemInfo.SDKVersion = info.SDKVersion;
            systemInfo.benchmarkLevel = info.benchmarkLevel;
            systemInfo.albumAuthorized = info.albumAuthorized;
            systemInfo.cameraAuthorized = info.cameraAuthorized;
            systemInfo.locationAuthorized = info.locationAuthorized;
            systemInfo.microphoneAuthorized = info.microphoneAuthorized;
            systemInfo.notificationAuthorized = info.notificationAuthorized;
            systemInfo.notificationAlertAuthorized = info.notificationAlertAuthorized;
            systemInfo.notificationBadgeAuthorized = info.notificationBadgeAuthorized;
            systemInfo.notificationSoundAuthorized = info.notificationSoundAuthorized;
            systemInfo.bluetoothEnabled = info.bluetoothEnabled;
            systemInfo.locationEnabled = info.locationEnabled;
            systemInfo.wifiEnabled = info.wifiEnabled;
            systemInfo.safeArea = info.safeArea;
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
            let self = this;
            console.log("------create Banner-----: ", adUnitId);
            if (adUnitId && adUnitId != "") {
                if (this.mBannerMap[adUnitId]) {
                    return;
                }
                let sys = this.wx.getSystemInfoSync();
                let screenWidth = sys.screenWidth;
                let screenHeight = sys.screenHeight;
                var top = screenHeight;
                var bannerAd = this.wx.createBannerAd({
                    adUnitId: adUnitId,
                    style: {
                        left: 0,
                        top: 0,
                        width: 300,
                    }
                });
                if (bannerAd) {
                    bannerAd.onLoad((callback) => {
                        if (callback == undefined || callback == null) {
                            var realWidth = bannerAd.style.realWidth;
                            var realHeight = bannerAd.style.realHeight;
                            var newHeight = screenWidth / realWidth * realHeight;
                            var maxBottom = 250 * Laya.Browser.clientHeight / 1334 - 2;
                            if (newHeight > maxBottom) {
                                bannerAd.style.top = top - maxBottom;
                                var newWidth = realWidth / realHeight * maxBottom;
                                bannerAd.style.width = newWidth;
                                bannerAd.style.left = (screenWidth - newWidth) / 2;
                            }
                            else {
                                bannerAd.style.width = screenWidth;
                                bannerAd.style.top = top - maxBottom;
                            }
                            self.mBannerMap[bannerAd.adUnitId] = bannerAd;
                        }
                    });
                    bannerAd.onError(function (data) {
                        if (data.errCode == 1004 && (--self.bannerPullChance > 0)) {
                            console.log("1004情况出现，banner加载暂停");
                            Laya.timer.clear(self, self.loopCreateBanner);
                            Laya.timer.once(10000, self, () => {
                                console.log("延迟加载banner开始");
                                self.currentCreateBannerIndex = 1;
                                self.createBannerAd(self.mBannerIdArr[0]);
                                Laya.timer.loop(UserGD.bannerConfig[1] * 1000, self, self.loopCreateBanner);
                            });
                        }
                    });
                }
            }
        }
        showBanner(isForClick, isCreateNew) {
            if (isForClick) {
                this.showBannerForClick();
            }
            else {
                this.showBannerNormal();
            }
        }
        showBannerNormal() {
            this.mIsShowBanner = true;
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.0.4")) {
                let length = Object.keys(this.mBannerMap).length;
                if (length > 0) {
                    for (let wxId in this.mBannerMap) {
                        this.mBannerMap[wxId].hide();
                    }
                    var index = 0;
                    for (var wxId in this.mBannerMap) {
                        if (index == this.currentBannerIndex) {
                            this.mBannerMap[wxId].show();
                            this.mBannerAdShowing = true;
                            this.mBannerShowTime = new Date().getTime();
                            console.log("currentBanerIndex: --> ", this.currentBannerIndex);
                            console.log("Banner.adUnitId: --> ", this.mBannerMap[wxId].adUnitId);
                            break;
                        }
                        index++;
                    }
                    ++this.currentBannerIndex;
                    this.currentBannerIndex = this.currentBannerIndex % length;
                }
                else {
                    console.log("Banner is NULL");
                }
            }
            else {
                console.log("Banner is NULL");
            }
        }
        showBannerForClick() {
            this.mIsShowBanner = true;
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.0.4")) {
                let length = Object.keys(this.mBannerMap).length;
                if (length > 0) {
                    for (var wxId in this.mBannerMap) {
                        this.mBannerMap[wxId].hide();
                    }
                    let index = 0;
                    if (this.isFirstTimeForClick) {
                        this.isFirstTimeForClick = false;
                        this.currentBanerIndexForClick = Math.floor(Math.random() * length);
                    }
                    for (var wxId in this.mBannerMap) {
                        if (index == this.currentBanerIndexForClick) {
                            this.mBannerMap[wxId].show();
                            this.mBannerAdShowing = true;
                            this.mBannerShowTime = new Date().getTime();
                            console.log("WrongClick currentBanerIndex: --> ", this.currentBanerIndexForClick);
                            console.log("WrongClick Banner.adUnitId: --> ", this.mBannerMap[wxId].adUnitId);
                            break;
                        }
                        index++;
                    }
                    (--this.currentBanerIndexForClick < 0) ? (this.currentBanerIndexForClick = length - 1) : 0;
                }
                else {
                    console.log("Banner is NULL");
                }
            }
            else {
                console.log("Banner is NULL");
            }
        }
        hideBanner(adUnitId) {
            this.mIsShowBanner = false;
            for (let key in this.mBannerMap) {
                let bannerAd = this.mBannerMap[key];
                bannerAd.hide();
            }
            this.mBannerAdShowing = false;
        }
        destroyBanner(adUnitId) { }
        createInterstitialAd(adUnitId, onClose) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.6.0")) {
                if (this.mInterstitialAdIdArr.length == 0) {
                    return;
                }
                for (let i = 0; i < this.mInterstitialAdIdArr.length; i++) {
                    var adUnitIdNew = this.mInterstitialAdIdArr[i];
                    let interAd = this.wx.createInterstitialAd({
                        adUnitId: adUnitIdNew,
                    });
                    interAd.onLoad(function (callback) {
                    });
                    interAd.onError(function (data) {
                    });
                    interAd.onClose(function () {
                        if (onClose) {
                            onClose();
                        }
                    });
                    this.mInterstitialAdMap[adUnitIdNew] = interAd;
                }
                return true;
            }
            else {
                return null;
            }
        }
        showInterstitialAd(adUnitId, onCloseCallback) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.6.0")) {
                let interAd;
                let length = Object.keys(this.mInterstitialAdMap).length;
                if (this.mInterstitialAdMap && length > 0) {
                    var nowData = Date.now();
                    if ((nowData - UserGD.timeLoadedGame) < 15 * 1000 || (nowData - Utils$1.getWxInterShowTime()) < 15 * 1000) {
                        return;
                    }
                    Utils$1.setWxInterShowTime(nowData);
                    if (length == 1) {
                        this.mInterstitialAdIndex = 0;
                    }
                    else if (++this.mInterstitialAdIndex == length) {
                        this.mInterstitialAdIndex = 0;
                    }
                    for (let key in this.mInterstitialAdMap) {
                        if (key == Object.keys(this.mInterstitialAdMap)[this.mInterstitialAdIndex]) {
                            interAd = this.mInterstitialAdMap[key];
                            break;
                        }
                    }
                    if (interAd) {
                        interAd.show();
                    }
                }
            }
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
        }
        hideNativeBanner() {
        }
        navigateToMiniProgram(data, success, fail, complete, path, extraData, envVersion) {
            if (UserGD.isNavigaTing) {
                if (fail) {
                    fail();
                }
                return;
            }
            UserGD.isNavigaTing = true;
            this.mJjSdk.ClickAd(data, function () {
                UserGD.isNavigaTing = false;
                Utils$1.setNavgatedId(data.wxAppId);
                UserGD.navAdNotJumpedArray = Utils$1.getNotJumpedNavigateAd();
                if (success) {
                    success();
                }
            }, function () {
                UserGD.isNavigaTing = false;
                if (fail) {
                    fail();
                }
            });
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        recursionLoadSubpackage(index, nameArr, callback) {
            var self = this;
            console.log("加载第" + index + "个分包");
            if (index == nameArr.length) {
                callback();
            }
            else {
                this.wx.loadSubpackage({
                    name: nameArr[index],
                    success: function (res) {
                        console.log("分包加载成功");
                        self.recursionLoadSubpackage(++index, nameArr, callback);
                    },
                    fail: function (res) {
                        callback(-1);
                    }
                });
            }
        }
        exitGame() {
            this.wx.exitMiniProgram();
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        showMoreGamesModal() {
        }
        login(params, onSuccess, onCancel, onError) {
        }
        aldSendEvent(name, keyValue) {
            if (this.wx.aldSendEvent) {
                this.wx.aldSendEvent(name, keyValue + "");
            }
        }
        getUserInfo() {
            return this.mJjSdk.getUserInfo();
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        showAppBox(onClose) {
        }
        hideAppBox() {
        }
        getCloseDelayTime() {
            return WxConfig.DELAY_SHOW_CLOSE;
        }
        showFloatView(floatView) {
            if (!this.mFloatView) {
                this.mFloatView = floatView;
            }
        }
        submitScore(score, callback) {
            this.mJjSdk.submitScore(score, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
        setHelpInfo(callback) {
            if (this.mJjSdk.getUserInfo()) {
                this.mJjSdk.getHelpInfo("help", 10, function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
            }
        }
        requestSubscribeMessage(success, fail, initiatively) {
            if (this.wx.requestSubscribeMessage) {
                var b = Laya.LocalStorage.getItem("isSubscribeMessage");
                if (b) {
                    return;
                }
                let tempIds = ["DF3ePSENdthX-sT2dH414DHhtxzhlSHSdjDK0TIHRAk"];
                this.wx.requestSubscribeMessage({
                    tmplIds: tempIds,
                    success: function (res) {
                        console.log("requestSubscribeMessage suc ", res);
                        if (res && res["DF3ePSENdthX-sT2dH414DHhtxzhlSHSdjDK0TIHRAk"] == "accept") {
                            console.log("-----------订阅请求");
                            var idstr = "";
                            for (let index = 0; index < tempIds.length; index++) {
                                const element = tempIds[index];
                                idstr += element + ",";
                            }
                            idstr = idstr.substr(0, idstr.length - 1);
                            var requestData = {
                                version: JJSdkConfig.SDK_VERSION,
                                gameId: JJSdkConfig.GAME_ID,
                                openId: UserGD.openId,
                                tempids: idstr,
                                SDKVERSION: JJSdkConfig.SDK_VERSION,
                                channelId: JJSdkConfig.UNION_CHANNEL_ID,
                            };
                            Laya.Browser.window.wx.request({
                                header: {},
                                method: "GET",
                                dataType: "",
                                responseType: "text",
                                url: "https://xyx.45app.com" + "/subscribe?port=9002",
                                data: requestData,
                                success: function (res) {
                                    console.log("---------------订阅通知成功");
                                    Laya.LocalStorage.setItem("isSubscribeMessage", "true");
                                },
                                fail: function () {
                                },
                                complete: function () {
                                }
                            });
                            if (success) {
                                success();
                            }
                        }
                        else {
                            if (fail) {
                                fail();
                            }
                        }
                    },
                    fail: function (res) {
                        console.log("requestSubscribeMessage fail----- ", res);
                        if (fail) {
                            fail();
                        }
                    },
                    complete: function () {
                    }
                });
            }
            else {
                if (fail) {
                    fail();
                }
            }
        }
        createLatticeAds(onClose) {
            if (this.mLatticeAds.length == 0) {
                return;
            }
            for (let i = 0; i < this.mLatticeAds.length; i++) {
                var adUnitIdNew = this.mLatticeAds[i];
                let interAd = this.wx.createGridAd({
                    adUnitId: adUnitIdNew,
                    adTheme: 'white',
                    gridCount: 5
                });
                var self = this;
                interAd.onLoad(function () {
                    let systemInfo = self.getSystemInfoSync();
                    let screenWidth = systemInfo.screenWidth;
                    let screenHeight = systemInfo.screenHeight;
                    let top = screenHeight;
                    let realWidth = interAd.style.realWidth;
                    let realHeight = interAd.style.realHeight;
                    let newHeight = screenWidth / realWidth * realHeight;
                    let maxBottom = 250 * Laya.Browser.clientHeight / 1334 - 2;
                    if (newHeight > maxBottom) {
                        interAd.style.top = top - maxBottom;
                        let newWidth = realWidth / realHeight * maxBottom;
                        interAd.style.width = newWidth;
                        interAd.style.left = (screenWidth - newWidth) / 2;
                    }
                    else {
                        interAd.style.width = screenWidth;
                        interAd.style.top = top - maxBottom;
                    }
                    self.mLatticeAdMap[adUnitIdNew] = interAd;
                });
                interAd.onError(function (data) {
                    console.log('LatticeAd 广告显示error', data);
                });
            }
            return true;
        }
        showLatticeAd() {
            if (this.mLatticeAdMap && Object.keys(this.mLatticeAdMap).length > 0) {
                let interAd;
                let len = Object.keys(this.mLatticeAdMap).length;
                if (len == 1) {
                    this.mLatticeAdIndex = 0;
                }
                else {
                    this.mLatticeAdIndex += 1;
                    if (this.mLatticeAdIndex > len - 1) {
                        this.mLatticeAdIndex = 0;
                    }
                }
                for (let key in this.mLatticeAdMap) {
                    if (key == Object.keys(this.mLatticeAdMap)[this.mLatticeAdIndex]) {
                        interAd = this.mLatticeAdMap[key];
                        break;
                    }
                }
                this.mIsShowLatticeAd = true;
                if (interAd) {
                    interAd.show().then(function () {
                        console.log("LatticeAd 广告显示成功");
                    }).catch(function (data) {
                        console.log("LatticeAd 广告显示失败", data);
                    });
                }
            }
        }
        hideLatticeAd() {
            let interAd;
            this.mIsShowLatticeAd = false;
            for (let key in this.mLatticeAdMap) {
                if (key == Object.keys(this.mLatticeAdMap)[this.mLatticeAdIndex]) {
                    interAd = this.mLatticeAdMap[key];
                    break;
                }
            }
            if (interAd) {
                interAd.hide();
            }
        }
        addColorSign(success, fail, complete) {
        }
        createBlockAd(adUnitId, style, size, orientation) { }
        showBlockAd(adUnitId) { }
        hideBlockAd(adUnitId) { }
        setBannerPos(pos) {
        }
        preloadNativeInnerInterstitial() {
        }
        checkInnerInterstitialNative() {
            return false;
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return false;
        }
        hideInnerInterstitialNative() {
        }
        clickNativeAd() {
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
        }
        isSupportGamesModal() {
            return false;
        }
        showGameBannerBox() {
        }
        hideGameBannerBox() {
        }
        setOnClickInnerInterstitialBtn(callback) {
        }
        setBannerHeight() {
        }
    }

    class CommonSdkUtils {
        constructor() {
            this.isShowAds = false;
        }
        login() { }
        init(params, callback) {
            UserGD.openPower = false;
            callback();
            window["isHideBanner"] = false;
            Laya.timer.loop(10000, this, function s() {
                if (Laya.Browser.onAndroid && window["isHideBanner"] == false) {
                    var Test = window['PlatformClass'].createClass("demo.MainActivity");
                    Test.callWithBack(function (n) {
                    }, "onCallFromJavascript", "banner", "banner");
                }
            });
        }
        setLoadingProgress(progress) {
        }
        loadSubpackage(nameArr, success, fail) {
            success();
        }
        vibrateShort(success, fail, complete) {
            if (Laya.Browser.onAndroid) {
                var Test = window['PlatformClass'].createClass("demo.MainActivity");
                Test.callWithBack(function (n) { }, "onCallFromJavascript", "shake", "shake");
            }
        }
        vibrateLong(success, fail, complete) {
        }
        onShow(callback) {
        }
        onHide(callback) {
        }
        showToast(title, icon, img) {
        }
        hideToast() {
        }
        showLoading(title) {
        }
        hideLoading() {
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            onTap(null);
        }
        postMessage(message) {
        }
        showModal(modalInfo) {
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel) {
            var self = this;
            if (this.isShowAds) {
                return;
            }
            this.isShowAds = true;
            setTimeout(() => {
                self.isShowAds = false;
            }, 1500);
            if (Laya.Browser.onAndroid) {
                var Test = window['PlatformClass'].createClass("demo.MainActivity");
                Test.callWithBack(function (n) {
                }, "onCallFromJavascript", "reward", "adUnitId");
                window['videoCallBack'] = onSuccess;
                window['videoCallBackFail'] = onCancel;
            }
            else {
                if (onSuccess) {
                    onSuccess();
                }
            }
        }
        isShowingRewardedVideoAd() {
            return false;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
        }
        getSystemInfoSync() {
            let systemInfo = new SystemInfo();
            systemInfo.windowHeight = Laya.stage.height;
            systemInfo.windowWidth = Laya.stage.width;
            systemInfo.screenWidth = Laya.stage.width;
            systemInfo.screenHeight = Laya.stage.height;
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
        }
        showBanner(adUnitId) {
        }
        hideBanner(adUnitId) {
        }
        destroyBanner(adUnitId) {
        }
        createInterstitialAd(adUnitId, onClose) {
            return null;
        }
        showInterstitialAd(adUnitId) {
            if (Laya.Browser.onAndroid) {
                var Test = window['PlatformClass'].createClass("demo.MainActivity");
                Test.callWithBack(function (n) {
                }, "onCallFromJavascript", "interst", "adUnitId");
            }
        }
        navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion) {
            if (success) {
                success();
            }
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
        }
        hideNativeBanner() {
        }
        exitGame() {
        }
        showAppBox(onClose) {
        }
        hideAppBox() {
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        showMoreGamesModal() {
        }
        aldSendEvent(name, keyValue) {
        }
        getUserInfo() {
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        getCloseDelayTime() {
            return 0;
        }
        requestSubscribeMessage(success, fail, initiatively) {
        }
        showLatticeAd() {
        }
        hideLatticeAd() {
        }
        addColorSign(success, fail, complete) {
        }
        createBlockAd(adUnitId, style, size, orientation) { }
        showBlockAd(adUnitId) { }
        hideBlockAd(adUnitId) { }
        setBannerPos(pos) {
        }
        preloadNativeInnerInterstitial() {
        }
        checkInnerInterstitialNative() {
            return false;
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return false;
        }
        hideInnerInterstitialNative() {
        }
        clickNativeAd() {
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
        }
        isSupportGamesModal() {
            return false;
        }
        showGameBannerBox() {
        }
        hideGameBannerBox() {
        }
        setOnClickInnerInterstitialBtn(callback) {
        }
        setBannerHeight() {
        }
    }

    var e_syyx_sdk_point_type;
    (function (e_syyx_sdk_point_type) {
        e_syyx_sdk_point_type[e_syyx_sdk_point_type["multual_push_show"] = 300] = "multual_push_show";
        e_syyx_sdk_point_type[e_syyx_sdk_point_type["multual_push_game_show"] = 302] = "multual_push_game_show";
        e_syyx_sdk_point_type[e_syyx_sdk_point_type["multual_push_game_click"] = 303] = "multual_push_game_click";
        e_syyx_sdk_point_type[e_syyx_sdk_point_type["multual_push_game_enter_game"] = 306] = "multual_push_game_enter_game";
        e_syyx_sdk_point_type[e_syyx_sdk_point_type["super_power"] = 20001] = "super_power";
    })(e_syyx_sdk_point_type || (e_syyx_sdk_point_type = {}));
    var e_super_power_event_id;
    (function (e_super_power_event_id) {
        e_super_power_event_id[e_super_power_event_id["click_enter_icon"] = 1] = "click_enter_icon";
        e_super_power_event_id[e_super_power_event_id["click_start_test_btn"] = 2] = "click_start_test_btn";
        e_super_power_event_id[e_super_power_event_id["show_icon"] = 3] = "show_icon";
        e_super_power_event_id[e_super_power_event_id["click_select_icon_btn"] = 4] = "click_select_icon_btn";
        e_super_power_event_id[e_super_power_event_id["click_left_close_btn"] = 5] = "click_left_close_btn";
        e_super_power_event_id[e_super_power_event_id["show_name"] = 6] = "show_name";
        e_super_power_event_id[e_super_power_event_id["click_select_name_btn"] = 7] = "click_select_name_btn";
        e_super_power_event_id[e_super_power_event_id["show_result_view"] = 8] = "show_result_view";
        e_super_power_event_id[e_super_power_event_id["close_result_view"] = 9] = "close_result_view";
    })(e_super_power_event_id || (e_super_power_event_id = {}));
    var e_syyx_sdk_multual_push_type;
    (function (e_syyx_sdk_multual_push_type) {
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["gif"] = 1] = "gif";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["side"] = 2] = "side";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["guess"] = 3] = "guess";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["popular"] = 4] = "popular";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["button"] = 5] = "button";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["banner_box"] = 6] = "banner_box";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["portal_box"] = 7] = "portal_box";
        e_syyx_sdk_multual_push_type[e_syyx_sdk_multual_push_type["icon"] = 8] = "icon";
    })(e_syyx_sdk_multual_push_type || (e_syyx_sdk_multual_push_type = {}));
    var e_syyx_sdk_push_ui_place;
    (function (e_syyx_sdk_push_ui_place) {
        e_syyx_sdk_push_ui_place[e_syyx_sdk_push_ui_place["main_city"] = 1] = "main_city";
        e_syyx_sdk_push_ui_place[e_syyx_sdk_push_ui_place["revive"] = 2] = "revive";
        e_syyx_sdk_push_ui_place[e_syyx_sdk_push_ui_place["success"] = 3] = "success";
        e_syyx_sdk_push_ui_place[e_syyx_sdk_push_ui_place["fail"] = 4] = "fail";
    })(e_syyx_sdk_push_ui_place || (e_syyx_sdk_push_ui_place = {}));
    var e_ad_native_type;
    (function (e_ad_native_type) {
        e_ad_native_type[e_ad_native_type["native_banner"] = 1] = "native_banner";
        e_ad_native_type[e_ad_native_type["native_inner_interstitial"] = 2] = "native_inner_interstitial";
        e_ad_native_type[e_ad_native_type["native_interstitial"] = 3] = "native_interstitial";
        e_ad_native_type[e_ad_native_type["native_icon"] = 4] = "native_icon";
    })(e_ad_native_type || (e_ad_native_type = {}));
    var e_ad_native_state;
    (function (e_ad_native_state) {
        e_ad_native_state[e_ad_native_state["none"] = 0] = "none";
        e_ad_native_state[e_ad_native_state["need_show"] = 1] = "need_show";
        e_ad_native_state[e_ad_native_state["show"] = 2] = "show";
        e_ad_native_state[e_ad_native_state["click"] = 3] = "click";
    })(e_ad_native_state || (e_ad_native_state = {}));
    var e_ad_native_click_pro_type;
    (function (e_ad_native_click_pro_type) {
        e_ad_native_click_pro_type[e_ad_native_click_pro_type["none"] = 1] = "none";
        e_ad_native_click_pro_type[e_ad_native_click_pro_type["cooling"] = 2] = "cooling";
        e_ad_native_click_pro_type[e_ad_native_click_pro_type["active"] = 3] = "active";
    })(e_ad_native_click_pro_type || (e_ad_native_click_pro_type = {}));
    var e_activity_type;
    (function (e_activity_type) {
        e_activity_type[e_activity_type["rare_treasure"] = 0] = "rare_treasure";
        e_activity_type[e_activity_type["rob_treasure"] = 1] = "rob_treasure";
        e_activity_type[e_activity_type["rob_turntable"] = 2] = "rob_turntable";
        e_activity_type[e_activity_type["common_box"] = 3] = "common_box";
        e_activity_type[e_activity_type["red_packet_rain"] = 4] = "red_packet_rain";
    })(e_activity_type || (e_activity_type = {}));
    var e_active_type;
    (function (e_active_type) {
        e_active_type[e_active_type["level"] = 1] = "level";
        e_active_type[e_active_type["chapter"] = 2] = "chapter";
    })(e_active_type || (e_active_type = {}));
    var e_item_type;
    (function (e_item_type) {
        e_item_type[e_item_type["none"] = 0] = "none";
        e_item_type[e_item_type["gold"] = 1] = "gold";
        e_item_type[e_item_type["diamond"] = 2] = "diamond";
        e_item_type[e_item_type["skin"] = 3] = "skin";
        e_item_type[e_item_type["equip"] = 4] = "equip";
    })(e_item_type || (e_item_type = {}));
    var e_activity_rare_state;
    (function (e_activity_rare_state) {
        e_activity_rare_state[e_activity_rare_state["no_active"] = 0] = "no_active";
        e_activity_rare_state[e_activity_rare_state["active"] = 1] = "active";
        e_activity_rare_state[e_activity_rare_state["wait_forging"] = 2] = "wait_forging";
        e_activity_rare_state[e_activity_rare_state["forging"] = 3] = "forging";
        e_activity_rare_state[e_activity_rare_state["available"] = 4] = "available";
        e_activity_rare_state[e_activity_rare_state["end"] = 5] = "end";
    })(e_activity_rare_state || (e_activity_rare_state = {}));
    var e_rare_skeleton_action;
    (function (e_rare_skeleton_action) {
        e_rare_skeleton_action["wait_forging"] = "idle_01";
        e_rare_skeleton_action["forging"] = "idle_02";
        e_rare_skeleton_action["wait_customized"] = "idle_03";
        e_rare_skeleton_action["customized"] = "idle_04";
    })(e_rare_skeleton_action || (e_rare_skeleton_action = {}));
    var e_activity_rob_state;
    (function (e_activity_rob_state) {
        e_activity_rob_state[e_activity_rob_state["no_active"] = 0] = "no_active";
        e_activity_rob_state[e_activity_rob_state["active"] = 1] = "active";
        e_activity_rob_state[e_activity_rob_state["end"] = 5] = "end";
    })(e_activity_rob_state || (e_activity_rob_state = {}));
    var e_rob_grid_reward_state;
    (function (e_rob_grid_reward_state) {
        e_rob_grid_reward_state[e_rob_grid_reward_state["wait_bomb"] = 0] = "wait_bomb";
        e_rob_grid_reward_state[e_rob_grid_reward_state["has_bomb"] = 1] = "has_bomb";
        e_rob_grid_reward_state[e_rob_grid_reward_state["has_get"] = 2] = "has_get";
    })(e_rob_grid_reward_state || (e_rob_grid_reward_state = {}));
    var e_rob_fragment_state;
    (function (e_rob_fragment_state) {
        e_rob_fragment_state[e_rob_fragment_state["no_inlaid"] = 0] = "no_inlaid";
        e_rob_fragment_state[e_rob_fragment_state["inlaid"] = 1] = "inlaid";
    })(e_rob_fragment_state || (e_rob_fragment_state = {}));
    var e_stat_event_type;
    (function (e_stat_event_type) {
        e_stat_event_type["hall"] = "10001";
        e_stat_event_type["chapter"] = "10002";
        e_stat_event_type["result"] = "10003";
    })(e_stat_event_type || (e_stat_event_type = {}));
    var e_stat_event_id;
    (function (e_stat_event_id) {
        e_stat_event_id["none"] = "0";
        e_stat_event_id["win_click_native_adv"] = "10001";
        e_stat_event_id["lose_click_native_adv"] = "10002";
    })(e_stat_event_id || (e_stat_event_id = {}));
    var e_chapter_result_type;
    (function (e_chapter_result_type) {
        e_chapter_result_type["enter_chapter"] = "1000000";
        e_chapter_result_type["win"] = "1000001";
        e_chapter_result_type["lose"] = "1000002";
    })(e_chapter_result_type || (e_chapter_result_type = {}));
    var e_hall_stat_type;
    (function (e_hall_stat_type) {
        e_hall_stat_type["enter_hall"] = "1";
    })(e_hall_stat_type || (e_hall_stat_type = {}));
    var e_settlement_stat_type;
    (function (e_settlement_stat_type) {
        e_settlement_stat_type["enter_settlement"] = "1";
    })(e_settlement_stat_type || (e_settlement_stat_type = {}));
    var syyx_prefab_path;
    (function (syyx_prefab_path) {
    })(syyx_prefab_path || (syyx_prefab_path = {}));
    var e_activity_event_type;
    (function (e_activity_event_type) {
        e_activity_event_type["activity"] = "20000";
    })(e_activity_event_type || (e_activity_event_type = {}));
    var e_activity_event_id;
    (function (e_activity_event_id) {
        e_activity_event_id["click_hall_enter_icon"] = "1";
        e_activity_event_id["show_enter_view"] = "2";
        e_activity_event_id["click_enter_rare"] = "3";
        e_activity_event_id["click_enter_rob"] = "4";
        e_activity_event_id["show_congratulations_init_rare"] = "5";
        e_activity_event_id["close_congratulations_rare"] = "6";
        e_activity_event_id["click_rare_start_forging"] = "7";
        e_activity_event_id["rare_forging_compelete"] = "8";
        e_activity_event_id["click_get_rare_reward"] = "9";
        e_activity_event_id["close_rare_reward_view"] = "10";
        e_activity_event_id["show_rob_view"] = "11";
        e_activity_event_id["this_time_first_bomb"] = "12";
        e_activity_event_id["this_time_resume_bomb"] = "13";
        e_activity_event_id["first_click_bag"] = "14";
        e_activity_event_id["show_congratulations_rob_reward"] = "15";
        e_activity_event_id["show_rare_view"] = "16";
        e_activity_event_id["click_red_packet_rain"] = "17";
        e_activity_event_id["show_red_packet_rain"] = "18";
        e_activity_event_id["click_first_red_packet"] = "19";
        e_activity_event_id["show_congratulations_red_packet"] = "20";
    })(e_activity_event_id || (e_activity_event_id = {}));
    var e_native_inner_button_type;
    (function (e_native_inner_button_type) {
        e_native_inner_button_type[e_native_inner_button_type["top"] = 1] = "top";
        e_native_inner_button_type[e_native_inner_button_type["bottom"] = 2] = "bottom";
    })(e_native_inner_button_type || (e_native_inner_button_type = {}));
    var e_ad_id;
    (function (e_ad_id) {
        e_ad_id["interstitial_hall"] = "10100001";
        e_ad_id["video_add_gold"] = "10200001";
        e_ad_id["video_add_diamond"] = "10200002";
        e_ad_id["video_add_bomb"] = "10200003";
        e_ad_id["video_forging"] = "10200004";
        e_ad_id["video_luck_draw"] = "10200005";
        e_ad_id["native_interstitial_hall"] = "10301001";
        e_ad_id["native_inner_interstitial_success"] = "10302001";
        e_ad_id["native_banner"] = "10304001";
        e_ad_id["native_icon"] = "10304002";
        e_ad_id["banner_hall"] = "10400001";
        e_ad_id["appbox_hall"] = "10600001";
        e_ad_id["game_banner_box"] = "10600002";
        e_ad_id["game_portal_box"] = "10600003";
        e_ad_id["bottom_block"] = "10900001";
        e_ad_id["left_block"] = "10900002";
        e_ad_id["right_block"] = "10900003";
    })(e_ad_id || (e_ad_id = {}));

    class syyx_app_info {
    }
    class syyx_more_game_app_info extends syyx_app_info {
    }
    var syyx_view;
    (function (syyx_view) {
        syyx_view[syyx_view["unit"] = 0] = "unit";
        syyx_view[syyx_view["left_more_game"] = 1] = "left_more_game";
        syyx_view[syyx_view["game_box"] = 2] = "game_box";
        syyx_view[syyx_view["guess_like"] = 3] = "guess_like";
        syyx_view[syyx_view["right_more_game"] = 4] = "right_more_game";
        syyx_view[syyx_view["unit_icon"] = 5] = "unit_icon";
        syyx_view[syyx_view["native_banner"] = 6] = "native_banner";
        syyx_view[syyx_view["inner_interstitial"] = 7] = "inner_interstitial";
        syyx_view[syyx_view["interstitial"] = 8] = "interstitial";
        syyx_view[syyx_view["native_icon"] = 9] = "native_icon";
        syyx_view[syyx_view["toast"] = 10] = "toast";
        syyx_view[syyx_view["activity_turntable"] = 11] = "activity_turntable";
        syyx_view[syyx_view["activity_get_reward"] = 12] = "activity_get_reward";
        syyx_view[syyx_view["activity_box"] = 13] = "activity_box";
        syyx_view[syyx_view["activity_icon"] = 14] = "activity_icon";
        syyx_view[syyx_view["activity_enter"] = 15] = "activity_enter";
        syyx_view[syyx_view["activity_rare"] = 16] = "activity_rare";
        syyx_view[syyx_view["activity_rob"] = 17] = "activity_rob";
        syyx_view[syyx_view["activity_bag"] = 18] = "activity_bag";
        syyx_view[syyx_view["congratulations"] = 19] = "congratulations";
        syyx_view[syyx_view["red_packet_rain_prepare"] = 20] = "red_packet_rain_prepare";
        syyx_view[syyx_view["red_packet_rain"] = 21] = "red_packet_rain";
        syyx_view[syyx_view["red_packet_rain_congratulation"] = 22] = "red_packet_rain_congratulation";
        syyx_view[syyx_view["user_protocol"] = 23] = "user_protocol";
        syyx_view[syyx_view["super_power_icon"] = 24] = "super_power_icon";
        syyx_view[syyx_view["super_power"] = 25] = "super_power";
    })(syyx_view || (syyx_view = {}));
    class syyx_size {
    }
    class syyx_cell {
    }
    class syyx_app_data_info {
    }
    class syyx_app_data {
    }
    class native_ad_data {
        constructor() {
            this.order = 0;
        }
    }
    class push_param {
    }
    class launch_options {
    }
    var ad_type;
    (function (ad_type) {
        ad_type[ad_type["multual_push"] = 1] = "multual_push";
        ad_type[ad_type["interstitial"] = 2] = "interstitial";
        ad_type[ad_type["normal"] = 3] = "normal";
    })(ad_type || (ad_type = {}));

    var init_config = {
        web: {
            app_id: 600000,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 1,
            channel_id: 0,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false
        },
        oppo_qg: {
            app_id: 600000,
            ad_app_id: 0,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 2,
            channel_id: 1,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false
        },
        vivo_qg: {
            app_id: 600000,
            ad_app_id: 0,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 4,
            channel_id: 2,
            engin_type: 1,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false,
            needAuth: false,
        },
        tt: {
            app_id: 600000,
            ad_app_id: 0,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 8,
            channel_id: 10,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false,
            needAuth: false,
        },
        qq: {
            app_id: 600000,
            ad_app_id: 0,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 5,
            channel_id: 8,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false,
            needAuth: false,
        },
        apk: {
            app_id: 600000,
            ad_app_id: 0,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 7,
            channel_id: 11,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false
        },
        wx: {
            app_id: 600000,
            ad_app_id: 0,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 5,
            channel_id: 8,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false,
            needAuth: false,
        },
        hw_qg: {
            app_id: 600000,
            ad_app_id: 103490213,
            channel_app_id: 103490213,
            app_version: "1.0.0.0",
            pkg_name: "",
            channel_type: 10,
            channel_id: 14,
            engin_type: 2,
            engin_version: "2.0.10",
            log_level: 0,
            pay_key: "",
            login_key: "",
            plat_key: "123",
            stat_key: "",
            pay_url: "",
            pay_query_url: "",
            pay_last_query_url: "",
            login_url: "",
            ws_url: "",
            ws_cert_url: "",
            stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/gameEvent",
            batch_stat_event_url: "https://tpfdata.syyx.com:35002/bigdata/record/batchGameEvent",
            configUrl: "https://tpf-common-config-api.syyx.com:37110/api/config",
            configAppSecKey: "",
            retry_connect: false,
            basic_config_version: "",
            is_login_soon: false,
            is_auto_relogin_full: false,
            has_red_envelop: false,
            has_multual_push: false,
            needAuth: false,
        },
        _debug: true,
    };
    var e_syyx_sdk_publish_type;
    (function (e_syyx_sdk_publish_type) {
        e_syyx_sdk_publish_type[e_syyx_sdk_publish_type["in"] = 1] = "in";
        e_syyx_sdk_publish_type[e_syyx_sdk_publish_type["out"] = 2] = "out";
    })(e_syyx_sdk_publish_type || (e_syyx_sdk_publish_type = {}));
    var syyx_const = {
        syyx_sdk_version: "2.0.0.16",
        syyx_sdk_publish: e_syyx_sdk_publish_type.out,
        syyx_sdk_channel: 2,
        syyx_sdk_tag: "2021_05_07_15_50",
        remote_multual_push_key: "multual_push_v3",
        remote_super_power_key: "multual_push_v4",
        local_multual_push_version: "syyx_multual_push_version",
        local_super_power_version: "local_super_power_version",
        local_super_power_data: "syyx_super_power_data",
        local_multual_push_data: "syyx_multual_push_data",
        remote_business_config_key: "business_config",
        local_business_config_version: "syyx_business_config_version",
        local_business_config_data: "syyx_business_config_data",
    };

    class syyx_sdk_utils {
        static log(...data) {
            console.log("syyx_sdk: ", JSON.stringify(data));
        }
        static error(...data) {
            if (init_config._debug)
                console.error("syyx_sdk: ", JSON.stringify(data));
        }
        static randomByWeight(gameList) {
            let totalWeight = 0;
            for (let i = gameList.length - 1; i >= 0; --i) {
                let info = gameList[i];
                totalWeight += info.weight;
            }
            let targetWeight = Math.random() * totalWeight;
            for (let i = gameList.length - 1; i >= 0; --i) {
                let info = gameList[i];
                let weight = info.weight;
                if (targetWeight <= weight) {
                    return info;
                }
                else {
                    targetWeight -= weight;
                }
            }
        }
        static get_app_info(cell, index) {
            let mode = cell.displayMode;
            let list = mode == 1 ? cell.gameList1 : cell.gameList2;
            if (mode == 1) {
                let len = list.length;
                index %= len;
                return list[index];
            }
            else {
                return this.randomByWeight(list);
            }
        }
        static clamp(a, b, target) {
            let min = a > b ? b : a;
            let max = a > b ? a : b;
            if (target > max) {
                target = max;
            }
            if (target < min) {
                target = min;
            }
            return target;
        }
        static get_random_number(list) {
            return list[0] + Math.floor(Math.random() * (list[1] - list[0]));
        }
        static random_get(arr, delete_this = false) {
            let len = arr.length;
            if (len == 0) {
                console.error("try to get a member from an empty array");
                throw new Error();
            }
            else {
                let rand = Math.floor(Math.random() * len);
                let item = arr[rand];
                delete_this && arr.splice(rand, 1);
                return item;
            }
        }
        static set_default_scale(view) {
            let ratio = this.get_screen_ratio();
            ratio *= view.scaleX;
            view.scale(ratio, ratio);
            console.log("igc-----screen_ratio", ratio);
        }
        static set_scale_with_height(view, height) {
            if (window["Laya"]) {
                let ratio = height / view.height;
                view.scale(ratio, ratio);
            }
        }
        static set_scale_with_width(view, width) {
            if (window["Laya"]) {
                let ratio = width / view.width;
                view.scale(ratio, ratio);
            }
        }
        static get_screen_ratio() {
            if (window["Laya"]) {
                if (Laya.stage.width > Laya.stage.height) {
                    return window["Laya"].stage.height / 1080;
                }
                else {
                    return window["Laya"].stage.width / 1080;
                }
            }
            return 1;
        }
        static get_largest_zorder() {
            let max = 10000001;
            return max;
        }
        static convert_view_to_push(view) {
            switch (view) {
                case syyx_view.unit:
                    return e_syyx_sdk_multual_push_type.button;
                case syyx_view.left_more_game:
                case syyx_view.right_more_game:
                    return e_syyx_sdk_multual_push_type.side;
                case syyx_view.guess_like:
                    return e_syyx_sdk_multual_push_type.guess;
                case syyx_view.game_box:
                    return e_syyx_sdk_multual_push_type.popular;
                case syyx_view.unit_icon:
                    return e_syyx_sdk_multual_push_type.icon;
            }
        }
        static get_size(view) {
            if (window["Laya"]) {
                return { width: view.width * view.scaleX, height: view.height * view.scaleY };
            }
            return {};
        }
        static get_stage() {
            if (window["Laya"]) {
                window["Laya"].stage;
            }
            else {
                return window["cc"].director.getScene().getChildByName("Canvas");
            }
        }
        static set_cp_load_function(load_function) {
            if (!this.cp_load_function) {
                this.cp_load_function = load_function;
            }
        }
        static parse_csv(data, key) {
            if (syyx_const.syyx_sdk_publish === e_syyx_sdk_publish_type.in) {
                return data;
            }
            else {
                return igc.igc_resources_utils.parse_csv(data, key);
            }
        }
        static load_resource(file_path, load_back, self = undefined, error_back) {
            if (this.cp_load_function) {
                this.cp_load_function(file_path, load_back);
                return;
            }
            window["Laya"].loader.load(file_path, window["Laya"].Handler.create(self, data => {
                if (data) {
                    load_back && load_back(data);
                }
                else {
                    console.error("igc----- syyx_sdk_utils load_resource fail", file_path);
                    error_back && error_back();
                }
            }));
        }
        static set_texture_url(icon, icon_url, call_back) {
            if (window["cc"]) {
                let url = icon_url;
                if (this.is_texture_url(icon_url)) {
                    url = icon_url;
                }
                else {
                    url = icon_url + ".jpg";
                }
                try {
                    window["cc"].loader.load(icon_url, function (err, data) {
                        if (err) {
                            console.error("igc-----load texture fail", err);
                            call_back && call_back();
                        }
                        else if (window["cc"].isValid(icon) && data) {
                            let frames = new window["cc"].SpriteFrame(data);
                            icon.spriteFrame = frames;
                        }
                    });
                }
                catch (error) {
                    call_back && call_back();
                }
            }
        }
        static is_texture_url(icon_url) {
            if (icon_url.indexOf(".bmp") != -1 ||
                icon_url.indexOf(".jpg") != -1 ||
                icon_url.indexOf(".png") != -1 ||
                icon_url.indexOf(".tif") != -1 ||
                icon_url.indexOf(".gif") != -1 ||
                icon_url.indexOf(".pcx") != -1 ||
                icon_url.indexOf(".tga") != -1 ||
                icon_url.indexOf(".exif") != -1 ||
                icon_url.indexOf(".fpx") != -1 ||
                icon_url.indexOf(".svg") != -1 ||
                icon_url.indexOf(".psd") != -1 ||
                icon_url.indexOf(".cdr") != -1 ||
                icon_url.indexOf(".pcd") != -1 ||
                icon_url.indexOf(".dxf") != -1 ||
                icon_url.indexOf(".ufo") != -1 ||
                icon_url.indexOf(".eps") != -1 ||
                icon_url.indexOf(".ai") != -1 ||
                icon_url.indexOf(".raw") != -1 ||
                icon_url.indexOf(".WMF") != -1 ||
                icon_url.indexOf(".webp") != -1 ||
                icon_url.indexOf(".avif") != -1) {
                return true;
            }
            return false;
        }
        static check_is_same_day(left_time, right_tiem) {
            let left_date = new Date(left_time);
            let right_date = new Date(right_tiem);
            if (left_date.getDay() != right_date.getDay() || left_date.getMonth() != right_date.getMonth() || left_date.getFullYear() != right_date.getFullYear()) {
                return false;
            }
            return true;
        }
        static get_date_timestamp() {
            return (new Date()).getTime();
        }
        static set_item(key, value) {
            let str = JSON.stringify(value);
            localStorage.setItem(key, str);
        }
        static get_item(key) {
            let item = localStorage.getItem(key);
            if (item != "") {
                return JSON.parse(item);
            }
            return null;
        }
        static formatTime(time) {
            if (time <= 0) {
                return "00:00:00";
            }
            var h = Math.floor(time / 3600);
            var m = Math.floor(time / 60 % 60);
            var s = Math.floor(time % 60);
            var hStr = h + "";
            var mStr = m + "";
            var sStr = s + "";
            if (h < 10) {
                hStr = "0" + h;
            }
            if (m < 10) {
                mStr = "0" + m;
            }
            if (s < 10) {
                sStr = "0" + s;
            }
            return hStr + ":" + mStr + ":" + sStr;
        }
        static formatTime_mmss(time) {
            if (time <= 0) {
                return "00:00";
            }
            var m = Math.floor(time / 60 % 60);
            var s = Math.floor(time % 60);
            var mStr = m + "";
            var sStr = s + "";
            if (m < 10) {
                mStr = "0" + m;
            }
            if (s < 10) {
                sStr = "0" + s;
            }
            return mStr + ":" + sStr;
        }
        static changeToMb(Gold, fix_num = 1) {
            if (Gold < 10000) {
                return Gold + "";
            }
            let myGold = parseInt(Gold);
            let goldStr = "";
            if (myGold < 1000) {
                goldStr = Math.floor(myGold) + "";
            }
            else if (myGold < 1000000) {
                goldStr = (myGold / 1000).toFixed(fix_num) + "k";
            }
            else if (myGold < 1000000000) {
                goldStr = (myGold / 1000000).toFixed(fix_num) + "m";
            }
            else if (myGold < 1000000000000) {
                goldStr = (myGold / 1000000000).toFixed(fix_num) + "b";
            }
            else {
                goldStr = (myGold / 1000000000000).toFixed(fix_num) + "t";
            }
            return goldStr;
        }
        static replace_data(data1, data2) {
            if (!data1 && !data2) {
                console.log("the object is wrong");
                return;
            }
            for (let idx in data2) {
                data2[idx] && data2[idx].value && (data1[idx] = data2[idx]);
                if (!data2[idx].value) {
                    console.log("igc ----- remote config " + idx + " is wrong");
                }
            }
            console.log("-------");
            console.log(data2);
        }
        static format_remote_texture_url(url) {
            if (url) {
                let jpg_index = url.indexOf(".jpg");
                let png_index = url.indexOf(".png");
                if (jpg_index != -1) {
                    return url.substring(0, jpg_index + 4);
                }
                else if (png_index != -1) {
                    return url.substring(0, png_index + 4);
                }
                else {
                    return url;
                }
            }
            return url;
        }
        static get_random_int(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        }
        static shuffle(arr) {
            let _arr = arr.slice();
            for (let i = 0; i < _arr.length; i++) {
                let j = this.get_random_int(0, i);
                let t = _arr[i];
                _arr[i] = _arr[j];
                _arr[j] = t;
            }
            return _arr;
        }
        static preload_native_texture(url) {
            let self = this;
            if (window["Laya"]) {
                window["Laya"].loader.load(url, window["Laya"].Handler.create(self, data => {
                    if (data) {
                        console.log('igc----- preload native_texture success---->', url);
                    }
                }));
            }
            else {
                let texture_type = 'jpg';
                if (url.indexOf(".png") != -1) {
                    texture_type = 'png';
                }
                if (window["cc"]["assetManager"] && window["cc"]["assetManager"].loadRemote) {
                    window["cc"]["assetManager"].loadRemote(url, function (err, data) {
                        if (data) {
                            console.log('igc----- preload native_texture success---->', url);
                        }
                    });
                }
                else {
                    window["cc"].loader.load({ url: url, type: texture_type }, function (err, data) {
                        if (data) {
                            console.log('igc----- preload native_texture success---->', url);
                        }
                    });
                }
            }
        }
    }
    syyx_sdk_utils.cp_load_function = undefined;

    class ad_banner {
        static init_first_banner_cd() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg) {
                let first_banner_cd = 0;
                this._business_config_data = syyx_manager.get_business_config();
                if (this._business_config_data && this._business_config_data["adv_banner_cd"]) {
                    first_banner_cd = this._business_config_data["adv_banner_cd"].value[0];
                    this.can_show_first = first_banner_cd <= 0;
                    console.log("igc----- the banner's cd in oppo is", first_banner_cd);
                }
                this.first_banner_timer_id && clearTimeout(this.first_banner_timer_id);
                this.first_banner_timer_id = setTimeout(() => {
                    self.can_show_first = true;
                    if (self.need_show && self._ad_param) {
                        self.show_banner(self._ad_param.ad_type, self._ad_param.ad_pos_id, self._ad_param.onLoad, self._ad_param.onShow, self._ad_param.onClose, self._ad_param.onError);
                    }
                }, first_banner_cd * 1000);
            }
        }
        static run_timer() {
            if (!this.is_run_timer) {
                this.is_run_timer = true;
                this.timer_func();
            }
        }
        static timer_func() {
            let self = this;
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["banner_cool_time"]) {
                this.auto_update_cd = this._business_config_data["banner_cool_time"].value;
            }
            this.load_native_banner();
            let cd = syyx_sdk_utils.get_random_number(this.auto_update_cd);
            console.log("igc------ next time to refresh banner is", cd);
            this.timer_id && clearTimeout(this.timer_id);
            this.timer_id = setTimeout(() => {
                self.timer_func();
            }, cd * 1000);
        }
        static show_banner(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            this.need_show = true;
            this._normal_banner_id = ad_pos_id;
            this._native_banner_id = syyx_adv_manager._adv_config_data[ad_pos_id].backup_id;
            this._ad_param = {
                ad_type: ad_type,
                ad_pos_id: ad_pos_id,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError,
            };
            if (!this.can_show_first) {
                console.log("igc----- banner is in cooling time ");
                return;
            }
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                ad_oppo_banner.show_banner(ad_type, ad_pos_id, onLoad, onShow, onClose, onError);
                return;
            }
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- ad_banner normal_banner_id no configure in adv.csv");
                return;
            }
            this.run_timer();
        }
        static check_need_show_banner() {
            return this.need_show;
        }
        static auto_show_banner() {
            if (this._ad_param && this._ad_param.ad_type && this._ad_param.ad_pos_id) {
                this.show_banner(this._ad_param.ad_type, this._ad_param.ad_pos_id, this._ad_param.onLoad, this._ad_param.onShow, this._ad_param.onClose, this._ad_param.onError);
            }
            else {
                this.show_banner(igc.e_ad_type.banner, e_ad_id.banner_hall, undefined, undefined, undefined, undefined);
            }
        }
        static hide_banner() {
            this.need_show = false;
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                ad_oppo_banner.hide_banner();
                return;
            }
            if (!this.can_show_first) {
                console.log("igc----- banner is in cooling time ");
                return;
            }
            this.is_run_timer = false;
            this.hide_normal_banner();
            this.timer_id && clearTimeout(this.timer_id);
            this.timer_id = undefined;
        }
        static load_native_banner() {
            let self = this;
            if (!this.need_show) {
                self.hide_banner();
                return;
            }
            if (!self._native_banner_id) {
                self.show_normal_banner();
                return;
            }
        }
        static report_ad_click(ad_pos_id, native_data) {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                ad_oppo_banner.report_ad_click(ad_pos_id, native_data);
                return;
            }
        }
        static report_ad_show(ad_pos_id, native_data) {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                ad_oppo_banner.report_ad_show(ad_pos_id, native_data);
                return;
            }
        }
        static get_easy_click_protect_count() {
            let protect_count = 0;
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_banner_click_protect"]) {
                protect_count = this._business_config_data["native_banner_click_protect"].value[0];
            }
            return protect_count;
        }
        static set_banenr_protect_model() {
            this.cur_protect_count = 0;
        }
        static get_is_easy_click_model() {
            let protect_count = this.get_easy_click_protect_count();
            if (protect_count > 0) {
                if (this.cur_protect_count >= 0) {
                    this.cur_protect_count++;
                    if (this.cur_protect_count <= protect_count) {
                        return false;
                    }
                }
            }
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_banner_click_switch"]) {
                if (this._business_config_data["native_banner_click_switch"].value[0] == 1) {
                    let pro = this._business_config_data["native_banner_click_pro"].value[0];
                    return Math.random() <= pro;
                }
            }
            return false;
        }
        static set_normal_banner_switch(value) {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                ad_oppo_banner.set_normal_banner_switch(value);
            }
        }
        static show_normal_banner() {
            if (this._business_config_data && this._business_config_data["show_normal_banner_switch"]) {
                if (this._business_config_data["show_normal_banner_switch"].value[0] == 0) {
                    console.log("igc ----- normal banner switch is close");
                    return;
                }
            }
            if (!this.can_show_vivo_banner && syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                console.log("igc----- vivo ad_banner show_normal_banner create too often!!!");
                return;
            }
            let self = this;
            syyx_manager.create_ad(igc.e_ad_type.banner, self._normal_banner_id, function onLoad(param, res) {
                self._ad_param.onLoad && self._ad_param.onLoad();
            }, function onShow() {
                self.normal_banner_showing = true;
                if (self.need_show) {
                    self._ad_param.onShow && self._ad_param.onShow();
                }
                else {
                    self.hide_normal_banner();
                }
            }, function onClose(param, res) {
                self._ad_param.onClose && self._ad_param.onClose();
            }, function onError(param, err) {
                console.log("igc------syyx_adv_manager show_normal_banner onError", err);
                self._ad_param.onError && self._ad_param.onError(param, err);
            });
        }
        static hide_normal_banner() {
            let self = this;
            if (self._normal_banner_id) {
                if (self.normal_banner_showing && syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                    self.can_show_vivo_banner = false;
                    this.banner_timer_id && clearTimeout(this.banner_timer_id);
                    this.banner_timer_id = setTimeout(() => {
                        self.can_show_vivo_banner = true;
                    }, 11000);
                }
                self.normal_banner_showing = false;
                syyx_manager.destroy_ad(igc.e_ad_type.banner, self._normal_banner_id);
            }
        }
        static finger_close_banner() {
            let self = this;
            if (this.is_oppo_vivo_hw() && this._business_config_data && this._business_config_data["finger_close_banner_switch"]) {
                if (syyx_adv_manager.check_is_open_oppo_rule()) {
                    ad_oppo_banner.finger_close_banner();
                    return;
                }
                if (this._business_config_data["finger_close_banner_switch"].value[0] == 1) {
                    let cd = this._business_config_data["finger_close_banner_switch"].value[1] || 60;
                    this.hide_banner();
                    this.can_show_first = false;
                    setTimeout(function () {
                        self.can_show_first = true;
                    }, cd * 1000);
                }
            }
        }
        static is_oppo_vivo_hw() {
            return syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg || syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg || syyx_const.syyx_sdk_channel === igc.e_channel_type.web;
        }
    }
    ad_banner._business_config_data = {};
    ad_banner._native_banner_id = undefined;
    ad_banner._normal_banner_id = undefined;
    ad_banner.auto_update_cd = [20, 20];
    ad_banner.is_run_timer = false;
    ad_banner.need_show = true;
    ad_banner.can_show_first = true;
    ad_banner.first_banner_timer_id = undefined;
    ad_banner.normal_banner_showing = false;
    ad_banner.can_show_vivo_banner = true;
    ad_banner.cur_protect_count = -1;

    class ad_oppo_banner {
        static get_oppo_banner_show_update_time() {
            let play_game_time = syyx_adv_manager.get_play_game_time();
            let update_time_arr = undefined;
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["oppo_banner_cool_time"]) {
                update_time_arr = this._business_config_data["oppo_banner_cool_time"].value;
            }
            if (!update_time_arr || update_time_arr.length <= 0) {
                return 10;
            }
            let cd = 0;
            let last_arr = [];
            for (let i in update_time_arr) {
                last_arr = update_time_arr[i];
                if (update_time_arr[i][0] <= play_game_time && update_time_arr[i][1] >= play_game_time) {
                    cd = update_time_arr[i][2];
                    break;
                }
            }
            return cd || last_arr[2];
        }
        static run_timer() {
            let self = this;
            if (!this.is_run_timer) {
                this.is_run_timer = true;
                this._business_config_data = syyx_manager.get_business_config();
                self.load_native_banner();
                setInterval(() => {
                    if (self.banner_showing) {
                        self.banner_show_time++;
                    }
                    if (self.banner_show_time > 0 && self.banner_show_time % self.update_cd == 0) {
                        console.log("igc----- update_native_banner");
                        self.load_native_banner();
                    }
                }, 1000);
            }
            else {
                if (this._cur_native_data && !this.need_load) {
                    this.show_native_banner_ui();
                }
                else {
                    this.load_native_banner();
                }
            }
        }
        static set_banner_height() {
            if (this.is_oppo_vivo()) {
                syyx_manager.load_view(syyx_view.native_banner, function (view) {
                    view && view.set_banner_height && view.set_banner_height(false);
                });
            }
        }
        static check_need_strong_load_native_banner() {
            let strong_switch = false;
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["banner_strong_update_switch"]) {
                strong_switch = this._business_config_data["banner_strong_update_switch"].value[0] == 1;
            }
            return strong_switch;
        }
        static show_banner(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            if (!this.need_show) {
                this.check_need_strong_load_native_banner() && (this.need_load = true);
                this.need_show = true;
            }
            this._normal_banner_id = ad_pos_id;
            this._native_banner_id = syyx_adv_manager._adv_config_data[ad_pos_id].backup_id;
            this._ad_param = {
                ad_type: ad_type,
                ad_pos_id: ad_pos_id,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError,
            };
            if (!ad_banner.can_show_first) {
                console.log("igc----- banner is in cooling time ");
                return;
            }
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- ad_oppo_banner normal_banner_id no configure in adv.csv");
                return;
            }
            this.run_timer();
        }
        static hide_banner() {
            this.need_show = false;
            this.banner_showing = false;
            if (!ad_banner.can_show_first) {
                console.log("igc----- banner is in cooling time ");
                return;
            }
            this.hide_native_banner_ui();
            this.hide_normal_banner();
        }
        static load_native_banner() {
            let self = this;
            this.need_load = false;
            this.banner_timer_id && clearTimeout(this.banner_timer_id);
            this.update_cd = this.get_oppo_banner_show_update_time();
            this.hide_native_banner_ui();
            if (!this.need_show) {
                self.hide_banner();
                return;
            }
            this.update_cur_native_data(this._last_ad_id);
            if (syyx_adv_manager.check_is_click_limit(e_ad_native_type.native_banner)) {
                if (this._cur_native_data) {
                    self.show_native_banner_ui();
                }
                else {
                    self.set_show_error_model();
                }
                return;
            }
            if (syyx_adv_manager.check_is_show_count_limit()) {
                console.log("igc----- ad_oppo_banner show native is show limit !!!");
                if (this._cur_native_data) {
                    self.show_native_banner_ui();
                }
                else {
                    self.set_show_error_model();
                }
                return;
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                let data = new native_ad_data();
                data.id = igc.utils_manager.get_random_name();
                data.adPosId = self._native_banner_id;
                data.adId = "1";
                data.adUnitId = syyx_sdk_utils.get_random_number([0, 100000]);
                data.imgUrlList = "https://h5-lg.syyx.com/coolbattle/share/share_img.jpg";
                data.title = "banner测试标题" + syyx_sdk_utils.get_random_number([0, 100]);
                data.desc = "banner测试描述" + syyx_sdk_utils.get_random_number([0, 100]);
                data.state = e_ad_native_state.need_show;
                data.native_type = e_ad_native_type.native_banner;
                this.add_native_data(data);
                console.log("igc------syyx_adv_manager-------native_banner on_load web", data);
                self.show_native_banner_ui();
                self._ad_param.onLoad && self._ad_param.onLoad();
                syyx_adv_manager.add_native_show_count();
                return;
            }
            if (!self._native_banner_id || !this.is_oppo_vivo()) {
                self.show_normal_banner();
                return;
            }
            if (this._business_config_data && this._business_config_data["native_banner_open_switch"]) {
                if (this._business_config_data["native_banner_open_switch"].value[0] == 0) {
                    self.show_normal_banner();
                    return;
                }
            }
            if (this._cur_native_data && this._cur_native_data.state == e_ad_native_state.need_show) {
                self.show_native_banner_ui();
                return;
            }
            syyx_manager.create_ad(igc.e_ad_type.native, self._native_banner_id, function on_load(param, ad_data_list) {
                console.log("igc------syyx_adv_manager-------native_banner on_load", ad_data_list);
                if (ad_data_list == undefined || !ad_data_list[0]) {
                    self.load_native_banner_error();
                }
                else {
                    let length = 0;
                    if (syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                        length = ad_data_list.length - 1;
                    }
                    let data = new native_ad_data();
                    data.id = igc.utils_manager.get_random_name();
                    data.adPosId = self._native_banner_id;
                    data.adId = syyx_adv_manager.get_channel_ad_id(self._native_banner_id);
                    data.adUnitId = ad_data_list[length].adUnitId;
                    data.imgUrlList = syyx_sdk_utils.format_remote_texture_url(ad_data_list[length].imgUrlList[0]);
                    data.title = ad_data_list[length].title;
                    data.desc = ad_data_list[length].desc;
                    data.state = e_ad_native_state.need_show;
                    data.native_type = e_ad_native_type.native_banner;
                    self.add_native_data(data);
                    self.show_native_banner_ui();
                    self._ad_param.onLoad && self._ad_param.onLoad();
                    syyx_adv_manager.add_native_show_count();
                }
            }, function on_show() {
            }, function on_close(param, res) {
            }, function on_error(param, err) {
                console.error("igc-----syyx_adv_manager-------native_banner onError", err);
                self.load_native_banner_error();
            });
        }
        static report_ad_click(ad_pos_id, native_data) {
            if (this._native_banner_id != ad_pos_id) {
                return;
            }
            if (this._business_config_data && this._business_config_data["native_banner_report_click_update_switch"]) {
                if (this._business_config_data["native_banner_report_click_update_switch"].value[0] == 1) {
                    this.need_show = true;
                    this.load_native_banner();
                }
            }
        }
        static report_ad_show(ad_pos_id, native_data) {
            if (!this._native_banner_id) {
                this._native_banner_id = e_ad_id.native_banner;
            }
            if (this._native_banner_id == ad_pos_id) {
                this._last_ad_id = native_data.id;
            }
        }
        static show_native_banner_ui() {
            let self = this;
            this.hide_normal_banner();
            if (this.need_show) {
                syyx_manager.create_native_banner(function (view) {
                    if (self._cur_native_data) {
                        self.banner_showing = true;
                        self._ad_param.onShow && self._ad_param.onShow();
                        view.show && view.show(self._cur_native_data);
                    }
                });
            }
        }
        static hide_native_banner_ui() {
            if (this.is_oppo_vivo()) {
                syyx_manager.load_view(syyx_view.native_banner, function (view) {
                    view && view.hide && view.hide();
                });
            }
        }
        static load_native_banner_error() {
            this.update_cur_native_data(this._last_ad_id);
            if (this._cur_native_data) {
                this.show_native_banner_ui();
            }
            else {
                this.show_normal_banner();
            }
        }
        static load_normal_banner_error() {
            this.banner_showing = false;
            if (this.need_show) {
                this.update_cur_native_data();
                if (this._cur_native_data) {
                    this.show_native_banner_ui();
                }
                else {
                    this.set_show_error_model();
                }
            }
        }
        static set_normal_banner_switch(value) {
            this.normal_banner_switch = value;
            if (!value) {
                this.hide_normal_banner();
            }
        }
        static show_normal_banner() {
            if (this._business_config_data && this._business_config_data["show_normal_banner_switch"]) {
                if (this._business_config_data["show_normal_banner_switch"].value[0] == 0) {
                    console.log("igc ----- normal banner switch is close");
                    return;
                }
            }
            if (!this.normal_banner_switch) {
                console.log("igc----- vivo ad_banner show_normal_banner normal_banner_switch is close!!!");
                this.load_normal_banner_error();
                return;
            }
            let self = this;
            if (!this.can_show_vivo_banner && syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                console.log("igc----- vivo ad_banner show_normal_banner create too often!!!");
                console.log("igc----- vivo ad_banner show_normal_banner so that use old native banner data!!!");
                this.load_normal_banner_error();
                return;
            }
            syyx_manager.create_ad(igc.e_ad_type.banner, self._normal_banner_id, function onLoad(param, res) {
                self._ad_param.onLoad && self._ad_param.onLoad();
            }, function onShow() {
                self.normal_banner_showing = true;
                console.log("igc----- show_normal_banner success");
                self.hide_native_banner_ui();
                self.banner_showing = self.need_show;
                if (self.need_show) {
                    self._ad_param.onShow && self._ad_param.onShow();
                    syyx_adv_manager.add_native_show_count();
                }
                else {
                    self.hide_normal_banner();
                }
            }, function onClose(param, res) {
                self._ad_param.onClose && self._ad_param.onClose();
            }, function onError(param, err) {
                console.error("igc------syyx_adv_manager show_normal_banner onError", err);
                self._ad_param.onError && self._ad_param.onError(param, err);
                self.load_normal_banner_error();
            });
        }
        static set_show_error_model() {
            let self = this;
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                this.banner_timer_id && clearTimeout(this.banner_timer_id);
                this.banner_timer_id = setTimeout(function () {
                    self.update_cur_native_data();
                    if (self.need_show && !self._cur_native_data) {
                        self.load_native_banner();
                    }
                }, this.update_cd * 1000);
            }
        }
        static hide_normal_banner() {
            let self = this;
            if (self._normal_banner_id) {
                if (self.normal_banner_showing && syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                    self.can_show_vivo_banner = false;
                    this.normal_banner_timer_id && clearTimeout(this.normal_banner_timer_id);
                    this.normal_banner_timer_id = setTimeout(() => {
                        self.can_show_vivo_banner = true;
                    }, 11000);
                }
                self.normal_banner_showing = false;
                syyx_manager.destroy_ad(igc.e_ad_type.banner, self._normal_banner_id);
            }
        }
        static finger_close_banner() {
            if (this.is_oppo_vivo() && this._business_config_data && this._business_config_data["finger_close_banner_switch"]) {
                if (this._business_config_data["finger_close_banner_switch"].value[0] == 1) {
                    let cd = this._business_config_data["finger_close_banner_switch"].value[1] || 60;
                    this.hide_banner();
                    ad_banner.can_show_first = false;
                    setTimeout(function () {
                        ad_banner.can_show_first = true;
                    }, cd * 1000);
                }
            }
        }
        static update_cur_native_data(ignore_id = undefined) {
            this.banner_show_time = 0;
            this._cur_native_data = syyx_adv_manager.get_native_data(ignore_id);
        }
        static add_native_data(native_data) {
            syyx_adv_manager.add_native_data(native_data);
            this.update_cur_native_data(this._last_ad_id);
        }
        static is_oppo_vivo() {
            return syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg || syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg || syyx_const.syyx_sdk_channel === igc.e_channel_type.web;
        }
    }
    ad_oppo_banner._last_ad_id = undefined;
    ad_oppo_banner._business_config_data = {};
    ad_oppo_banner._native_banner_id = undefined;
    ad_oppo_banner._normal_banner_id = undefined;
    ad_oppo_banner.update_cd = 5;
    ad_oppo_banner.is_run_timer = false;
    ad_oppo_banner.need_show = true;
    ad_oppo_banner.banner_showing = false;
    ad_oppo_banner.banner_show_time = 0;
    ad_oppo_banner._cur_native_data = undefined;
    ad_oppo_banner.normal_banner_showing = false;
    ad_oppo_banner.can_show_vivo_banner = true;
    ad_oppo_banner.normal_banner_switch = true;
    ad_oppo_banner.need_load = false;

    class ad_native_interstitial {
        static check_is_click_wrap() {
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_interstitial_click_wrap"]) {
                let rule = syyx_sdk_api.get_business_data_by_key('native_interstitial_click_wrap');
                if (rule) {
                    if (this.next_click_wrap_count == -1) {
                        this.next_click_wrap_count = rule[0];
                    }
                    if (this.show_count == this.next_click_wrap_count) {
                        console.log("igc----- native_interstitial is easy click!");
                        this.next_click_wrap_count += rule[1] + Math.floor(Math.random() * (rule[2] - rule[1] + 1));
                        console.log("igc----- native_interstitial next easy click count：", this.next_click_wrap_count);
                        return true;
                    }
                }
                else {
                    return false;
                }
            }
            return false;
        }
        static report_ad_click(ad_pos_id, native_data) {
            if (!this._ad_pos_id) {
                console.log("igc----- ad_native_interstitial  report_ad_click this.ad_pos_id is null!!");
                this._ad_pos_id = e_ad_id.native_interstitial_hall;
            }
            if (this._ad_pos_id != ad_pos_id) {
                return;
            }
            this.hide_native_interstitial_ui();
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_interstitial_report_click_update_switch"]) {
                if (this._business_config_data["native_interstitial_report_click_update_switch"].value[0] == 1) {
                    this.load_native_interstitial(this._ad_param.ad_type, this._ad_param.ad_pos_id, this._ad_param.onLoad, this._ad_param.onShow, this._ad_param.onClose, this._ad_param.onError);
                }
            }
        }
        static report_ad_show(ad_pos_id, native_data) {
            if (!this._ad_pos_id) {
                console.log("igc----- ad_native_interstitial  report_ad_click this.ad_pos_id is null!!");
                this._ad_pos_id = e_ad_id.native_interstitial_hall;
            }
            if (this._ad_pos_id == ad_pos_id) {
                this._last_ad_id = native_data.id;
                ad_banner.hide_banner();
            }
        }
        static check_can_load_native_interstitial() {
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["load_native_interstitial_rule"]) {
                if ((this.show_count + 1) % this._business_config_data["load_native_interstitial_rule"].value[0] == 0) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        }
        static load_native_interstitial(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            let self = this;
            if (!ad_banner.can_show_first) {
                console.log("igc----- is in oppo first ad cd");
                return;
            }
            if (syyx_adv_manager.check_is_click_limit(e_ad_native_type.native_interstitial)) {
                this.hide_native_interstitial_ui();
                return;
            }
            this._ad_pos_id = ad_pos_id;
            this._ad_param = {
                ad_type: ad_type,
                ad_pos_id: ad_pos_id,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError,
            };
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- ad_native_interstitial native_interstitial_id no configure in adv.csv");
                return;
            }
            if (!this.check_can_load_native_interstitial()) {
                console.log("igc-----syyx_adv_manager------ limit load_native_interstitial!!!");
                console.error("igc-----syyx_adv_manager-------load_native_interstitial onError");
                onError && onError();
                self.load_native_interstitial_error();
                return;
            }
            let latest_data = syyx_adv_manager.get_latest_native_data(this._native_data_list);
            if (latest_data && latest_data.state == e_ad_native_state.need_show) {
                self.show_native_interstitial_ui(latest_data);
                onLoad && onLoad({}, latest_data);
                onShow && onShow();
                return;
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                let data = new native_ad_data();
                data.id = igc.utils_manager.get_random_name();
                data.adPosId = ad_pos_id;
                data.adId = "1";
                data.adUnitId = syyx_sdk_utils.get_random_number([0, 100000]);
                data.imgUrlList = "https://h5-lg.syyx.com/coolbattle/share/share_img.jpg";
                data.title = "原生插屏标题" + syyx_sdk_utils.get_random_number([200, 300]);
                data.desc = "原生插屏描述" + syyx_sdk_utils.get_random_number([200, 300]);
                data.state = e_ad_native_state.need_show;
                data.native_type = e_ad_native_type.native_interstitial;
                this.add_native_data(data);
                this.show_native_interstitial_ui(data);
                onLoad && onLoad({}, data);
                onShow && onShow();
                return;
            }
            syyx_manager.create_ad(igc.e_ad_type.native, ad_pos_id, function on_load(param, ad_data_list) {
                console.log("igc-----syyx_adv_manager-------load_native_interstitial on_load", ad_data_list);
                if (ad_data_list == undefined || !ad_data_list[0]) {
                    onError && onError();
                }
                else {
                    let length = 0;
                    if (syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                        length = ad_data_list.length - 1;
                    }
                    let data = new native_ad_data();
                    data.id = igc.utils_manager.get_random_name();
                    data.adPosId = ad_pos_id;
                    data.adId = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
                    data.adUnitId = ad_data_list[length].adUnitId;
                    data.imgUrlList = syyx_sdk_utils.format_remote_texture_url(ad_data_list[length].imgUrlList[0]);
                    data.title = ad_data_list[length].title;
                    data.desc = ad_data_list[length].desc;
                    data.state = e_ad_native_state.need_show;
                    data.native_type = e_ad_native_type.native_interstitial;
                    self.add_native_data(data);
                    self.show_native_interstitial_ui(data);
                    onLoad && onLoad({}, data);
                    onShow && onShow();
                }
            }, function on_show() {
            }, function on_close(param, res) {
            }, function on_error(param, err) {
                onError && onError();
                console.error("igc-----syyx_adv_manager-------load_native_interstitial onError", err);
                self.load_native_interstitial_error();
            });
        }
        static load_native_interstitial_error() {
            let native_data = undefined;
            if (this.check_can_load_native_interstitial()) {
                native_data = syyx_adv_manager.get_native_data(this._last_ad_id);
            }
            else {
                native_data = this.get_native_data(this._last_ad_id, e_ad_native_type.native_interstitial);
            }
            if (native_data) {
                this.show_native_interstitial_ui(native_data);
            }
            else {
                this.show_normal_interstitial();
            }
        }
        static load_normal_interstitial_error() {
            let native_data = undefined;
            if (this.check_can_load_native_interstitial()) {
                native_data = syyx_adv_manager.get_native_data();
            }
            else {
                native_data = this.get_native_data(undefined, e_ad_native_type.native_interstitial);
            }
            if (native_data) {
                this.show_native_interstitial_ui(native_data);
            }
        }
        static show_normal_interstitial() {
            let self = this;
            this._normal_ad_pos_id = syyx_adv_manager._adv_config_data[e_ad_id.native_interstitial_hall].backup_id || undefined;
            if (syyx_const.syyx_sdk_channel == igc.e_channel_type.vivo_qg && this._normal_ad_pos_id) {
                syyx_manager.create_ad(igc.e_ad_type.interstitial, this._normal_ad_pos_id, function () {
                    ad_banner.hide_banner();
                }, function () { }, function () {
                }, function () {
                    self.load_normal_interstitial_error();
                });
            }
        }
        static show_native_interstitial_ui(native_data) {
            syyx_sdk_api.create_interstitial(function (view) {
                view.show && view.show(native_data);
            });
        }
        static hide_native_interstitial_ui() {
            syyx_sdk_api.load_view(syyx_view.interstitial, function (view) {
                view.hide && view.hide();
            });
        }
        static add_native_data(native_data) {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                syyx_adv_manager.add_native_data(native_data);
            }
            else {
                this._native_data_list[0] = native_data;
            }
        }
        static get_native_data(ignore_id = undefined, ignore_type = undefined) {
            if (!ad_banner.can_show_first) {
                console.log("igc ----- oppo's first native ad is in cd");
                return undefined;
            }
            let banner_limit = syyx_adv_manager.check_is_click_limit(e_ad_native_type.native_banner);
            let inner_limit = syyx_adv_manager.check_is_click_limit(e_ad_native_type.native_inner_interstitial);
            let interstitial_limit = syyx_adv_manager.check_is_click_limit(e_ad_native_type.native_interstitial);
            let cur_data_cache = [];
            for (let i in syyx_adv_manager._native_data_cache) {
                if (syyx_adv_manager._native_data_cache[i].id != ignore_id && syyx_adv_manager._native_data_cache[i].native_type != ignore_type) {
                    if (syyx_adv_manager._native_data_cache[i].native_type == e_ad_native_type.native_banner && !banner_limit) {
                        cur_data_cache.push(syyx_adv_manager._native_data_cache[i]);
                    }
                    else if (syyx_adv_manager._native_data_cache[i].native_type == e_ad_native_type.native_inner_interstitial && !inner_limit) {
                        cur_data_cache.push(syyx_adv_manager._native_data_cache[i]);
                    }
                    else if (syyx_adv_manager._native_data_cache[i].native_type == e_ad_native_type.native_interstitial && !interstitial_limit) {
                        cur_data_cache.push(syyx_adv_manager._native_data_cache[i]);
                    }
                }
            }
            let banner_list = [];
            let inner_list = [];
            for (let i in cur_data_cache) {
                if (cur_data_cache[i].native_type == e_ad_native_type.native_banner) {
                    banner_list.push(cur_data_cache[i]);
                }
                else if (cur_data_cache[i].native_type == e_ad_native_type.native_inner_interstitial) {
                    inner_list.push(cur_data_cache[i]);
                }
            }
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["first_use_natibe_banner"]) {
                if (this._business_config_data["first_use_natibe_banner"].value[0] == 1) {
                    if (banner_list.length > 0) {
                        return this.get_cur_data(banner_list);
                    }
                    else {
                        if (inner_list.length > 0) {
                            return this.get_cur_data(inner_list);
                        }
                    }
                }
                else {
                    if (inner_list.length > 0) {
                        return this.get_cur_data(inner_list);
                    }
                    else {
                        if (banner_list.length > 0) {
                            return this.get_cur_data(banner_list);
                        }
                    }
                }
            }
            return undefined;
        }
        static get_cur_data(cur_data_cache) {
            if (syyx_adv_manager.check_native_data_list_is_reprot(cur_data_cache)) {
                console.log("igc----- syyx_adv_manager use old load native data");
                return syyx_adv_manager.get_min_order_native_data(cur_data_cache);
            }
            else {
                console.log("igc----- syyx_adv_manager use new load native data");
                return syyx_adv_manager.get_latest_native_data(cur_data_cache);
            }
        }
    }
    ad_native_interstitial._last_ad_id = undefined;
    ad_native_interstitial._native_data_list = [];
    ad_native_interstitial._business_config_data = {};
    ad_native_interstitial.show_count = 0;
    ad_native_interstitial.next_click_wrap_count = -1;

    class ad_native_inner_interstitial {
        static report_ad_click(ad_pos_id, native_data) {
            let self = this;
            if (!this._ad_pos_id) {
                console.log("igc----- ad_native_inner_interstitial  report_ad_click this.ad_pos_id is null!!");
                this._ad_pos_id = e_ad_id.native_inner_interstitial_success;
            }
            if (this._ad_pos_id != ad_pos_id) {
                return;
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                console.log("igc ------ hw hide inner interstitial");
                syyx_manager.hide_native_inner_interstitial();
                return;
            }
            console.log("igc ----- has in inner interstitial's report click ");
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_inner_report_click_update_switch"]) {
                if (this._business_config_data["native_inner_report_click_update_switch"].value[0] == 1) {
                    this.preload_native_inner_interstitial(igc.e_ad_type.native, ad_pos_id, function onLoad(args, native_data) {
                        console.log("igc----- ad_native_inner_interstitial click update success");
                        self.update_native_inner_interstitial_ui(native_data);
                    }, function () { }, function () { }, function onError() {
                        let native_data = self.get_native_data();
                        if (native_data) {
                            self.update_native_inner_interstitial_ui(native_data);
                        }
                        else {
                            syyx_manager.hide_native_inner_interstitial();
                        }
                    });
                }
                else {
                    syyx_manager.hide_native_inner_interstitial();
                }
            }
        }
        static report_ad_show(ad_pos_id, native_data) {
            if (!this._ad_pos_id) {
                console.log("igc----- ad_native_inner_interstitial  report_ad_click this.ad_pos_id is null!!");
                this._ad_pos_id = e_ad_id.native_inner_interstitial_success;
            }
            if (this._ad_pos_id == ad_pos_id) {
                this._last_ad_id = native_data.id;
            }
        }
        static preload_native_inner_interstitial(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            let self = this;
            this._ad_pos_id = ad_pos_id;
            this._ad_param = {
                ad_type: ad_type,
                ad_pos_id: ad_pos_id,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError,
            };
            if (syyx_adv_manager.check_is_click_limit(e_ad_native_type.native_inner_interstitial)) {
                let native_banner_data = this.get_native_data();
                if (native_banner_data) {
                    onLoad && onLoad({}, native_banner_data);
                }
                else {
                    onError && onError();
                }
                return;
            }
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_inner_interstitial_switch"]) {
                if (this._business_config_data["native_inner_interstitial_switch"].value[0] == 0) {
                    console.log("igc----- ad_native_inner_interstitial native_inner_interstitial_switch is close!!!");
                    return;
                }
            }
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- ad_native_inner_interstitial normal_banner_id no configure in adv.csv");
                return;
            }
            let latest_data = syyx_adv_manager.get_latest_native_data(this._native_data_list);
            if (latest_data && latest_data.state == e_ad_native_state.need_show) {
                onLoad && onLoad({}, latest_data);
                return;
            }
            if (syyx_adv_manager.check_is_show_count_limit()) {
                console.log("igc----- ad_native_inner_interstitial preload_native_inner_interstitial is show limit!!");
                let native_data = this.get_native_data();
                if (native_data) {
                    onLoad && onLoad({}, native_data);
                }
                else {
                    syyx_manager.hide_native_inner_interstitial();
                }
                return;
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                let data = new native_ad_data();
                data.id = igc.utils_manager.get_random_name();
                data.adPosId = ad_pos_id;
                data.adId = syyx_sdk_utils.get_random_number([100, 200]) + "";
                data.adUnitId = syyx_sdk_utils.get_random_number([0, 100000]) + "";
                data.imgUrlList = "https://h5-lg.syyx.com/coolbattle/share/share_img.jpg";
                data.title = "结算原生标题" + syyx_sdk_utils.get_random_number([100, 200]);
                data.desc = "结算原生描述" + syyx_sdk_utils.get_random_number([100, 200]);
                data.state = e_ad_native_state.need_show;
                data.native_type = e_ad_native_type.native_inner_interstitial;
                this.add_native_data(data);
                onLoad && onLoad({}, data);
                syyx_adv_manager.add_native_show_count();
                this.update_native_inner_interstitial_ui(data);
                console.log("igc-----syyx_adv_manager-------load_native_inner_interstitial on_load", data);
                return;
            }
            syyx_manager.create_ad(igc.e_ad_type.native, ad_pos_id, function on_load(param, ad_data_list) {
                console.log("igc-----syyx_adv_manager-------load_native_inner_interstitial on_load", ad_data_list);
                if (ad_data_list == undefined || !ad_data_list[0]) {
                    onError && onError();
                }
                else {
                    let length = 0;
                    if (syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                        length = ad_data_list.length - 1;
                    }
                    let data = new native_ad_data();
                    data.id = igc.utils_manager.get_random_name();
                    data.adPosId = ad_pos_id;
                    data.adId = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
                    data.adUnitId = ad_data_list[length].adUnitId;
                    data.imgUrlList = syyx_sdk_utils.format_remote_texture_url(ad_data_list[length].imgUrlList[0]);
                    data.title = ad_data_list[length].title;
                    data.desc = ad_data_list[length].desc;
                    data.state = e_ad_native_state.need_show;
                    data.native_type = e_ad_native_type.native_inner_interstitial;
                    self.add_native_data(data);
                    onLoad && onLoad({}, data);
                    syyx_adv_manager.add_native_show_count();
                    syyx_sdk_utils.preload_native_texture(data.imgUrlList);
                    self.update_native_inner_interstitial_ui(data);
                }
            }, function on_show() {
            }, function on_close(param, res) {
            }, function on_error(param, err) {
                console.error("igc-----syyx_adv_manager-------load_native_inner_interstitial onError", err);
                onError && onError();
            });
        }
        static update_native_inner_interstitial_ui(native_data) {
            syyx_manager.load_view(syyx_view.inner_interstitial, function (view) {
                if (native_data) {
                    view.report_click_update_view(native_data);
                }
            });
        }
        static get_native_data_by_limit_model() {
            if (syyx_adv_manager.check_native_data_list_is_reprot(this._native_data_list)) {
                console.log("igc----- ad_native_inner_interstitial use old load native data");
                return syyx_adv_manager.get_min_order_native_data(this._native_data_list);
            }
            else {
                return syyx_adv_manager.get_latest_native_data(this._native_data_list);
            }
        }
        static get_native_data() {
            return syyx_adv_manager.get_native_data();
        }
        static add_native_data(native_data) {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                syyx_adv_manager.add_native_data(native_data);
            }
            else {
                this._native_data_list[0] = native_data;
            }
        }
        static set_on_click_inner_interstitial_btn(click_back = undefined) {
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_inner_institial_click_wrap"]) {
                let rule = this._business_config_data["native_inner_institial_click_wrap"].value;
                if (rule) {
                    if (this.next_click_wrap_count == -1) {
                        this.next_click_wrap_count = rule[0];
                    }
                    if (this.show_count >= this.next_click_wrap_count) {
                        console.log("igc----- native_inner_interstitial is easy click!");
                        this.next_click_wrap_count = this.show_count + rule[1] + Math.floor(Math.random() * (rule[2] - rule[1] + 1));
                        console.log("igc----- native_inner_interstitial next easy click count：", this.next_click_wrap_count);
                        syyx_manager.click_native_inner_interstitial(click_back);
                        return;
                    }
                }
            }
            console.log("igc----- native_inner_interstitial easy click is close!");
            click_back && click_back();
        }
    }
    ad_native_inner_interstitial._last_ad_id = undefined;
    ad_native_inner_interstitial._native_data_list = [];
    ad_native_inner_interstitial._business_config_data = {};
    ad_native_inner_interstitial.next_click_wrap_count = -1;
    ad_native_inner_interstitial.show_count = 0;

    class ad_native_icon {
        static run_timer() {
            if (!this.is_run_timer && this.is_oppo_vivo()) {
                this.is_run_timer = true;
                this.timer_func();
            }
        }
        static timer_func() {
            let self = this;
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_icon_cool_time"]) {
                this.auto_update_cd = this._business_config_data["native_icon_cool_time"].value;
            }
            this.load_native_icon();
            let cd = syyx_sdk_utils.get_random_number(this.auto_update_cd);
            console.log("igc-----syyx_ui_native_icon next time to refresh native icon is ", cd);
            this.timer_id && clearTimeout(this.timer_id);
            this.timer_id = setTimeout(() => {
                self.timer_func();
            }, cd * 1000);
        }
        static report_ad_click(ad_pos_id, native_data) {
            if (this._ad_pos_id != ad_pos_id) {
                return;
            }
            console.log("igc ----- has in native icon 's report click ");
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_icon_report_click_update_switch"]) {
                if (this._business_config_data["native_icon_report_click_update_switch"].value[0] == 1) {
                    this.destroy_timer();
                    this.icon_parent && this.show_native_icon(this.icon_parent, this._ad_param.ad_type, this._ad_param.ad_pos_id, this._ad_param.onLoad, this._ad_param.onShow, this._ad_param.onClose, this._ad_param.onError);
                }
            }
        }
        static report_ad_show(ad_pos_id, native_data) {
            if (this._ad_pos_id == ad_pos_id) {
            }
        }
        static show_native_icon(parent, ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            this._ad_pos_id = ad_pos_id;
            this._ad_param = {
                ad_type: ad_type,
                ad_pos_id: ad_pos_id,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError,
            };
            this.need_show = true;
            this.icon_parent = parent;
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- ad_block ad_native_icon no configure in adv.csv");
                return;
            }
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["native_icon_switch"]) {
                if (this._business_config_data["native_icon_switch"].value[0] == 1) {
                    this.run_timer();
                }
                else {
                    console.log("igc----- the remote switch of native icon is close");
                }
            }
        }
        static hide_native_icon() {
            this.need_show = false;
            this.icon_parent = undefined;
            this.hide_native_icon_ui();
            this.destroy_timer();
        }
        static destroy_timer() {
            this.is_run_timer = false;
            this.timer_id && clearTimeout(this.timer_id);
            this.timer_id = undefined;
        }
        static load_native_icon(call_back) {
            let self = this;
            if (!ad_banner.can_show_first) {
                console.log("igc----- is in oppo first ad cd");
                return;
            }
            if (!this.need_show) {
                this.hide_native_icon_ui();
                return;
            }
            let native_data = this.get_native_data();
            if (native_data && native_data.state == e_ad_native_state.need_show) {
                this.show_native_icon_ui();
                return;
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                let data = new native_ad_data();
                data.id = igc.utils_manager.get_random_name();
                data.adPosId = this._ad_pos_id;
                data.adId = syyx_sdk_utils.get_random_number([100, 200]);
                data.adUnitId = syyx_sdk_utils.get_random_number([0, 100000]);
                data.imgUrlList = "https://h5-lg.syyx.com/coolbattle/share/share_img.jpg";
                data.title = "原生icon标题" + syyx_sdk_utils.get_random_number([100, 200]);
                data.desc = "原生icon描述" + syyx_sdk_utils.get_random_number([100, 200]);
                data.state = e_ad_native_state.need_show;
                data.native_type = e_ad_native_type.native_icon;
                this.add_native_data(data);
                this._ad_param.onLoad && this._ad_param.onLoad({}, data);
                this.show_native_icon_ui();
                call_back && call_back();
                return;
            }
            syyx_manager.create_ad(igc.e_ad_type.native, this._ad_pos_id, function on_load(param, ad_data_list) {
                console.log("igc-----syyx_adv_manager-------load_native_icon on_load", ad_data_list);
                if (ad_data_list == undefined || !ad_data_list[0]) {
                }
                else {
                    let length = 0;
                    if (syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                        length = ad_data_list.length - 1;
                    }
                    let imgUrlList;
                    if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg) {
                        imgUrlList = syyx_sdk_utils.format_remote_texture_url(ad_data_list[length].iconUrlList[0]);
                    }
                    else {
                        imgUrlList = syyx_sdk_utils.format_remote_texture_url(ad_data_list[length].imgUrlList[0]);
                    }
                    let data = new native_ad_data();
                    data.id = igc.utils_manager.get_random_name();
                    data.adPosId = self._ad_pos_id;
                    data.adId = syyx_adv_manager.get_channel_ad_id(self._ad_pos_id);
                    data.adUnitId = ad_data_list[length].adUnitId;
                    data.imgUrlList = imgUrlList;
                    data.title = ad_data_list[length].title;
                    data.desc = ad_data_list[length].desc;
                    data.state = e_ad_native_state.need_show;
                    data.native_type = e_ad_native_type.native_icon;
                    self.add_native_data(data);
                    self._ad_param.onLoad && self._ad_param.onLoad({}, data);
                    self.show_native_icon_ui();
                }
            }, function on_show() {
            }, function on_close(param, res) {
            }, function on_error(param, err) {
                console.error("igc-----syyx_adv_manager-------load_native_icon onError", err);
                let native_data = self.get_native_data();
                if (native_data) {
                    self.show_native_icon_ui();
                }
                self._ad_param.onError && self._ad_param.onError();
            });
        }
        static show_native_icon_ui() {
            let self = this;
            self.hide_native_icon_ui();
            if (!this.need_show) {
                console.log("igc----- the current interface doesn't need to show native icon so that do not refresh native data");
                return;
            }
            if (!this.icon_parent) {
                console.log("igc----- the native icon's parent node is not exist");
                return;
            }
            if (this.is_oppo_vivo()) {
                let native_data = this.get_native_data();
                if (this.need_show && native_data) {
                    syyx_manager.create_native_icon(function (view) {
                        view.show && view.show(self.icon_parent, native_data);
                    });
                }
            }
        }
        static hide_native_icon_ui() {
            if (this.is_oppo_vivo()) {
                syyx_manager.create_native_icon(function (view) {
                    view.hide && view.hide();
                });
            }
        }
        static is_oppo_vivo() {
            let is_oppo = syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg
                || syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg
                || syyx_const.syyx_sdk_channel === igc.e_channel_type.web;
            return is_oppo;
        }
        static get_native_data() {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                if (syyx_adv_manager.check_native_data_list_is_reprot(this._native_data_list)) {
                    console.log("igc----- ad_native_icon use old load native data");
                    return syyx_adv_manager.get_min_order_native_data(this._native_data_list);
                }
                else {
                    return syyx_adv_manager.get_latest_native_data(this._native_data_list);
                }
            }
            else {
                return this._native_data_list[0];
            }
        }
        static add_native_data(native_data) {
            if (syyx_adv_manager.check_is_open_oppo_rule()) {
                for (let i in this._native_data_list) {
                    if (this._native_data_list[i].adUnitId == native_data.adUnitId) {
                        return;
                    }
                }
                let length = syyx_adv_manager.get_oppo_native_cache_max_length();
                if (this._native_data_list.length >= length) {
                    this._native_data_list.splice(0, 1);
                }
                this._native_data_list.push(native_data);
            }
            else {
                this._native_data_list[0] = native_data;
            }
        }
    }
    ad_native_icon._native_data_list = [];
    ad_native_icon._business_config_data = {};
    ad_native_icon.auto_update_cd = [20, 20];
    ad_native_icon.is_run_timer = false;
    ad_native_icon.need_show = true;

    class ad_block {
        constructor() {
            this._business_config_data = {};
            this.auto_update_cd = [20, 20];
            this.is_run_timer = false;
            this.need_show = true;
        }
        run_timer() {
            let is_qq = syyx_const.syyx_sdk_channel === igc.e_channel_type.qq
                || syyx_const.syyx_sdk_channel === igc.e_channel_type.web;
            if (!this.is_run_timer && is_qq) {
                this.is_run_timer = true;
                this.timer_func();
            }
        }
        timer_func() {
            let self = this;
            this._business_config_data = syyx_manager.get_business_config();
            if (this._business_config_data && this._business_config_data["banner_cool_time"]) {
                this.auto_update_cd = this._business_config_data["banner_cool_time"].value;
            }
            this.hide_block();
            this.need_show = true;
            this.load_block();
            if (this._ad_param && this._ad_param.style && this._ad_param.style.auto_update) {
                let cd = syyx_sdk_utils.get_random_number(this.auto_update_cd);
                console.log("igc------syyx_ui_block next time to refresh right side block's  cd", cd);
                this.timer_id && clearTimeout(this.timer_id);
                this.timer_id = setTimeout(() => {
                    self.timer_func();
                }, cd * 1000);
            }
        }
        show_block(style, ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            this._ad_pos_id = ad_pos_id;
            this._ad_param = {
                style: style,
                ad_type: ad_type,
                ad_pos_id: ad_pos_id,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError,
            };
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- ad_block native_interstitial_id no configure in adv.csv");
                return;
            }
            this.run_timer();
        }
        hide_block() {
            this.need_show = false;
            this.destroy_timer();
            syyx_manager.hide_ad(igc.e_ad_type.block, this._ad_pos_id);
        }
        destroy_timer() {
            this.is_run_timer = false;
            this.timer_id && clearTimeout(this.timer_id);
            this.timer_id = undefined;
        }
        load_block(call_back) {
            let self = this;
            if (!this.need_show) {
                this.hide_block();
                return;
            }
            let block_bottom_offset = 5;
            if (this._business_config_data && this._business_config_data["block_bottom_offset"]) {
                if (this._business_config_data["block_bottom_offset"].value[0] > 0) {
                    block_bottom_offset = this._business_config_data["block_bottom_offset"];
                }
            }
            let vertical_center_y = undefined;
            if (this._ad_param.style.vertical_center_y >= -888888) {
                vertical_center_y = this._ad_param.style.vertical_center_y;
            }
            let vertical_right = undefined;
            if (this._ad_param.style.vertical_right >= 0) {
                vertical_right = this._ad_param.style.vertical_right;
            }
            let ad_param = {
                ad_type: igc.e_ad_type.block,
                ad_id: syyx_adv_manager.get_channel_ad_id(this._ad_pos_id),
                ad_pos_id: this._ad_pos_id,
                ad_event: this._ad_pos_id,
                ad_scene: this._ad_pos_id,
                style: {
                    left: this._ad_param.style.left >= 20 ? this._ad_param.style.left : 20,
                    top: this._ad_param.style.top >= 50 ? this._ad_param.style.top : 50
                },
                vertical_center_y: vertical_center_y,
                vertical_right: vertical_right,
                bottom_offset: block_bottom_offset,
                size: this._ad_param.style.size || 5,
                orientation: this._ad_param.style.orientation || "landscape",
                onShow: function () {
                    console.error("igc-----syyx_adv_manager-------load_block onShow");
                    if (!self.need_show) {
                        self.hide_block();
                        return;
                    }
                },
                onError: function (param, err) {
                    console.error("igc-----syyx_adv_manager-------load_block onError", err);
                    self._ad_param.onError && self._ad_param.onError(param, err);
                }
            };
            igc.igc_main.instance.create_ad(ad_param);
        }
    }

    class syyx_adv_manager {
        static load_adv_config() {
            let self = this;
            if (!this.__inited) {
                this.__inited = true;
                this.login_timestamp = (new Date()).getTime();
                syyx_sdk_utils.load_resource(syyx_manager.__adv_config_file_path, function (data) {
                    if (syyx_const.syyx_sdk_publish === e_syyx_sdk_publish_type.in) {
                        self._adv_config_data = data;
                    }
                    else {
                        self._adv_config_data = syyx_sdk_utils.parse_csv(data, "id");
                    }
                    self.__adv_config_inited = true;
                    console.log("igc----- adv config has loaded", self._adv_config_data);
                    syyx_manager.pre_load_game_portal_box(e_ad_id.game_portal_box, null, null, null, null);
                    syyx_manager.preload_video();
                }, this);
                this.init_native_report_record();
            }
        }
        static set_banner_height() {
            ad_oppo_banner.set_banner_height();
        }
        static init_native_report_record() {
            this.native_report_record[e_ad_native_type.native_inner_interstitial] = {
                "start_count": 0,
                "show_count": 0,
                "click_count": 0,
            };
            this.native_report_record[e_ad_native_type.native_banner] = {
                "start_count": 0,
                "show_count": 0,
                "click_count": 0,
            };
            this.native_report_record[e_ad_native_type.native_interstitial] = {
                "start_count": 0,
                "show_count": 0,
                "click_count": 0,
            };
            this.native_report_record[e_ad_native_type.native_icon] = {
                "start_count": 0,
                "show_count": 0,
                "click_count": 0,
            };
        }
        static init_first_banner_cd() {
            ad_banner.init_first_banner_cd();
        }
        static add_native_data(native_data) {
            for (let i in this._native_data_cache) {
                if (this._native_data_cache[i].id == native_data.id) {
                    return;
                }
            }
            let length = this.get_oppo_native_cache_max_length();
            if (this._native_data_cache.length >= length) {
                this._native_data_cache.splice(0, 1);
            }
            this._native_data_cache.push(native_data);
        }
        static show_banner(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_banner.show_banner(ad_type, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_banner() {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_banner.hide_banner();
        }
        static show_native_icon(parent, ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_native_icon.show_native_icon(parent, ad_type, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_native_icon() {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_native_icon.hide_native_icon();
        }
        static show_native_interstitial(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_native_interstitial.load_native_interstitial(ad_type, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static preload_native_inner_interstitial(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_native_inner_interstitial.preload_native_inner_interstitial(ad_type, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static set_on_click_inner_interstitial_btn(click_back) {
            if (!this.__adv_config_inited) {
                return;
            }
            ad_native_inner_interstitial.set_on_click_inner_interstitial_btn(click_back);
        }
        static get_native_data(ignore_id = undefined) {
            if (!ad_banner.can_show_first) {
                console.log("igc ----- oppo's first native ad is in cd");
                return undefined;
            }
            let banner_limit = this.check_is_click_limit(e_ad_native_type.native_banner);
            let inner_limit = this.check_is_click_limit(e_ad_native_type.native_inner_interstitial);
            let interstitial_limit = this.check_is_click_limit(e_ad_native_type.native_interstitial);
            let cur_data_cache = [];
            for (let i in this._native_data_cache) {
                if (this._native_data_cache[i].id != ignore_id) {
                    if (this._native_data_cache[i].native_type == e_ad_native_type.native_banner && !banner_limit) {
                        cur_data_cache.push(this._native_data_cache[i]);
                    }
                    else if (this._native_data_cache[i].native_type == e_ad_native_type.native_inner_interstitial && !inner_limit) {
                        cur_data_cache.push(this._native_data_cache[i]);
                    }
                    else if (this._native_data_cache[i].native_type == e_ad_native_type.native_interstitial && !interstitial_limit) {
                        cur_data_cache.push(this._native_data_cache[i]);
                    }
                }
            }
            if (this.check_native_data_list_is_reprot(cur_data_cache)) {
                return this.get_min_order_native_data(cur_data_cache);
            }
            else {
                return this.get_latest_native_data(cur_data_cache);
            }
        }
        static remove_native_data(native_data) {
            for (let i in this._native_data_cache) {
                if (this._native_data_cache[i].id == native_data.id) {
                    console.log("igc----- syyx_adv_manager remove native_data:", native_data);
                    this._native_data_cache.splice(parseInt(i), 1);
                    return;
                }
            }
        }
        static get_local_native_data(ad_pos_id) {
            return this.get_native_data();
        }
        static report_ad_click(ad_pos_id, native_data) {
            let ad_id = this.get_channel_ad_id(native_data.adPosId);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- syyx_manager report_ad_click ad_id no configure in adv.csv");
                return;
            }
            if (!native_data) {
                console.log("igc----- syyx_adv_mamager report_ad_click native_data is null");
                return;
            }
            console.log("igc ----- has been in report ad click");
            if (native_data.state != e_ad_native_state.show) {
                console.log("igc----- syyx_adv_mamager report_ad_click native_data state is not e_ad_native_state.show");
                return;
            }
            let report_data = this.native_report_record[native_data.native_type];
            report_data.click_count = Math.min(++report_data.click_count, report_data.show_count);
            let ad_unit_id = native_data.adUnitId;
            let param = {
                ad_id: ad_id,
                ad_unit_id: ad_unit_id,
                ad_type: igc.e_ad_type.native,
                ad_pos_id: native_data.adPosId,
                ad_event: ad_id,
                ad_scene: ad_id,
                sub_ad_type: igc.e_ad_native_type.native_banner_dialog
            };
            igc.igc_main.instance.report_ad_click(param);
            this.remove_native_data(native_data);
            ad_banner.report_ad_click(ad_pos_id, native_data);
            ad_native_icon.report_ad_click(ad_pos_id, native_data);
            ad_native_interstitial.report_ad_click(ad_pos_id, native_data);
            ad_native_inner_interstitial.report_ad_click(ad_pos_id, native_data);
        }
        static report_ad_show(ad_pos_id, native_data) {
            let ad_id = syyx_adv_manager.get_channel_ad_id(native_data.adPosId);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- syyx_manager report_ad_show ad_id no configure in adv.csv");
                return;
            }
            if (!native_data) {
                console.log("igc----- syyx_adv_mamager report_ad_show native_data is null");
                return;
            }
            let max_order = syyx_adv_manager.get_native_data_list_max_order();
            native_data.order = max_order + 1;
            if (native_data.state == e_ad_native_state.need_show || syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                if (native_data.state == e_ad_native_state.need_show) {
                    let report_data = this.native_report_record[native_data.native_type];
                    report_data.show_count++;
                    report_data.start_count++;
                }
                let param = {
                    ad_id: ad_id,
                    ad_unit_id: native_data.adUnitId,
                    ad_type: igc.e_ad_type.native,
                    ad_pos_id: native_data.adPosId,
                    ad_event: ad_id,
                    ad_scene: ad_id,
                    sub_ad_type: igc.e_ad_native_type.native_banner_dialog
                };
                igc.igc_main.instance.report_ad_show(param);
                native_data.state = e_ad_native_state.show;
            }
            ad_banner.report_ad_show(ad_pos_id, native_data);
            ad_native_icon.report_ad_show(ad_pos_id, native_data);
            ad_native_interstitial.report_ad_show(ad_pos_id, native_data);
            ad_native_inner_interstitial.report_ad_show(ad_pos_id, native_data);
        }
        static set_normal_banner_switch(value) {
            ad_banner.set_normal_banner_switch(value);
        }
        static get_qq_banner_top_offset() {
            let business_config = syyx_manager.get_business_config();
            if (business_config && business_config["banner_top_offset"]) {
                if (business_config["banner_top_offset"].value) {
                    let offset = business_config["banner_top_offset"].value;
                    return offset[0] + Math.floor(Math.random() * (offset[1] - offset[0]));
                }
            }
            return 0;
        }
        static show_block(style, ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            if (!this._block_instance[ad_pos_id]) {
                this._block_instance[ad_pos_id] = new ad_block();
            }
            if (!this.__adv_config_inited) {
                return;
            }
            this._block_instance[ad_pos_id].show_block(style, ad_type, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_block(ad_pos_id) {
            if (!this.__adv_config_inited) {
                return;
            }
            if (this._block_instance[ad_pos_id]) {
                this._block_instance[ad_pos_id].hide_block();
            }
        }
        static hide_all_block() {
            if (!this.__adv_config_inited) {
                return;
            }
            for (let i in this._adv_config_data) {
                if (this._adv_config_data[i].adv_type == igc.e_ad_type.block) {
                    let ad_pos_id = this._adv_config_data[i].id;
                    if (this._block_instance[ad_pos_id]) {
                        this._block_instance[ad_pos_id].hide_block();
                    }
                }
            }
        }
        static check_is_open_oppo_rule() {
            let business_config = syyx_manager.get_business_config();
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg || syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg || syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                return true;
            }
            return false;
        }
        static add_native_show_count() {
            if (this.check_is_open_oppo_rule()) {
                this.cur_native_show_count++;
            }
        }
        static get_play_game_time() {
            let cur_timestamp = (new Date()).getTime();
            return (cur_timestamp - this.login_timestamp) / 1000;
        }
        static check_is_show_count_limit() {
            if (!this.check_is_open_oppo_rule()) {
                return false;
            }
            let oppo_native_show_limit = [60, 2];
            let business_config = syyx_manager.get_business_config();
            if (business_config && business_config["oppo_native_show_limit"] && business_config["oppo_native_show_limit"].value) {
                oppo_native_show_limit = business_config["oppo_native_show_limit"].value;
            }
            let play_game_time = this.get_play_game_time();
            let cur_show_limit = 2;
            if (play_game_time >= 0) {
                cur_show_limit = (Math.floor(play_game_time / oppo_native_show_limit[0]) + 1) * oppo_native_show_limit[1];
            }
            return syyx_adv_manager.cur_native_show_count >= cur_show_limit;
        }
        static get_oppo_native_cache_max_length() {
            let length = 20;
            let business_config = syyx_manager.get_business_config();
            if (business_config && business_config["oppo_native_cache_length"] && business_config["oppo_native_cache_length"].value) {
                length = business_config["oppo_native_cache_length"].value[0];
            }
            return length || 20;
        }
        static check_native_data_list_is_reprot(native_data_list) {
            if (native_data_list.length > 0) {
                for (let i in native_data_list) {
                    if (native_data_list[i].state != e_ad_native_state.show) {
                        return false;
                    }
                }
            }
            return true;
        }
        static get_latest_native_data(native_data_list) {
            for (let i in native_data_list) {
                if (native_data_list[i].state == e_ad_native_state.need_show) {
                    return native_data_list[i];
                }
            }
            if (native_data_list.length > 0) {
                return native_data_list[native_data_list.length - 1];
            }
            return undefined;
        }
        static get_native_data_list_max_order(native_data_list = undefined) {
            let list = [];
            let order = 0;
            if (native_data_list && native_data_list.length > 0) {
                list = native_data_list;
            }
            else {
                list = this._native_data_cache;
            }
            if (list.length > 0) {
                for (let i in list) {
                    if (list[i].order > order) {
                        order = list[i].order;
                    }
                }
            }
            return order || 0;
        }
        static get_min_order_native_data(native_data_list) {
            let data = undefined;
            let length = native_data_list.length;
            if (length > 0) {
                for (let i in native_data_list) {
                    if (!data || native_data_list[i].order <= data.order) {
                        data = native_data_list[i];
                    }
                }
            }
            return data;
        }
        static check_is_click_limit(native_ad_type) {
            let self = this;
            let is_limit = false;
            let report_data = this.native_report_record[native_ad_type];
            if (this.native_click_state[native_ad_type] == e_ad_native_click_pro_type.cooling) {
                return true;
            }
            let cur_click_pro = report_data.click_count / report_data.show_count;
            let start_count = 10;
            let limit_pro = 1;
            let cool_time = 60;
            let business_config = syyx_manager.get_business_config();
            if (business_config) {
                if (native_ad_type == e_ad_native_type.native_banner) {
                    start_count = business_config["native_banner_click_pro_limit"].value[0];
                    limit_pro = business_config["native_banner_click_pro_limit"].value[1];
                    cool_time = business_config["native_banner_click_pro_limit"].value[2];
                }
                else if (native_ad_type == e_ad_native_type.native_inner_interstitial) {
                    start_count = business_config["native_inner_click_pro_limit"].value[0];
                    limit_pro = business_config["native_inner_click_pro_limit"].value[1];
                    cool_time = business_config["native_inner_click_pro_limit"].value[2];
                }
                else if (native_ad_type == e_ad_native_type.native_interstitial) {
                    start_count = business_config["native_interstitial_click_pro_limit"].value[0];
                    limit_pro = business_config["native_interstitial_click_pro_limit"].value[1];
                    cool_time = business_config["native_interstitial_click_pro_limit"].value[2];
                }
                if (report_data.start_count > 0 && report_data.start_count % start_count == 0) {
                    is_limit = cur_click_pro >= limit_pro;
                }
            }
            if (!this.native_click_state[native_ad_type]) {
                this.native_click_state[native_ad_type] = e_ad_native_click_pro_type.active;
            }
            if (is_limit && this.native_click_state[native_ad_type] == e_ad_native_click_pro_type.active) {
                this.native_click_state[native_ad_type] = e_ad_native_click_pro_type.cooling;
                console.log("igc----- syyx_adv_manager run native click limit cool timer!!!", cool_time);
                setTimeout(function () {
                    self.native_click_state[native_ad_type] = e_ad_native_click_pro_type.active;
                    report_data.start_count = 0;
                }, cool_time * 1000);
            }
            return is_limit;
        }
        static get_channel_ad_id(ad_pos_id) {
            if (!this.__adv_config_inited) {
                return "";
            }
            try {
                if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg) {
                    return this._adv_config_data[ad_pos_id].oppo_adv_id;
                }
                else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                    return this._adv_config_data[ad_pos_id].vivo_adv_id;
                }
                else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.tt) {
                    return this._adv_config_data[ad_pos_id].tt_adv_id;
                }
                else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.qq) {
                    return this._adv_config_data[ad_pos_id].qq_adv_id;
                }
                else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.wx) {
                    return this._adv_config_data[ad_pos_id].wx_adv_id;
                }
                else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.apk) {
                    return this._adv_config_data[ad_pos_id].apk_adv_id;
                }
                else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                    return "web_ad_id";
                }
            }
            catch (error) {
                console.error("adv.csv do not have the ad_id of the ad_pos_id: " + ad_pos_id);
            }
        }
        static is_inited() {
            return this.__inited;
        }
    }
    syyx_adv_manager._native_data_cache = [];
    syyx_adv_manager.__adv_config_inited = false;
    syyx_adv_manager._block_instance = {};
    syyx_adv_manager.cur_native_show_count = 0;
    syyx_adv_manager.login_timestamp = 0;
    syyx_adv_manager.__inited = false;
    syyx_adv_manager.native_click_state = {};
    syyx_adv_manager.native_report_record = {};

    class syyx_rare_treasure_info {
        constructor() {
            this.item_id = -1;
            this.start_forging_time = -1;
            this.forging_time = -1;
            this.get_over_time = -1;
            this.cur_index = -1;
            this.compelete_list = [];
            this.config = undefined;
            this.state = 0;
            this.is_first = true;
        }
    }
    class syyx_rob_treasure_info {
        constructor() {
            this.open_view_num = 0;
            this.need_wait_num = 3;
            this.is_guide_inlaid = false;
            this.wait_compelete_time = -1;
            this.cur_reward_num = 0;
            this.grid_data = [];
            this.get_list = [];
            this.use_bomb_count = 0;
            this.bomb_data = [];
            this.last_timestamp = 0;
            this.state = 0;
        }
    }
    class syyx_rob_bomb_info {
        constructor() {
            this.index = 0;
            this.can_use = true;
            this.is_video = false;
            this.is_resume = false;
            this.resume_timestamp = 0;
        }
    }
    class syyx_rob_reward_item {
        constructor() {
            this.is_reward = false;
            this.is_miss_bg = false;
            this.item_id = undefined;
            this.state = 0;
            this.config = undefined;
        }
    }
    class syyx_turntable_info {
        constructor() {
            this.play_count = 0;
            this.max_today_count = 6;
            this.today_count = 0;
            this.need_count = 3;
            this.get_reward_list = [];
            this.reward_info = {};
            this.growth_coefficient = 1;
            this.need_congratulations = 1;
            this.last_timestamp = 0;
        }
    }
    class syyx_turntable_reward_info {
        constructor() {
            this.index = 1;
            this.get_count = 0;
            this.is_first = false;
            this.is_video = false;
            this.tag_icon = "";
            this.pro = 0.1;
            this.item_id = 1;
            this.item_count = 1;
            this.item_type = 1;
            this.icon = 0;
            this.item_config = {};
        }
    }
    class syyx_box_info {
        constructor() {
            this.show_count = 0;
            this.first_reward_count = 0;
            this.opened_box_num = 0;
            this.growth_coefficient = 1;
            this.free_reward_id_list = [];
            this.video_reward_id_list = [];
            this.reward_info = {};
        }
    }
    class syyx_box_reward_info {
        constructor() {
            this.get_count = 0;
            this.reward_level = 1;
            this.need_congratulations = 1;
            this.reward_list = [];
        }
    }
    class syyx_red_packet_info {
        constructor() {
            this.last_timestamp = 0;
        }
    }

    class syyx_box_manager {
        constructor() {
            this._box_info = undefined;
            this._business_config_data = undefined;
            this.free_box_list = [];
            this.last_free_box_num = 3;
            this.free_reward_id_list = [];
            this.video_reward_id_list = [];
            this.first_reward_id_list = [];
            this.first_reward_id_pos_list = [];
            this.show_num = 0;
        }
        load_activity_box_config() {
            let self = this;
            let business_config_data = syyx_manager.get_business_config();
            let is_open_box = false;
            if (business_config_data && business_config_data["open_box_activity"]) {
                is_open_box = business_config_data["open_box_activity"].value[0] == 1;
            }
            if (!is_open_box) {
                console.log("igc----- box activity is close");
                return;
            }
            this._item_config = syyx_activity_manager._common_item_config;
            syyx_sdk_utils.load_resource(syyx_manager.__activity_box_reward_config_path, function (data) {
                self._box_config = igc.igc_resources_utils.parse_csv(data, "id");
                console.log("igc-----box config is loaded ", self._box_config);
                syyx_sdk_utils.load_resource(syyx_manager.__activity_box_first_reward_config_path, function (data) {
                    self._box_first_reward_config = igc.igc_resources_utils.parse_csv(data, "id");
                    console.log("igc-----box first reward is loaded", self._box_first_reward_config);
                    self._business_config_data = syyx_manager.get_business_config();
                    self.init_activity();
                }, self);
            }, self);
        }
        check_open() {
            if (!this._item_config)
                return false;
            let business_config_data = syyx_manager.get_business_config();
            let is_open = false;
            if (business_config_data && business_config_data["open_box_activity"]) {
                is_open = business_config_data["open_box_activity"].value[0] == 1;
            }
            return is_open;
        }
        init_activity() {
            let info_list = syyx_sdk_utils.get_item("syyx_box_info");
            if (!info_list || Object.keys(info_list).length == 0) {
                this._box_info = new syyx_box_info();
                this.reset_box_info();
            }
            else {
                this._box_info = info_list;
            }
            this.init_reward_info();
            this.init_reward_id_list();
            this.save();
        }
        reset_box_info() {
            this._box_info.show_count = 0;
            this._box_info.opened_box_num = 0;
            this._box_info.growth_coefficient = 1;
            this._box_info.first_reward_count = 0;
        }
        init_free_box_list() {
            let first_reward_data = this._box_first_reward_config[this._box_info.first_reward_count + 1];
            if (first_reward_data) {
                if (first_reward_data.free_box_pos) {
                    this.free_box_list = first_reward_data.free_box_pos;
                    return;
                }
            }
            let index_list = [0, 1, 2, 3, 4, 5, 6, 7, 8];
            this.free_box_list = [];
            let index1 = index_list.splice(Math.floor(Math.random() * index_list.length), 1)[0];
            this.free_box_list.push(index1 + 1);
            let index2 = index_list.splice(Math.floor(Math.random() * index_list.length), 1)[0];
            this.free_box_list.push(index2 + 1);
            for (let i = 0; i < 7; i++) {
                let index3 = index_list.splice(Math.floor(Math.random() * index_list.length), 1)[0];
                if (Math.floor(index1 / 3) == Math.floor(index2 / 3) && Math.floor(index1 / 3) == Math.floor(index3 / 3)) {
                    continue;
                }
                if (index1 % 3 == index2 % 3 && index1 % 3 == index3 % 3) {
                    continue;
                }
                if (Math.floor(index1 / 3) != Math.floor(index2 / 3) &&
                    Math.floor(index1 / 3) != Math.floor(index3 / 3) &&
                    Math.floor(index2 / 3) != Math.floor(index3 / 3)) {
                    if (index1 % 3 != index2 % 3 &&
                        index1 % 3 != index3 % 3 &&
                        index2 % 3 != index3 % 3) {
                        continue;
                    }
                }
                this.free_box_list.push(index3 + 1);
                break;
            }
            this.last_free_box_num = this.free_box_list.length;
            this._box_info.show_count++;
            this.save();
        }
        get_free_box_list() {
            return this.free_box_list;
        }
        init_reward_info() {
            for (let idx in this._box_config) {
                if (!this._box_info.reward_info[idx]) {
                    this._box_info.reward_info[idx] = new syyx_box_reward_info();
                }
                let b_config = this._box_config[idx];
                let data = this._box_info.reward_info[idx];
                data.reward_level = b_config.reward_level;
                data.need_congratulations = b_config.need_congratulation;
            }
        }
        init_reward_id_list() {
            let data = this._box_info;
            for (let idx in this._box_config) {
                if (this._box_config[idx].free_pro && this._box_config[idx].free_pro > 0 && !this.is_up_limit(idx)) {
                    this.free_reward_id_list.push(this._box_config[idx].id);
                }
                if (this._box_config[idx].video_pro && this._box_config[idx].video_pro > 0 && !this.is_up_limit(idx)) {
                    this.video_reward_id_list.push(this._box_config[idx].id);
                }
            }
        }
        init_first_reward_id_list() {
            this.first_reward_id_list = [];
            let can_add_num;
            let first_reward_data = this._box_first_reward_config[this._box_info.first_reward_count + 1];
            if (first_reward_data) {
                for (var i = 0; i < 20; i++) {
                    let reward_id;
                    reward_id = first_reward_data["important_reward_" + i];
                    if (reward_id && !this.is_up_limit(reward_id)) {
                        !can_add_num && (can_add_num = this._box_info.reward_info[reward_id].get_count);
                        if (!this._box_config[reward_id].up_limit || can_add_num < this._box_config[reward_id].up_limit) {
                            this.first_reward_id_list.push(reward_id);
                        }
                        can_add_num++;
                    }
                }
            }
            else
                return;
            if (first_reward_data.free_box_pos && this.first_reward_id_list.length > 0) {
                this.init_first_reward_id_pos_list();
            }
            else {
                let data = this._box_info;
                data.first_reward_count++;
                this.save();
            }
        }
        init_first_reward_id_pos_list() {
            this.first_reward_id_pos_list = [];
            let poses = this.free_box_list.slice();
            if (this.first_reward_id_list.length > this.free_box_list.length) {
                return;
            }
            for (let idx in this.first_reward_id_list) {
                let pos = syyx_sdk_utils.random_get(poses, true);
                pos && this.first_reward_id_pos_list.push([this.first_reward_id_list[idx], pos]);
            }
        }
        is_up_limit(idx) {
            let data = this._box_info.reward_info[idx];
            if (!this._box_config[idx].up_limit || data.get_count < this._box_config[idx].up_limit) {
                return false;
            }
            return true;
        }
        set_growth_coefficient(value) {
            if (value > 0) {
                this._box_info.growth_coefficient = value;
                this.save();
            }
        }
        get_reward_id(list, tag) {
            let all_pro = 0;
            for (let i in list) {
                if (tag) {
                    all_pro += this._box_config[list[i]].free_pro;
                }
                else {
                    all_pro += this._box_config[list[i]].video_pro;
                }
            }
            let random_pro = all_pro * Math.random();
            let cur_pro = 0;
            for (let i in list) {
                if (tag) {
                    cur_pro += this._box_config[list[i]].free_pro;
                }
                else {
                    cur_pro += this._box_config[list[i]].video_pro;
                }
                if (random_pro <= cur_pro) {
                    return list[i];
                }
            }
            return 1;
        }
        get_reward(id) {
            let config = this._box_config[id];
            let res = [];
            for (var i = 1; i < 20; i++) {
                let reward;
                reward = config["reward_" + i];
                reward && res.push(reward);
            }
            let data = this._box_info.reward_info[id];
            data.reward_list = res;
            this.save();
            return data;
        }
        do_get_reward(index) {
            let data = this._box_info;
            let id;
            let tag;
            this.free_box_list.indexOf(index) == -1 ? (tag = false) : (tag = true);
            let first_reward_data = this._box_first_reward_config[this._box_info.first_reward_count + 1];
            if (!tag) {
                id = this.get_reward_id(this.video_reward_id_list, tag);
            }
            else {
                let list = this.first_reward_id_pos_list;
                if (this.first_reward_id_list.length > 0 && first_reward_data.free_box_pos) {
                    for (let i in list) {
                        if (index == list[i][1]) {
                            id = list[i][0];
                            let idx = this.first_reward_id_list.indexOf(id);
                            idx != null && this.first_reward_id_list.splice(idx, 1);
                            if (this.first_reward_id_list.length === 0) {
                                data.first_reward_count++;
                            }
                            continue;
                        }
                    }
                    !id && (id = this.get_reward_id(this.free_reward_id_list, tag));
                }
                else {
                    id = this.get_reward_id(this.free_reward_id_list, tag);
                }
            }
            this.do_has_get_reward(id);
            let reward = this.get_reward(id);
            this.save();
            return reward;
        }
        do_has_get_reward(idx) {
            let data = this._box_info;
            data.opened_box_num++;
            let info = data.reward_info[idx];
            info.get_count++;
            if (this._box_config[idx].is_weed_out == 1) {
                this.delete_reward_id(idx);
            }
            if (this.is_up_limit(idx)) {
                this.delete_reward_id(idx);
            }
        }
        delete_reward_id(id) {
            let f_index = this.free_reward_id_list.indexOf(id);
            let v_index = this.video_reward_id_list.indexOf(id);
            f_index != null && this.free_reward_id_list.splice(f_index, 1);
            v_index != null && this.video_reward_id_list.splice(v_index, 1);
        }
        show_congradulations(reward, call_back) {
            this.show_item_congratulations(reward);
            call_back && call_back();
        }
        show_item_congratulations(reward) {
            if (this.show_num >= reward.reward_list.length)
                return;
            let self = this;
            let config = {
                icon: this._item_config[reward.reward_list[this.show_num].item_id].skin,
                count: reward.reward_list[this.show_num].count,
                item_id: reward.reward_list[this.show_num].item_id,
                desc: this._item_config[reward.reward_list[this.show_num].item_id].desc
            };
            if (this.show_num < reward.reward_list.length) {
                syyx_activity_manager.show_get_reward(config, self.show_item_congratulations.bind(self, reward));
                self.show_num++;
            }
        }
        reset_show_num() {
            this.show_num = 0;
        }
        save() {
            syyx_sdk_utils.set_item("syyx_box_info", this._box_info);
        }
    }

    class syyx_rare_treasure_manager {
        constructor() {
            this._rare_info = undefined;
            this._init_compelete = false;
        }
        load_activity_config() {
            let self = this;
            syyx_sdk_utils.load_resource(syyx_manager.__rare_treasure_config_path, function (data) {
                self._treasure_config_data = igc.igc_resources_utils.parse_csv(data, "id");
                self.init_activity();
                self.active_activity();
                self._init_compelete = true;
                console.log("igc-----rare config is loaded", self._treasure_config_data);
            }, this);
        }
        init_activity() {
            let info_list = syyx_sdk_utils.get_item("syyx_rare_treasure_info");
            if (!info_list) {
                this._rare_info = new syyx_rare_treasure_info();
            }
            else {
                this._rare_info = info_list;
            }
            this.check_state();
            this.save();
        }
        set_next_item() {
            if (this._rare_info.state == e_activity_rare_state.active) {
                let item_num = Object.keys(this._treasure_config_data).length;
                if (!this.check_open()) {
                    return;
                }
                this._rare_info.state = e_activity_rare_state.wait_forging;
                let item_index;
                if (this._rare_info.cur_index == -1) {
                    item_index = Math.floor(Math.random() * item_num);
                    this._rare_info.cur_index = item_index;
                    this._rare_info.config = this._treasure_config_data[item_index];
                    this._rare_info.item_id = this._rare_info.config.item_id;
                }
                else {
                    for (let i = 0; i < item_num; i++) {
                        item_index = ++this._rare_info.cur_index % item_num;
                        let is_same = false;
                        for (let k in this._rare_info.compelete_list) {
                            if (this._treasure_config_data[item_index].item_id == this._rare_info.compelete_list[k]) {
                                is_same = true;
                                break;
                            }
                        }
                        if (!is_same) {
                            this._rare_info.cur_index = item_index;
                            this._rare_info.config = this._treasure_config_data[item_index];
                            this._rare_info.item_id = this._rare_info.config.item_id;
                            return;
                        }
                    }
                }
            }
        }
        start_forging_item() {
            if (!this.check_open()) {
                return;
            }
            if (this._rare_info.state == e_activity_rare_state.wait_forging) {
                syyx_activity_manager.send_activity_event(e_activity_event_id.click_rare_start_forging);
                let business_config_data = syyx_manager.get_business_config();
                let rare_treasure_forging_time = this._rare_info.config.forging_time;
                if (business_config_data && business_config_data["rare_treasure_forging_time"]) {
                    rare_treasure_forging_time = business_config_data["rare_treasure_forging_time"].value[0];
                }
                let rare_treasure_get_over_time = this._rare_info.config.get_over_time;
                if (business_config_data && business_config_data["rare_treasure_get_over_time"]) {
                    rare_treasure_get_over_time = business_config_data["rare_treasure_get_over_time"].value[0];
                }
                this._rare_info.forging_time = syyx_sdk_utils.get_date_timestamp() + rare_treasure_forging_time;
                this._rare_info.get_over_time = syyx_sdk_utils.get_date_timestamp() + rare_treasure_forging_time + rare_treasure_get_over_time;
                this._rare_info.start_forging_time = syyx_sdk_utils.get_date_timestamp();
                this.check_state();
                this.save();
            }
        }
        video_forging_item() {
            let business_config_data = syyx_manager.get_business_config();
            let rare_treasure_forging_time = this._rare_info.config.forging_time;
            if (business_config_data && business_config_data["rare_treasure_forging_time"]) {
                rare_treasure_forging_time = business_config_data["rare_treasure_forging_time"].value[0];
            }
            let rare_treasure_get_over_time = this._rare_info.config.get_over_time;
            if (business_config_data && business_config_data["rare_treasure_get_over_time"]) {
                rare_treasure_get_over_time = business_config_data["rare_treasure_get_over_time"].value[0];
            }
            this._rare_info.forging_time = syyx_sdk_utils.get_date_timestamp();
            this._rare_info.get_over_time = syyx_sdk_utils.get_date_timestamp() + rare_treasure_get_over_time;
            this.check_state();
            this.save();
        }
        get_item_reward(call_back) {
            if (!this.check_open()) {
                return;
            }
            syyx_activity_manager.send_activity_event(e_activity_event_id.click_get_rare_reward);
            this.check_state();
            if (this._rare_info.state == e_activity_rare_state.available) {
                let item_id = this._treasure_config_data[this._rare_info.cur_index].item_id;
                this._rare_info.compelete_list.push(item_id);
                let config = this._treasure_config_data[this._rare_info.cur_index];
                this.clear_timestamp();
                this.check_state();
                this.save();
                syyx_activity_manager.show_treasure_congratulations(config);
                call_back && call_back([{ item_id: config.item_id, count: config.num }]);
            }
        }
        check_state() {
            if (!this.check_open()) {
                return;
            }
            if (!this._rare_info) {
                return;
            }
            if (this._rare_info.state == e_activity_rare_state.active) {
                this.set_next_item();
                return;
            }
            if (this._rare_info.forging_time == -1 || this._rare_info.get_over_time == -1 || this._rare_info.state == e_activity_rare_state.no_active) {
                return;
            }
            let cur_timestamp = syyx_sdk_utils.get_date_timestamp();
            if (cur_timestamp <= this._rare_info.forging_time) {
                this._rare_info.state = e_activity_rare_state.forging;
            }
            else if (cur_timestamp > this._rare_info.forging_time && cur_timestamp <= this._rare_info.get_over_time) {
                if (this._rare_info.state != e_activity_rare_state.available) {
                    syyx_activity_manager.send_activity_event(e_activity_event_id.rare_forging_compelete);
                }
                this._rare_info.state = e_activity_rare_state.available;
            }
            else if (cur_timestamp > this._rare_info.get_over_time) {
                this.clear_timestamp();
                this.set_next_item();
            }
        }
        clear_timestamp() {
            this._rare_info.forging_time = -1;
            this._rare_info.get_over_time = -1;
            this._rare_info.state = e_activity_rare_state.active;
        }
        get_data() {
            this.check_state();
            return this._rare_info;
        }
        get_active_game_num() {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["active_rare_treasure_chapter"]) {
                return business_config_data["active_rare_treasure_chapter"].value[0];
            }
            return 0;
        }
        active_activity(game_num) {
            if (this._rare_info && this._rare_info.state == e_activity_rare_state.no_active) {
                if (!game_num) {
                    game_num = syyx_activity_manager._game_num;
                }
                if (game_num >= this.get_active_game_num()) {
                    this._rare_info.state = e_activity_rare_state.active;
                    this.check_state();
                    this.save();
                }
            }
        }
        check_open() {
            let item_num = Object.keys(this._treasure_config_data).length;
            if (this._rare_info.compelete_list.length == item_num) {
                this._rare_info.state = e_activity_rare_state.end;
                return false;
            }
            let business_config_data = syyx_manager.get_business_config();
            let is_open = false;
            if (business_config_data && business_config_data["open_rare_treasure"]) {
                is_open = business_config_data["open_rare_treasure"].value[0] == 1;
            }
            return is_open;
        }
        show_rare_treasure_view(call_back) {
            let self = this;
            if (!this.check_open()) {
                return;
            }
            if (this._rare_info.state == e_activity_rare_state.no_active) {
                console.log("igc-----rare activity is not available");
                return;
            }
            if (this._rare_info.is_first) {
                this._rare_info.is_first = false;
                this.save();
                let item_type = this._treasure_config_data[0].type;
                let config = {
                    skin: item_type == e_item_type.equip ? "rare_treasure/icon_xszc_ys.png" : "rare_treasure/icon_xszc_yf.png",
                    desc: item_type == e_item_type.equip ? "rare_treasure/tet_sxzb_03.png" : "rare_treasure/tet_sxzb_04.png"
                };
                syyx_activity_manager.send_activity_event(e_activity_event_id.show_congratulations_init_rare);
                syyx_activity_manager.show_treasure_congratulations(config, function () {
                    syyx_activity_manager.send_activity_event(e_activity_event_id.close_congratulations_rare);
                    self.show_rare_treasure_view(call_back);
                });
                return;
            }
            syyx_sdk_api.create_activity_rare(function (view) {
                if (!view.parent) {
                    view.show(call_back);
                }
            });
        }
        save() {
            syyx_sdk_utils.set_item("syyx_rare_treasure_info", this._rare_info);
        }
    }

    class syyx_rob_treasure_manager {
        constructor() {
            this._rob_info = undefined;
            this._init_compelete = false;
            this.eight_reward_list = [];
            this.fragment_reward_list = {};
        }
        load_activity_config() {
            let self = this;
            syyx_sdk_utils.load_resource(syyx_manager.__rob_treasure_config_path, function (data) {
                self._treasure_config_data = igc.igc_resources_utils.parse_csv(data, "id");
                console.log("igc-----rob config is loaded", self._treasure_config_data);
                syyx_sdk_utils.load_resource(syyx_manager.__rob_treasure_reward_config_path, function (data) {
                    self._treasure_reward_config_data = igc.igc_resources_utils.parse_csv(data, "id");
                    self.init_activity();
                    self.active_activity();
                    self._init_compelete = true;
                    console.log("igc-----rob's reward config is loaded", self._treasure_reward_config_data);
                }, this);
            }, this);
        }
        init_activity() {
            let info_list = syyx_sdk_utils.get_item("syyx_rob_treasure_info");
            if (!info_list) {
                this._rob_info = new syyx_rob_treasure_info();
                this._rob_info.need_wait_num = this.get_enter_wait_need_num();
            }
            else {
                this._rob_info = info_list;
            }
            this.check_is_same_day();
            this.save();
        }
        check_is_same_day() {
            let last_timestamp = this._rob_info.last_timestamp;
            let cur_timestamp = syyx_sdk_utils.get_date_timestamp();
            if (!syyx_sdk_utils.check_is_same_day(last_timestamp, cur_timestamp)) {
                this._rob_info.last_timestamp = cur_timestamp;
                this._rob_info.bomb_data = [];
                this.init_bomb();
                this.save();
            }
        }
        use_bomb(index) {
            let bomb_data = this._rob_info.bomb_data[index];
            if (bomb_data.can_use) {
                bomb_data.can_use = false;
                if (!bomb_data.is_resume) {
                    let resume_time = this.get_bomb_resume_time();
                    if (this._rob_info.use_bomb_count <= 2) {
                        bomb_data.resume_timestamp = syyx_sdk_utils.get_date_timestamp() + resume_time[this._rob_info.use_bomb_count];
                    }
                    else {
                        bomb_data.resume_timestamp = syyx_sdk_utils.get_date_timestamp() + this.get_bomb_resume_jg(this._rob_info.use_bomb_count);
                    }
                    this._rob_info.use_bomb_count++;
                    this.save();
                }
            }
        }
        get_bomb_resume_jg(use_bomb_count) {
            let resume_time = this.get_bomb_resume_time();
            let jg1 = resume_time[1] - resume_time[0];
            let jg2 = resume_time[2] - resume_time[1];
            return resume_time[0] + Math.ceil(use_bomb_count / 2) * jg1 + Math.floor(use_bomb_count / 2) * jg2;
        }
        check_bomb_resume() {
            let bomb_data = this._rob_info.bomb_data;
            for (let i in bomb_data) {
                if (!bomb_data[i].is_resume && !bomb_data[i].can_use) {
                    if (syyx_sdk_utils.get_date_timestamp() > bomb_data[i].resume_timestamp) {
                        bomb_data[i].can_use = true;
                    }
                }
            }
        }
        bomb_box(grid_data) {
            if (grid_data.is_reward && grid_data.state == e_rob_grid_reward_state.wait_bomb) {
                grid_data.state = e_rob_grid_reward_state.has_bomb;
            }
        }
        video_add_bomb() {
            let bomb_data = this._rob_info.bomb_data;
            for (let i in bomb_data) {
                bomb_data[i].can_use = true;
            }
            if (this._rob_info.use_bomb_count > 3) {
                this._rob_info.use_bomb_count -= 3;
            }
            this.save();
        }
        init_bomb() {
            if (this._rob_info.bomb_data.length == 0) {
                this._rob_info.bomb_data = [];
                for (let i = 0; i < 3; i++) {
                    let bomb_info = new syyx_rob_bomb_info();
                    bomb_info.index = 0;
                    this._rob_info.bomb_data.push(bomb_info);
                }
            }
        }
        init_grid() {
            this.eight_reward_list = [];
            let is_set_miss_bg = false;
            let pos_arr = [];
            for (let i = 0; i < 6; i++) {
                for (let j = 0; j < 6; j++) {
                    if (!this._rob_info.grid_data[i]) {
                        this._rob_info.grid_data[i] = [];
                    }
                    this._rob_info.grid_data[i][j] = new syyx_rob_reward_item();
                    pos_arr.push({ "i": i, "j": j });
                }
            }
            let reward_box_num = 0;
            for (let i = 0; i < 36; i++) {
                let random_index = Math.floor(Math.random() * pos_arr.length);
                let coordinate = pos_arr[random_index];
                let num = this.check_around_reward(coordinate.i, coordinate.j);
                if (num >= 2) {
                    continue;
                }
                let num1 = this.check_around_reward(coordinate.i - 1, coordinate.j);
                let num2 = this.check_around_reward(coordinate.i + 1, coordinate.j);
                let num3 = this.check_around_reward(coordinate.i, coordinate.j - 1);
                let num4 = this.check_around_reward(coordinate.i, coordinate.j + 1);
                if (num1 >= 2 || num2 >= 2 || num3 >= 2 || num4 >= 2) {
                    continue;
                }
                else {
                    this._rob_info.grid_data[coordinate.i][coordinate.j].is_reward = true;
                    pos_arr.splice(random_index, 1);
                    reward_box_num++;
                    this.random_reward(reward_box_num, this._rob_info.grid_data[coordinate.i][coordinate.j]);
                    let item_type = this._rob_info.grid_data[coordinate.i][coordinate.j].config.type;
                    if (item_type == e_item_type.skin || item_type == e_item_type.equip) {
                        if (!is_set_miss_bg) {
                            is_set_miss_bg = true;
                            this._rob_info.grid_data[coordinate.i][coordinate.j].is_miss_bg = true;
                        }
                    }
                }
                if (reward_box_num == 8) {
                    break;
                }
            }
        }
        check_around_reward(i, j) {
            let reward_num = 0;
            if (this._rob_info.grid_data[i - 1] && this._rob_info.grid_data[i - 1][j]) {
                this._rob_info.grid_data[i - 1][j].is_reward && reward_num++;
            }
            if (this._rob_info.grid_data[i + 1] && this._rob_info.grid_data[i + 1][j]) {
                this._rob_info.grid_data[i + 1][j].is_reward && reward_num++;
            }
            if (this._rob_info.grid_data[i] && this._rob_info.grid_data[i][j - 1]) {
                this._rob_info.grid_data[i][j - 1].is_reward && reward_num++;
            }
            if (this._rob_info.grid_data[i] && this._rob_info.grid_data[i][j + 1]) {
                this._rob_info.grid_data[i][j + 1].is_reward && reward_num++;
            }
            return reward_num;
        }
        has_item(id) {
            for (let i in this._rob_info.get_list) {
                if (this._rob_info.get_list[i].id == id) {
                    return true;
                }
            }
            return false;
        }
        has_fragment(id) {
            for (let j in this.eight_reward_list) {
                if (this.eight_reward_list[j] == id) {
                    return true;
                }
            }
            for (let i in this._rob_info.get_list) {
                if (this._rob_info.get_list[i].id == id) {
                    return true;
                }
            }
            return false;
        }
        get_item(grid_data) {
            if (grid_data.state == e_rob_grid_reward_state.has_bomb) {
                if (grid_data.config.type != e_item_type.none) {
                    grid_data.state = e_rob_grid_reward_state.has_get;
                    if (grid_data.config.type == e_item_type.skin || grid_data.config.type == e_item_type.equip) {
                        this._rob_info.get_list.push({
                            id: grid_data.item_id,
                            state: e_rob_fragment_state.no_inlaid
                        });
                        this.save();
                    }
                }
            }
        }
        check_get_all_item() {
            if (this._rob_info.get_list.length == 15) {
                for (let i in this._rob_info.get_list) {
                    if (this._rob_info.get_list[i].state != e_rob_fragment_state.inlaid) {
                        return false;
                    }
                }
                return true;
            }
            return false;
        }
        check_bag_red_point() {
            if ((0 < this._rob_info.get_list.length && this._rob_info.get_list.length <= 15)) {
                for (let i in this._rob_info.get_list) {
                    if (this._rob_info.get_list[i].state != e_rob_fragment_state.inlaid) {
                        return true;
                    }
                }
                return false;
            }
            return false;
        }
        inlaid_fragment(config, call_back) {
            if (this.has_item(config.id)) {
                for (let i in this._rob_info.get_list) {
                    if (this._rob_info.get_list[i].id == config.id && this._rob_info.get_list[i].state == e_rob_fragment_state.no_inlaid) {
                        this._rob_info.get_list[i].state = e_rob_fragment_state.inlaid;
                        let get_item = true;
                        let fragemnt_list = this.get_reward_data_list()[config.item_id];
                        for (let i in fragemnt_list) {
                            if (!this.check_fragment_is_inlaid(fragemnt_list[i].id)) {
                                get_item = false;
                                break;
                            }
                        }
                        if (get_item) {
                            syyx_activity_manager.show_treasure_congratulations(config);
                            call_back && call_back([{ item_id: config.item_id, count: config.num }]);
                            syyx_sdk_api.load_view(syyx_view.activity_bag, function (view) {
                                view.hide && view.hide();
                            });
                        }
                        break;
                    }
                }
                this.save();
            }
        }
        check_fragment_is_inlaid(id) {
            for (let i in this._rob_info.get_list) {
                if (this._rob_info.get_list[i].id == id) {
                    return this._rob_info.get_list[i].state == e_rob_fragment_state.inlaid;
                }
            }
            return false;
        }
        get_un_inlaid_tab_index() {
            let fragemnt_list = this.get_reward_data_list();
            let index = 0;
            for (let i in fragemnt_list) {
                index++;
                let list = fragemnt_list[i];
                for (let j in list) {
                    if (!this.check_fragment_is_inlaid(list[j].id)) {
                        return index;
                    }
                }
            }
            return 1;
        }
        get_random_fragment(item_id) {
            let fragemnt_list = this.get_reward_data_list();
            if (item_id) {
                let list = fragemnt_list[item_id];
                for (let i in list) {
                    if (!this.has_fragment(list[i].id)) {
                        return list[i].id;
                    }
                }
            }
            else {
                let no_has_list = [];
                for (let i in fragemnt_list) {
                    let list = fragemnt_list[i];
                    for (let j in list) {
                        if (!this.has_fragment(list[j].id)) {
                            no_has_list.push(list[j]);
                        }
                    }
                }
                if (no_has_list.length > 0) {
                    return no_has_list[Math.floor(Math.random() * no_has_list.length)].id;
                }
            }
            return undefined;
        }
        get_pos_id(item_id) {
            for (let i in this._treasure_reward_config_data) {
                if (this._treasure_reward_config_data[i].item_id == item_id) {
                    return this._treasure_reward_config_data[i].id;
                }
            }
        }
        random_reward(box_index, grid_data) {
            if (grid_data.item_id == undefined) {
                let open_num = Math.min(this._rob_info.open_view_num, 4);
                let box_reward_list = this._treasure_config_data[open_num];
                let item_list = box_reward_list["box_" + box_index];
                grid_data.state = box_index <= 1 ? e_rob_grid_reward_state.has_bomb : e_rob_grid_reward_state.wait_bomb;
                let fragemnt_list = this.get_reward_data_list();
                let a_item_id = Object.keys(fragemnt_list)[0];
                let b_item_id = Object.keys(fragemnt_list)[1];
                let item_pos_id = undefined;
                if (item_list.length == 0) {
                    if (this._rob_info.open_view_num == 2) {
                        let a_fragment = this.get_random_fragment(a_item_id);
                        a_fragment && (item_pos_id = a_fragment);
                    }
                    else if (this._rob_info.open_view_num == 3) {
                        let a_fragment = this.get_random_fragment(a_item_id);
                        let b_fragment = this.get_random_fragment(b_item_id);
                        if (a_fragment) {
                            item_pos_id = a_fragment;
                        }
                        else if (b_fragment) {
                            item_pos_id = b_fragment;
                        }
                    }
                    else {
                        let fragment = this.get_random_fragment();
                        let random = Math.random();
                        if (fragment) {
                            if (random < 0.8) {
                                item_pos_id = fragment;
                            }
                            else if (random < 0.1) {
                                item_pos_id = this.get_pos_id(e_item_type.gold);
                            }
                            else {
                                item_pos_id = this.get_pos_id(e_item_type.none);
                            }
                        }
                        else {
                            item_pos_id = random > 0.5 ? this.get_pos_id(e_item_type.gold) : this.get_pos_id(e_item_type.none);
                        }
                    }
                }
                else {
                    item_pos_id = item_list[0];
                }
                !item_pos_id && (item_pos_id = this.get_pos_id(e_item_type.gold));
                grid_data.item_id = this._treasure_reward_config_data[item_pos_id].id;
                grid_data.config = this._treasure_reward_config_data[item_pos_id];
                this.eight_reward_list.push(item_pos_id);
            }
        }
        get_reward_data_list() {
            if (Object.keys(this.fragment_reward_list).length == 0) {
                for (let i in this._treasure_reward_config_data) {
                    if (this._treasure_reward_config_data[i].type == e_item_type.skin || this._treasure_reward_config_data[i].type == e_item_type.equip) {
                        let item_id = this._treasure_reward_config_data[i].item_id;
                        if (!this.fragment_reward_list[item_id]) {
                            this.fragment_reward_list[item_id] = [];
                        }
                        this.fragment_reward_list[item_id].push(this._treasure_reward_config_data[i]);
                    }
                }
            }
            return this.fragment_reward_list;
        }
        get_data() {
            return this._rob_info;
        }
        check_is_guide_inlaid() {
            return this._rob_info.is_guide_inlaid;
        }
        set_is_guide_inlaid() {
            syyx_activity_manager.send_activity_event(e_activity_event_id.first_click_bag);
            this._rob_info.is_guide_inlaid = true;
            this.save();
        }
        show_bag_view(call_back) {
            syyx_manager.create_activity_bag(function (view) {
                if (!view.parent) {
                    view.show(call_back);
                }
            });
        }
        show_rob_treasure_view(call_back) {
            let self = this;
            if (this._rob_info.state == e_activity_rare_state.no_active) {
                console.log("igc-----rob activity is not available");
                return;
            }
            syyx_manager.create_activity_rob(function (view) {
                if (!view.parent) {
                    self.add_open_rob_view_num();
                    self.init_grid();
                    self.init_bomb();
                    view.show(call_back);
                }
            });
        }
        add_open_rob_view_num() {
            this._rob_info.open_view_num++;
            this._rob_info.need_wait_num--;
            let wait_num = this.get_enter_wait_need_num();
            if (this._rob_info.need_wait_num == 0) {
                this._rob_info.wait_compelete_time = syyx_sdk_utils.get_date_timestamp() + this.get_wait_time();
            }
            this.save();
        }
        get_enter_wait_need_num() {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["active_rob_treasure_enter_wait_num"]) {
                return business_config_data["active_rob_treasure_enter_wait_num"].value[0];
            }
            return 3;
        }
        get_wait_time() {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["active_rob_treasure_resume_time"]) {
                return business_config_data["active_rob_treasure_resume_time"].value[0];
            }
            return 10000;
        }
        get_active_game_num() {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["active_rob_treasure_chapter"]) {
                return business_config_data["active_rob_treasure_chapter"].value[0];
            }
            return 0;
        }
        active_activity(game_num) {
            if (this._rob_info && this._rob_info.state == e_activity_rare_state.no_active) {
                if (!game_num) {
                    game_num = syyx_activity_manager._game_num;
                }
                if (game_num >= this.get_active_game_num()) {
                    this._rob_info.state = e_activity_rare_state.active;
                }
            }
        }
        check_open() {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["open_rob_treasure"]) {
                if (this._rob_info.wait_compelete_time != -1 && this._rob_info.wait_compelete_time < syyx_sdk_utils.get_date_timestamp()) {
                    this._rob_info.need_wait_num = this.get_enter_wait_need_num();
                    this._rob_info.wait_compelete_time = -1;
                }
                if (this.check_get_all_item() && this._rob_info.state != e_activity_rob_state.end) {
                    this._rob_info.state = e_activity_rob_state.end;
                    this.save();
                }
                if (this._rob_info.state == e_activity_rob_state.end) {
                    return false;
                }
                return business_config_data["open_rob_treasure"].value[0] == 1;
            }
            return true;
        }
        get_bomb_resume_time() {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["active_rob_treasure_bomb_time"]) {
                return business_config_data["active_rob_treasure_bomb_time"].value;
            }
            return [45000, 90000, 120000];
        }
        get_random_gold() {
            let num = 100;
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data["active_rob_treasure_gold_num"]) {
                let num_arr = business_config_data["active_rob_treasure_gold_num"].value;
                num = num_arr[0] + Math.ceil(Math.random() * (num_arr[1] - num_arr[0]));
            }
            return num;
        }
        save() {
            syyx_sdk_utils.set_item("syyx_rob_treasure_info", this._rob_info);
        }
    }

    class syyx_turntable_manager {
        constructor() {
            this._first_reward = undefined;
            this._random_reward_list = [];
            this._best_reward_list = [];
            this._turntable_info = new syyx_turntable_info();
            this._business_config_data = undefined;
        }
        load_activity_config() {
            let self = this;
            let business_config_data = syyx_manager.get_business_config();
            let is_open_turntable = false;
            if (business_config_data && business_config_data["open_turntable_activity"]) {
                is_open_turntable = business_config_data["open_turntable_activity"].value[0] == 1;
            }
            if (!is_open_turntable) {
                console.log("igc----- turntable activity is close");
                return;
            }
            this._item_config = syyx_activity_manager._common_item_config;
            syyx_sdk_utils.load_resource(syyx_manager.__activity_turntable_config_path, function (data) {
                self._turntable_config = igc.igc_resources_utils.parse_csv(data, "id");
                console.log("igc-----转盘配置表加载成功", self._turntable_config);
                self._business_config_data = syyx_manager.get_business_config();
                self.init_activity();
            }, self);
        }
        check_open() {
            if (!this._item_config)
                return false;
            let business_config_data = syyx_manager.get_business_config();
            let is_open = false;
            if (business_config_data && business_config_data["open_turntable_activity"]) {
                is_open = business_config_data["open_turntable_activity"].value[0] == 1;
            }
            return is_open;
        }
        init_activity() {
            let info_list = syyx_sdk_utils.get_item("syyx_turntable_info");
            if (!info_list) {
                this._turntable_info = new syyx_turntable_info();
                this.reset_turntable_info();
            }
            else {
                this._turntable_info = info_list;
                this.check_is_same_day();
            }
            this.init_reward_list();
            this.save();
        }
        check_is_same_day() {
            let last_timestamp = this._turntable_info.last_timestamp;
            let cur_timestamp = syyx_sdk_utils.get_date_timestamp();
            if (!syyx_sdk_utils.check_is_same_day(last_timestamp, cur_timestamp)) {
                this.reset_turntable_info();
                this.save();
            }
        }
        reset_turntable_info() {
            this._turntable_info.max_today_count = this.get_today_max_count();
            this._turntable_info.today_count = 0;
            this._turntable_info.need_count = this.get_need_count();
            this._turntable_info.last_timestamp = syyx_sdk_utils.get_date_timestamp();
        }
        is_has_reward(item_id) {
            for (let i in this._turntable_info.get_reward_list) {
                let has_get_id = this._turntable_info.get_reward_list[i];
                if (item_id == has_get_id) {
                    return true;
                }
            }
            return false;
        }
        get_best_reward_info() {
            this.init_reward_list();
            let reward_info = undefined;
            if (this._best_reward_list.length > 0) {
                reward_info = this._best_reward_list[0];
                for (let i in this._best_reward_list) {
                    if (reward_info.get_count > this._best_reward_list[i].get_count) {
                        reward_info = this._best_reward_list[i];
                    }
                }
                return reward_info;
            }
            else {
                console.log("igc-----最佳奖励为空 请检查相关配置表配置");
            }
        }
        get_reward() {
            if (!this.check_can_play()) {
                if (this._turntable_info.max_today_count <= this._turntable_info.today_count) {
                    console.log("igc----- 今日转盘次数已用尽");
                    return;
                }
            }
            let reward_info = undefined;
            this.init_reward_list();
            let play_count = this._turntable_info.play_count;
            if (play_count == 0) {
                reward_info = this._first_reward;
            }
            else {
                if (this.get_need_count() == 1) {
                    reward_info = this.get_best_reward_info();
                }
                else {
                    let all_pro = 0;
                    for (let i in this._random_reward_list) {
                        all_pro += this._random_reward_list[i].pro;
                    }
                    let random_pro = all_pro * Math.random();
                    let cur_pro = 0;
                    for (let i in this._random_reward_list) {
                        cur_pro += this._random_reward_list[i].pro;
                        if (random_pro <= cur_pro) {
                            reward_info = this._random_reward_list[i];
                            break;
                        }
                    }
                }
            }
            console.log("igc-----本次转盘随机的奖励为", reward_info);
            return reward_info;
        }
        update_turntable_info(reward_info) {
            this.save_has_get_reward_list(reward_info.item_id);
            reward_info.get_count++;
            this._turntable_info.play_count++;
            this._turntable_info.today_count++;
            this.save();
        }
        show_congradulations(reward_info, call_back) {
            let self = this;
            if (reward_info.need_congratulations) {
                let config = {
                    icon: reward_info.icon,
                    count: reward_info.item_count,
                    item_id: reward_info.item_id,
                    desc: reward_info.item_config.desc
                };
                syyx_activity_manager.show_get_reward(config);
            }
            call_back && call_back();
        }
        save_has_get_reward_list(item_id) {
            for (let i in this._turntable_info.get_reward_list) {
                if (this._turntable_info.get_reward_list[i] == item_id) {
                    return;
                }
            }
            this._turntable_info.get_reward_list.push(item_id);
        }
        get_reward_list() {
            let index = 1;
            for (let i in this._turntable_config) {
                if (!this._turntable_info.reward_info[i]) {
                    this._turntable_info.reward_info[i] = new syyx_turntable_reward_info();
                }
                let turntable_coonfig = this._turntable_config[i];
                let data = this._turntable_info.reward_info[i];
                let reward_info = turntable_coonfig.normal_reward;
                if (data.get_count == 0 && turntable_coonfig.first_reward) {
                    reward_info = turntable_coonfig.first_reward;
                }
                data.index = index++;
                data.is_first = this._turntable_config[i].is_first == 1;
                data.is_video = this._turntable_config[i].is_video == 1;
                data.item_config = this._item_config[reward_info.item_id];
                data.pro = turntable_coonfig.pro;
                data.item_id = reward_info.item_id;
                data.item_type = this._item_config[reward_info.item_id].type;
                if (data.item_type == e_item_type.gold || data.item_type == e_item_type.diamond) {
                    data.item_count = reward_info.count * this._turntable_info.growth_coefficient;
                }
                else {
                    data.item_count = reward_info.count;
                }
                data.icon = this._item_config[reward_info.item_id].skin;
                data.tag_icon = this._item_config[reward_info.item_id].tag_icon || "";
                data.need_congratulations = this._item_config[reward_info.item_id].need_congratulations;
            }
            return this._turntable_info.reward_info;
        }
        init_reward_list() {
            this._random_reward_list = [];
            this._best_reward_list = [];
            let reward_list = this.get_reward_list();
            for (let i in reward_list) {
                if (reward_list[i].is_video == 1) {
                    this._best_reward_list.push(reward_list[i]);
                }
                else {
                    this._random_reward_list.push(reward_list[i]);
                }
                if (reward_list[i].is_first == 1) {
                    this._first_reward = reward_list[i];
                }
            }
        }
        get_today_max_count() {
            let today_max_count = 12;
            if (this._business_config_data && this._business_config_data["turntable_today_max_count"]) {
                today_max_count = this._business_config_data["turntable_today_max_count"].value[0];
            }
            return today_max_count;
        }
        get_today_surplus_count() {
            let today_max_count = this.get_today_max_count();
            let today_count = this._turntable_info.today_count;
            return today_max_count - today_count;
        }
        get_need_count() {
            let need_count = 3;
            if (this._business_config_data && this._business_config_data["turntable_reset_count"]) {
                need_count = this._business_config_data["turntable_reset_count"].value[0];
            }
            if (this._turntable_info.today_count % need_count > 0) {
                return need_count - this._turntable_info.today_count % need_count;
            }
            return need_count;
        }
        get_reset_count() {
            let count = 3;
            if (this._business_config_data && this._business_config_data["turntable_reset_count"]) {
                count = this._business_config_data["turntable_reset_count"].value[0];
            }
            return count;
        }
        set_growth_coefficient(value) {
            if (value > 0) {
                this._turntable_info.growth_coefficient = value;
                this.save();
            }
        }
        check_is_first_play() {
            return this._turntable_info.play_count == 0;
        }
        check_can_play() {
            if (this._turntable_info.max_today_count <= this._turntable_info.today_count) {
                console.log("igc----- 今日转盘次数已用尽");
                return false;
            }
            return true;
        }
        save() {
            syyx_sdk_utils.set_item("syyx_turntable_info", this._turntable_info);
        }
    }

    class syyx_ui_super_icon {
    }

    class syyx_ui_super_power {
    }

    class syyx_ui_unit_game {
    }

    class syyx_ui_game_box {
    }

    class syyx_ui_left_more_game {
    }

    class syyx_ui_right_more_game {
    }

    class syyx_ui_guess_like {
    }

    var View = Laya.View;
    var Dialog = Laya.Dialog;
    var Scene = Laya.Scene;
    var REG = Laya.ClassUtils.regClass;
    var ui;
    (function (ui) {
        var dialogs;
        (function (dialogs) {
            class BoxCoinUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/BoxCoin");
                }
            }
            dialogs.BoxCoinUI = BoxCoinUI;
            REG("ui.dialogs.BoxCoinUI", BoxCoinUI);
            class BoxEnergyUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/BoxEnergy");
                }
            }
            dialogs.BoxEnergyUI = BoxEnergyUI;
            REG("ui.dialogs.BoxEnergyUI", BoxEnergyUI);
            class EnergyDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/EnergyDialog");
                }
            }
            dialogs.EnergyDialogUI = EnergyDialogUI;
            REG("ui.dialogs.EnergyDialogUI", EnergyDialogUI);
            class FightViewDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/FightViewDialog");
                }
            }
            dialogs.FightViewDialogUI = FightViewDialogUI;
            REG("ui.dialogs.FightViewDialogUI", FightViewDialogUI);
            class GameViewDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/GameViewDialog");
                }
            }
            dialogs.GameViewDialogUI = GameViewDialogUI;
            REG("ui.dialogs.GameViewDialogUI", GameViewDialogUI);
            class GetLevelSkinDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/GetLevelSkinDialog");
                }
            }
            dialogs.GetLevelSkinDialogUI = GetLevelSkinDialogUI;
            REG("ui.dialogs.GetLevelSkinDialogUI", GetLevelSkinDialogUI);
            class GetRewardViewDialogsUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/GetRewardViewDialogs");
                }
            }
            dialogs.GetRewardViewDialogsUI = GetRewardViewDialogsUI;
            REG("ui.dialogs.GetRewardViewDialogsUI", GetRewardViewDialogsUI);
            class KeyBoxDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/KeyBoxDialog");
                }
            }
            dialogs.KeyBoxDialogUI = KeyBoxDialogUI;
            REG("ui.dialogs.KeyBoxDialogUI", KeyBoxDialogUI);
            class LevelSkinIntroUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/LevelSkinIntro");
                }
            }
            dialogs.LevelSkinIntroUI = LevelSkinIntroUI;
            REG("ui.dialogs.LevelSkinIntroUI", LevelSkinIntroUI);
            class LevelThroughSkinDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/LevelThroughSkinDialog");
                }
            }
            dialogs.LevelThroughSkinDialogUI = LevelThroughSkinDialogUI;
            REG("ui.dialogs.LevelThroughSkinDialogUI", LevelThroughSkinDialogUI);
            class MainViewDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/MainViewDialog");
                }
            }
            dialogs.MainViewDialogUI = MainViewDialogUI;
            REG("ui.dialogs.MainViewDialogUI", MainViewDialogUI);
            class OnlineSkinDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/OnlineSkinDialog");
                }
            }
            dialogs.OnlineSkinDialogUI = OnlineSkinDialogUI;
            REG("ui.dialogs.OnlineSkinDialogUI", OnlineSkinDialogUI);
            class OnlineSkinIntroUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/OnlineSkinIntro");
                }
            }
            dialogs.OnlineSkinIntroUI = OnlineSkinIntroUI;
            REG("ui.dialogs.OnlineSkinIntroUI", OnlineSkinIntroUI);
            class ResultViewDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/ResultViewDialog");
                }
            }
            dialogs.ResultViewDialogUI = ResultViewDialogUI;
            REG("ui.dialogs.ResultViewDialogUI", ResultViewDialogUI);
            class ShopDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/ShopDialog");
                }
            }
            dialogs.ShopDialogUI = ShopDialogUI;
            REG("ui.dialogs.ShopDialogUI", ShopDialogUI);
            class TrySkinDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("dialogs/TrySkinDialog");
                }
            }
            dialogs.TrySkinDialogUI = TrySkinDialogUI;
            REG("ui.dialogs.TrySkinDialogUI", TrySkinDialogUI);
        })(dialogs = ui.dialogs || (ui.dialogs = {}));
    })(ui || (ui = {}));
    (function (ui) {
        var loading;
        (function (loading) {
            class LoadingDialogUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("loading/LoadingDialog");
                }
            }
            loading.LoadingDialogUI = LoadingDialogUI;
            REG("ui.loading.LoadingDialogUI", LoadingDialogUI);
        })(loading = ui.loading || (ui.loading = {}));
    })(ui || (ui = {}));
    (function (ui) {
        var sdk;
        (function (sdk) {
            class BottomAdUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/BottomAd");
                }
            }
            sdk.BottomAdUI = BottomAdUI;
            REG("ui.sdk.BottomAdUI", BottomAdUI);
            class DoubleAdUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/DoubleAd");
                }
            }
            sdk.DoubleAdUI = DoubleAdUI;
            REG("ui.sdk.DoubleAdUI", DoubleAdUI);
            class FullAdUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/FullAd");
                }
            }
            sdk.FullAdUI = FullAdUI;
            REG("ui.sdk.FullAdUI", FullAdUI);
            class FullAdSimpleUI extends Scene {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/FullAdSimple");
                }
            }
            sdk.FullAdSimpleUI = FullAdSimpleUI;
            REG("ui.sdk.FullAdSimpleUI", FullAdSimpleUI);
            class HorizontalScrollListMiddleUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/HorizontalScrollListMiddle");
                }
            }
            sdk.HorizontalScrollListMiddleUI = HorizontalScrollListMiddleUI;
            REG("ui.sdk.HorizontalScrollListMiddleUI", HorizontalScrollListMiddleUI);
            class HotRecamUI extends View {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/HotRecam");
                }
            }
            sdk.HotRecamUI = HotRecamUI;
            REG("ui.sdk.HotRecamUI", HotRecamUI);
            class WrongClickAdUI extends Dialog {
                constructor() { super(); }
                createChildren() {
                    super.createChildren();
                    this.loadScene("sdk/WrongClickAd");
                }
            }
            sdk.WrongClickAdUI = WrongClickAdUI;
            REG("ui.sdk.WrongClickAdUI", WrongClickAdUI);
        })(sdk = ui.sdk || (ui.sdk = {}));
    })(ui || (ui = {}));
    (function (ui) {
        var syyx_ad;
        (function (syyx_ad) {
            class ui_bannerUI extends View {
                constructor() {
                    super();
                }
                createChildren() {
                    super.createChildren();
                    this.createView(ui_bannerUI.uiView);
                }
            }
            ui_bannerUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 1080, "scaleY": 1, "scaleX": 1, "mouseEnabled": true, "height": 200 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "native_bg", "top": 0, "right": 0, "left": 0, "bottom": 0 }, "compId": 29, "child": [{ "type": "Image", "props": { "top": 0, "skin": "ads/bg_banner_01.png", "scaleX": 2, "right": 0, "left": 0, "bottom": 0 }, "compId": 61 }, { "type": "Box", "props": { "x": 64, "var": "box_big_banner", "centerY": 0 }, "compId": 56, "child": [{ "type": "Image", "props": { "x": 60, "width": 640, "scaleY": 0.4, "scaleX": 0.4, "name": "icon", "height": 320, "centerY": 0 }, "compId": 52 }, { "type": "Text", "props": { "y": 24, "x": 338, "wordWrap": false, "width": 400, "valign": "middle", "text": "标题", "overflow": "hidden", "name": "title", "height": 40, "fontSize": 28, "color": "#000000", "align": "center", "runtime": "Laya.Text" }, "compId": 54 }, { "type": "Text", "props": { "y": 74, "x": 339, "wordWrap": false, "width": 400, "valign": "middle", "text": "描述", "overflow": "hidden", "name": "desc", "height": 40, "fontSize": 20, "color": "#000000", "align": "center", "runtime": "Laya.Text" }, "compId": 55 }] }, { "type": "Image", "props": { "x": 828, "var": "btn_click_check", "skin": "ads/bt_banner_01.png", "scaleY": 0.45, "scaleX": 0.45, "centerY": 0 }, "compId": 36, "child": [{ "type": "Text", "props": { "y": 42, "x": 88, "text": "点击查看", "strokeColor": "#ffffff", "stroke": 2, "fontSize": 60, "color": "#ffffff", "runtime": "Laya.Text" }, "compId": 72 }] }, { "type": "Image", "props": { "skin": "ads/bg_banner_02.png", "scaleY": -1, "right": 0, "bottom": 41 }, "compId": 70, "child": [{ "type": "Text", "props": { "y": 30, "x": 15.5, "text": "广告", "scaleY": -1, "fontSize": 28, "color": "#ffffff", "runtime": "Laya.Text" }, "compId": 71 }] }] }, { "type": "Image", "props": { "width": 100, "var": "icon_close", "top": 0, "mouseEnabled": true, "left": 0, "height": 100 }, "compId": 35, "child": [{ "type": "Script", "props": { "y": 1, "x": 0, "runtime": "syyx_sdk/utils/ui_button_scale.ts" }, "compId": 58 }, { "type": "Image", "props": { "skin": "ads/bt_banner_02.png", "scaleY": 1, "scaleX": 1, "mouseEnabled": true, "centerY": -29, "centerX": -25 }, "compId": 59 }] }], "loadList": ["ads/bg_banner_01.png", "ads/bt_banner_01.png", "ads/bg_banner_02.png", "ads/bt_banner_02.png"], "loadList3D": [] };
            syyx_ad.ui_bannerUI = ui_bannerUI;
            REG("ui.syyx_ad.ui_bannerUI", ui_bannerUI);
            class ui_inner_interstitialUI extends View {
                constructor() {
                    super();
                }
                createChildren() {
                    super.createChildren();
                    this.createView(ui_inner_interstitialUI.uiView);
                }
            }
            ui_inner_interstitialUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 885, "height": 580 }, "compId": 2, "child": [{ "type": "Image", "props": { "y": 128, "width": 886, "var": "icon_video", "height": 443, "centerX": -1 }, "compId": 218, "child": [{ "type": "Text", "props": { "y": 348, "x": 17, "wordWrap": false, "width": 851, "var": "text_desc", "text": "text_desc", "overflow": "hidden", "height": 45, "fontSize": 45, "color": "#ffffff", "bold": true, "align": "center", "runtime": "Laya.Text" }, "compId": 227 }, { "type": "Sprite", "props": { "y": -9, "x": -9, "texture": "ads/img_title_bg2.png" }, "compId": 219 }, { "type": "Sprite", "props": { "y": 400, "x": 766, "texture": "ads/img_ad_text2.png" }, "compId": 220 }, { "type": "Text", "props": { "y": -6, "x": -4, "wordWrap": false, "width": 304, "var": "txt_title", "valign": "middle", "text": "视频APP", "overflow": "hidden", "height": 78, "fontSize": 50, "color": "#ffffff", "align": "center", "runtime": "Laya.Text" }, "compId": 226 }] }, { "type": "Box", "props": { "y": 71, "x": 790, "width": 150, "var": "box_close", "height": 150 }, "compId": 221, "child": [{ "type": "Image", "props": { "skin": "ads/bt_chaping_02.png", "centerY": 0, "centerX": 0 }, "compId": 238 }] }], "loadList": ["ads/img_title_bg2.png", "ads/img_ad_text2.png", "ads/bt_chaping_02.png"], "loadList3D": [] };
            syyx_ad.ui_inner_interstitialUI = ui_inner_interstitialUI;
            REG("ui.syyx_ad.ui_inner_interstitialUI", ui_inner_interstitialUI);
            class ui_interstitialUI extends View {
                constructor() {
                    super();
                }
                createChildren() {
                    super.createChildren();
                    this.createView(ui_interstitialUI.uiView);
                }
            }
            ui_interstitialUI.uiView = { "type": "View", "props": { "width": 1080, "top": 0, "right": 0, "left": 0, "height": 1920, "bottom": 0 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "block_bg", "top": 0, "skin": "ads/zz.png", "right": 0, "mouseThrough": false, "mouseEnabled": true, "left": 0, "bottom": 0 }, "compId": 54 }, { "type": "Image", "props": { "width": 930, "height": 1100, "centerY": 150, "centerX": 0 }, "compId": 59, "child": [{ "type": "Image", "props": { "width": 930, "var": "click_box", "skin": "ads/bg_chaping_01.png", "sizeGrid": "12,12,15,10", "mouseThrough": false, "mouseEnabled": true, "height": 1100, "centerY": 0, "centerX": 0 }, "compId": 70 }, { "type": "Image", "props": { "width": 886, "var": "icon_video", "mouseThrough": false, "mouseEnabled": true, "height": 443, "centerY": -306, "centerX": 0 }, "compId": 38 }, { "type": "Sprite", "props": { "y": 1100, "x": 849, "texture": "ads/bg_banner_02.png", "scaleX": -1, "rotation": 180, "name": "" }, "compId": 45 }, { "type": "Text", "props": { "y": 1071, "x": 866, "text": "广告", "fontSize": 28, "color": "#ffffff", "runtime": "Laya.Text" }, "compId": 60 }, { "type": "Text", "props": { "y": 581, "x": 165, "wordWrap": false, "width": 600, "var": "txt_title", "valign": "middle", "text": "标题", "overflow": "hidden", "name": "", "height": 78, "fontSize": 40, "color": "#000000", "align": "center", "runtime": "Laya.Text" }, "compId": 35 }, { "type": "Text", "props": { "y": 686, "x": 65, "wordWrap": true, "width": 800, "var": "text_desc", "valign": "top", "text": "描述", "height": 150, "fontSize": 32, "color": "#000000", "align": "center", "runtime": "Laya.Text" }, "compId": 37 }, { "type": "Image", "props": { "y": 943, "width": 326, "var": "btn_click_button", "skin": "ads/bt_chaping_01.png", "scaleY": 1, "scaleX": 1, "name": "", "height": 122, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 10, "child": [{ "type": "Text", "props": { "y": 37, "x": 67, "text": "点击查看", "fontSize": 48, "color": "#ffffff", "bold": true, "runtime": "Laya.Text" }, "compId": 62 }] }] }, { "type": "Box", "props": { "width": 150, "var": "box_close", "height": 150, "centerY": -385, "centerX": 447 }, "compId": 52, "child": [{ "type": "Image", "props": { "skin": "ads/bt_chaping_02.png", "centerY": 0, "centerX": 0 }, "compId": 56 }] }], "loadList": ["ads/zz.png", "ads/bg_chaping_01.png", "ads/bg_banner_02.png", "ads/bt_chaping_01.png", "ads/bt_chaping_02.png"], "loadList3D": [] };
            syyx_ad.ui_interstitialUI = ui_interstitialUI;
            REG("ui.syyx_ad.ui_interstitialUI", ui_interstitialUI);
            class ui_interstitial_hUI extends View {
                constructor() {
                    super();
                }
                createChildren() {
                    super.createChildren();
                    this.createView(ui_interstitial_hUI.uiView);
                }
            }
            ui_interstitial_hUI.uiView = { "type": "View", "props": { "width": 1920, "top": 0, "right": 0, "left": 0, "height": 1080, "bottom": 0 }, "compId": 2, "child": [{ "type": "Image", "props": { "var": "block_bg", "top": 0, "skin": "ads/zz.png", "right": 0, "mouseThrough": false, "mouseEnabled": true, "left": 0, "bottom": 0 }, "compId": 54 }, { "type": "Image", "props": { "width": 932, "height": 828, "centerY": 0, "centerX": 0 }, "compId": 59, "child": [{ "type": "Image", "props": { "y": 0, "x": 0, "width": 932, "var": "click_box", "skin": "ads/bg_chaping_01.png", "sizeGrid": "11,13,15,9", "height": 828, "centerY": 0, "centerX": 0 }, "compId": 72 }, { "type": "Image", "props": { "width": 886, "var": "icon_video", "mouseThrough": false, "mouseEnabled": true, "height": 443, "centerY": -172, "centerX": -1 }, "compId": 38 }, { "type": "Sprite", "props": { "y": 828, "x": 851, "texture": "ads/bg_banner_02.png", "scaleX": -1, "rotation": 180, "name": "" }, "compId": 45 }, { "type": "Text", "props": { "y": 796, "x": 869, "text": "广告", "fontSize": 28, "color": "#ffffff", "runtime": "Laya.Text" }, "compId": 60 }, { "type": "Text", "props": { "y": 489, "x": 165, "wordWrap": false, "width": 600, "var": "txt_title", "valign": "middle", "text": "标题", "overflow": "hidden", "name": "", "height": 78, "fontSize": 40, "color": "#000000", "align": "center", "runtime": "Laya.Text" }, "compId": 35 }, { "type": "Text", "props": { "y": 588, "x": 65, "wordWrap": false, "width": 800, "var": "text_desc", "valign": "top", "text": "描述", "height": 50, "fontSize": 32, "color": "#000000", "align": "center", "runtime": "Laya.Text" }, "compId": 37 }, { "type": "Image", "props": { "y": 727, "width": 326, "var": "btn_click_button", "skin": "ads/bt_chaping_01.png", "scaleY": 1, "scaleX": 1, "name": "", "mouseThrough": false, "mouseEnabled": true, "height": 122, "centerX": 0, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 10, "child": [{ "type": "Text", "props": { "y": 37, "x": 67, "text": "点击查看", "fontSize": 48, "color": "#ffffff", "bold": true, "runtime": "Laya.Text" }, "compId": 62 }] }] }, { "type": "Box", "props": { "width": 150, "var": "box_close", "height": 150, "centerY": -482, "centerX": 450 }, "compId": 52, "child": [{ "type": "Image", "props": { "skin": "ads/bt_chaping_02.png", "centerY": 80, "centerX": 0 }, "compId": 56 }] }], "loadList": ["ads/zz.png", "ads/bg_chaping_01.png", "ads/bg_banner_02.png", "ads/bt_chaping_01.png", "ads/bt_chaping_02.png"], "loadList3D": [] };
            syyx_ad.ui_interstitial_hUI = ui_interstitial_hUI;
            REG("ui.syyx_ad.ui_interstitial_hUI", ui_interstitial_hUI);
            class ui_native_iconUI extends View {
                constructor() {
                    super();
                }
                createChildren() {
                    super.createChildren();
                    this.createView(ui_native_iconUI.uiView);
                }
            }
            ui_native_iconUI.uiView = { "type": "View", "props": { "width": 250, "height": 250 }, "compId": 2, "child": [{ "type": "Box", "props": { "y": 125, "x": 125, "width": 250, "var": "game_box", "height": 250, "anchorY": 0.5, "anchorX": 0.5 }, "compId": 16, "child": [{ "type": "Image", "props": { "width": 250, "var": "game_icon", "height": 250, "centerY": 0, "centerX": 0 }, "compId": 14 }, { "type": "Image", "props": { "y": 208, "x": 129, "skin": "ads/img_ad_text2.png", "scaleY": 1, "scaleX": 1 }, "compId": 12 }, { "type": "Image", "props": { "y": 0, "x": 0, "width": 78, "var": "btn_close", "skin": "ads/img_close2.png", "scaleY": 0.8, "scaleX": 0.8, "height": 78, "centerY": -94, "centerX": -94 }, "compId": 17 }] }], "animations": [{ "nodes": [{ "target": 16, "keyframes": { "rotation": [{ "value": -5, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 0 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 2 }, { "value": 10, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 6 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 10 }, { "value": -5, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 14 }, { "value": 0, "tweenMethod": "linearNone", "tween": true, "target": 16, "key": "rotation", "index": 16 }] } }], "name": "shake_ani", "id": 1, "frameRate": 24, "action": 0 }], "loadList": ["ads/img_ad_text2.png", "ads/img_close2.png"], "loadList3D": [] };
            syyx_ad.ui_native_iconUI = ui_native_iconUI;
            REG("ui.syyx_ad.ui_native_iconUI", ui_native_iconUI);
            class ui_toastUI extends View {
                constructor() {
                    super();
                }
                createChildren() {
                    super.createChildren();
                    this.createView(ui_toastUI.uiView);
                }
            }
            ui_toastUI.uiView = { "type": "View", "props": { "y": 0, "x": 0, "width": 550, "height": 100, "centerY": 0, "centerX": 0 }, "compId": 2, "child": [{ "type": "Image", "props": { "x": 0, "width": 550, "var": "tips_box", "height": 100, "centerY": 0, "centerX": 0 }, "compId": 56, "child": [{ "type": "Image", "props": { "x": 0, "width": 500, "skin": "ads/zz.png", "sizeGrid": "30,39,40,30", "height": 100, "centerY": 0, "centerX": 0, "alpha": 0.9 }, "compId": 57 }, { "type": "Label", "props": { "y": 33, "x": 14, "var": "lb_tips", "text": "tips", "fontSize": 35, "color": "#ffffff", "centerY": 0, "centerX": 0 }, "compId": 58 }] }], "loadList": ["ads/zz.png"], "loadList3D": [] };
            syyx_ad.ui_toastUI = ui_toastUI;
            REG("ui.syyx_ad.ui_toastUI", ui_toastUI);
        })(syyx_ad = ui.syyx_ad || (ui.syyx_ad = {}));
    })(ui || (ui = {}));

    class syyx_ui_banner extends ui.syyx_ad.ui_bannerUI {
        constructor() {
            super();
            this.easy_click_model = false;
            this.is_set_style = false;
            this.show_count = 0;
            this.next_change_height_count = -1;
            this.timer_id = undefined;
            this.is_heighting = false;
            this.icon_close.on(Laya.Event.CLICK, this, this.on_click_close);
            this.set_background_on_show();
            this.set_default_pos();
        }
        on_click_adv2() {
            ad_banner.set_banenr_protect_model();
            this.report_click();
        }
        on_click_adv(evt) {
            this.report_click();
        }
        on_click_close() {
            this.hide();
            ad_banner.finger_close_banner();
        }
        report_click() {
            if (this.native_data) {
                syyx_sdk_api.send_other_event(e_ad_id.native_banner, igc.igc_stat_ids.native_banner_click, this.native_data.native_type);
                syyx_adv_manager.report_ad_click(e_ad_id.native_banner, this.native_data);
            }
        }
        report_show() {
            if (this.native_data) {
                syyx_adv_manager.report_ad_show(e_ad_id.native_banner, this.native_data);
            }
        }
        show(native_data) {
            if (!this.parent) {
                let order = syyx_sdk_utils.get_largest_zorder() + 1;
                Laya.stage.addChild(this);
                this.zOrder = order;
                this.on_show(native_data);
            }
        }
        set_default_pos() {
            if (!this.is_set_style) {
                let size = syyx_sdk_utils.get_size(this);
                let x = (Laya.stage.width - size.width) / 2;
                let y = Laya.stage.height - size.height;
                this.pos(x, y);
            }
        }
        set_banner_height(is_auto = true) {
            if (this.parent) {
                let self = this;
                let _business_config_data = syyx_manager.get_business_config();
                if (_business_config_data && _business_config_data["native_banner_height_open_rule"]) {
                    let rule = _business_config_data["native_banner_height_open_rule"].value;
                    if (rule) {
                        if (this.next_change_height_count == -1) {
                            this.next_change_height_count = rule[0];
                        }
                        if (this.show_count == this.next_change_height_count || !is_auto) {
                            if (!is_auto) {
                                console.log("igc----- 强制banner变高");
                                this.next_change_height_count = this.show_count;
                            }
                            this.next_change_height_count += rule[1] + Math.floor(Math.random() * (rule[2] - rule[1] + 1));
                            console.log("igc----- 下一次banner自动变高的展示次数：", this.next_change_height_count);
                            let height_rule = _business_config_data["native_banner_height_rule"].value;
                            if (height_rule) {
                                this.height = this.get_screen_adaptation_height(height_rule[1]);
                                this.set_default_pos();
                                this.timer_id && clearTimeout(this.timer_id);
                                this.is_heighting = true;
                                this.timer_id = setTimeout(function () {
                                    self.is_heighting = false;
                                    self.height = self.get_screen_adaptation_height(height_rule[0]);
                                    self.set_default_pos();
                                    console.log("igc----- banner高度恢复");
                                }, height_rule[2] * 1000);
                            }
                        }
                    }
                }
            }
        }
        get_banner_default_height() {
            let _business_config_data = syyx_manager.get_business_config();
            let height_rule = _business_config_data["native_banner_height_rule"].value;
            if (height_rule) {
                return this.get_screen_adaptation_height(height_rule[0]);
            }
            return 200;
        }
        resume_pos_and_scale() {
            this.is_set_style = false;
            let scale = syyx_sdk_api.get_screen_ratio();
            this.scaleX = scale;
            this.scaleY = scale;
            this.set_default_pos();
        }
        set_pos_and_scale(x, y, scaleX = undefined, scaleY = undefined) {
            this.is_set_style = true;
            if (scaleX > -9999999) {
                this.scaleX = scaleX;
                this.scaleY = scaleY;
            }
            if (x > -9999999) {
                this.pos(x, y);
                console.log("igc----- syyx_ui_banner set_pos_and_scale pos:", x, y, "scale:", this.scaleX);
            }
        }
        get_screen_adaptation_height(height) {
            if (Laya.stage.height > Laya.stage.width) {
                let scale = syyx_sdk_utils.get_screen_ratio();
                return (Laya.stage.height / scale) * height / 1920;
            }
            return height;
        }
        on_hide() {
            if (this.easy_click_model) {
                this.native_bg.off(Laya.Event.MOUSE_OVER, this, this.on_click_adv2);
            }
            else {
                this.native_bg.off(Laya.Event.CLICK, this, this.on_click_adv);
            }
        }
        on_show(native_data) {
            this.show_count++;
            this.easy_click_model = ad_banner.get_is_easy_click_model();
            if (this.easy_click_model) {
                this.native_bg.on(Laya.Event.MOUSE_OVER, this, this.on_click_adv2);
            }
            else {
                this.native_bg.on(Laya.Event.CLICK, this, this.on_click_adv);
            }
            if (native_data) {
                this.native_data = native_data;
            }
            else {
                this.native_data = syyx_adv_manager.get_local_native_data(ad_banner._native_banner_id);
            }
            this.refresh();
        }
        refresh() {
            let node = this.box_big_banner;
            let icon = node.getChildByName("icon");
            let title = node.getChildByName("title");
            let desc = node.getChildByName("desc");
            icon.skin = this.native_data.imgUrlList;
            title.text = this.native_data.title;
            desc.text = this.native_data.desc;
            if (!this.is_heighting) {
                this.height = this.get_banner_default_height();
                this.set_default_pos();
            }
            this.report_show();
            this.set_banner_height();
        }
        hide() {
            if (this.parent) {
                this.removeSelf();
                this.on_hide();
            }
        }
        set_background_on_show() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_sdk_api.on_show(function () {
                    if (self && !self.destroyed) {
                        console.log("igc----- native_banner set_background_on_show");
                        self.report_show();
                    }
                });
            }
        }
    }

    class syyx_ui_interstitial extends ui.syyx_ad.ui_interstitialUI {
        constructor() {
            super();
            this.box_close.on(Laya.Event.CLICK, this, this.on_click_close);
            this.btn_click_button.on(Laya.Event.CLICK, this, this.on_click_adv);
            this.icon_video.on(Laya.Event.CLICK, this, this.on_click_adv);
            this.click_box.on(Laya.Event.CLICK, this, this.on_click_adv2);
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            this.set_background_on_show();
        }
        on_click_adv2() {
            if (this.easy_click || ad_native_interstitial.check_is_click_wrap()) {
                this.report_click();
            }
        }
        on_click_adv(evt) {
            this.report_click();
        }
        on_click_close() {
            if (ad_native_interstitial.check_is_click_wrap()) {
                this.report_click();
                return;
            }
            let _business_config_data = syyx_manager.get_business_config();
            if (_business_config_data && _business_config_data["native_institial_click_close_pro"]) {
                let trap_pro = _business_config_data["native_institial_click_close_pro"].value[0];
                if (trap_pro >= 0 && Math.random() <= trap_pro) {
                    this.report_click();
                }
            }
            this.hide();
        }
        report_click() {
            if (this.native_data && this.native_data.adPosId) {
                syyx_sdk_api.send_other_event(e_ad_id.native_interstitial_hall, igc.igc_stat_ids.native_interstitial_click, this.native_data.native_type);
                syyx_adv_manager.report_ad_click(e_ad_id.native_interstitial_hall, this.native_data);
            }
        }
        report_show() {
            if (this.native_data && this.native_data.adPosId) {
                syyx_adv_manager.report_ad_show(e_ad_id.native_interstitial_hall, this.native_data);
            }
        }
        show(native_data) {
            if (!this.parent) {
                this.native_data = native_data;
                let order = syyx_sdk_utils.get_largest_zorder();
                Laya.stage.addChild(this);
                this.zOrder = order;
                this.on_show();
            }
        }
        set_default_pos() {
        }
        set_style_pos(x, y) {
        }
        on_hide() {
        }
        on_show() {
            this.refresh();
            ad_native_interstitial.show_count++;
            this.easy_click = false;
            let _business_config_data = syyx_manager.get_business_config();
            if (_business_config_data && _business_config_data["native_institial_white_easy_click"]) {
                let easy_click_pro = _business_config_data["native_institial_white_easy_click"].value[0];
                if (easy_click_pro > 0 && Math.random() <= easy_click_pro) {
                    this.easy_click = true;
                }
            }
        }
        refresh() {
            this.icon_video.skin = this.native_data.imgUrlList;
            this.txt_title.text = this.native_data.title;
            this.text_desc.text = this.native_data.desc;
            this.report_show();
        }
        hide() {
            if (this.parent) {
                this.removeSelf();
                this.on_hide();
            }
        }
        set_background_on_show() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_sdk_api.on_show(function () {
                    if (self && !self.destroyed) {
                        console.log("igc----- native_interstitial set_background_on_show");
                        self.report_show();
                    }
                });
            }
        }
    }

    class syyx_ui_inner_interstitial extends ui.syyx_ad.ui_inner_interstitialUI {
        constructor() {
            super();
            this.click_back = undefined;
            this.box_close.on(Laya.Event.CLICK, this, this.on_click_close);
            this.icon_video.on(Laya.Event.CLICK, this, this.on_click_adv);
            this.set_background_on_show();
        }
        on_click_adv(evt) {
            this.report_click();
        }
        on_click_close() {
            let _business_config_data = syyx_manager.get_business_config();
            if (_business_config_data && _business_config_data["native_inner_institial_click_close_pro"]) {
                let trap_pro = _business_config_data["native_inner_institial_click_close_pro"].value[0];
                if (trap_pro >= 0 && Math.random() <= trap_pro) {
                    this.report_click();
                }
            }
            this.hide();
        }
        report_click() {
            if (this.native_data) {
                syyx_sdk_api.send_other_event(e_ad_id.native_inner_interstitial_success, igc.igc_stat_ids.native_inner_interstitial_click, this.native_data.native_type);
                this.click_back && this.click_back();
                syyx_manager.report_ad_click(e_ad_id.native_inner_interstitial_success, this.native_data);
                console.log("igc----- has clicked native inner interstitial");
            }
            else {
                console.log("igc----- syyx_ui_inner_interstitial report_click native_data is null!");
            }
        }
        report_show() {
            if (this.native_data) {
                syyx_adv_manager.report_ad_show(e_ad_id.native_inner_interstitial_success, this.native_data);
            }
            else {
                console.log("igc----- syyx_ui_inner_interstitial report_show native_data is null!");
            }
        }
        show(parent, native_data, click_back, show_back, hide_back, is_new_type) {
            if (!this.parent) {
                this.native_data = native_data;
                this.show_back = show_back || undefined;
                this.hide_back = hide_back || undefined;
                this.click_back = click_back || undefined;
                parent.addChild(this);
                this.set_default_pos(parent);
                this.on_show();
            }
        }
        report_click_update_view(native_data) {
            if (this.parent) {
                this.native_data = native_data;
                this.refresh();
            }
        }
        set_default_pos(parent) {
            if (parent) {
                this.x = parent.width / 2 - (this.width * this.scaleX) / 2;
                this.y = parent.height / 2 - (this.height * this.scaleY) / 2;
            }
        }
        set_style_pos(x, y) {
        }
        on_hide() {
            this.hide_back && this.hide_back();
        }
        on_show() {
            this.refresh();
            ad_native_inner_interstitial.show_count++;
            this.show_back && this.show_back();
        }
        refresh() {
            this.icon_video.skin = this.native_data.imgUrlList;
            this.txt_title.text = this.native_data.title;
            this.text_desc.text = this.native_data.desc;
            this.report_show();
        }
        hide() {
            if (this.parent) {
                this.removeSelf();
                this.on_hide();
            }
        }
        set_background_on_show() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_sdk_api.on_show(function () {
                    if (self && !self.destroyed) {
                        console.log("igc----- native_inner_interstitial set_background_on_show");
                        self.report_show();
                    }
                });
            }
        }
    }

    class syyx_ui_native_icon extends ui.syyx_ad.ui_native_iconUI {
        constructor() {
            super();
            this.game_icon.on(Laya.Event.CLICK, this, this.on_click_adv);
            this.btn_close.on(Laya.Event.CLICK, this, this.on_click_close);
            this.set_background_on_show();
        }
        on_click_adv(evt) {
            this.report_click();
        }
        on_click_close() {
            let _business_config_data = syyx_manager.get_business_config();
            if (_business_config_data && _business_config_data["native_icon_trap_pro"]) {
                let trap_pro = _business_config_data["native_icon_trap_pro"].value[0];
                if (trap_pro >= 0 && Math.random() <= trap_pro) {
                    this.report_click();
                }
            }
            this.hide();
        }
        report_click() {
            if (this.native_data) {
                syyx_adv_manager.report_ad_click(e_ad_id.native_icon, this.native_data);
            }
        }
        report_show() {
            if (this.native_data) {
                syyx_adv_manager.report_ad_show(e_ad_id.native_icon, this.native_data);
            }
        }
        show(parent, native_data) {
            if (!this.parent) {
                this.native_data = native_data;
                !this.parent && parent.addChild(this);
                this.set_default_pos(parent);
                this.on_show();
            }
        }
        report_click_update_view(native_data) {
            if (this.parent) {
                this.native_data = native_data;
                this.refresh();
            }
        }
        set_default_pos(parent) {
            if (parent) {
                this.x = parent.width / 2 - (this.width * this.scaleX) / 2;
                this.y = parent.height / 2 - (this.height * this.scaleY) / 2;
            }
        }
        set_style_pos(x, y) {
        }
        on_hide() {
        }
        on_show() {
            this.refresh();
        }
        refresh() {
            this.shake_ani.play(0, false);
            this.game_icon.skin = this.native_data.imgUrlList;
            this.report_show();
        }
        hide() {
            if (this.parent) {
                this.removeSelf();
                this.on_hide();
            }
        }
        set_background_on_show() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_sdk_api.on_show(function () {
                    if (self && !self.destroyed) {
                        console.log("igc----- native_icon set_background_on_show");
                        self.report_show();
                    }
                });
            }
        }
    }

    class syyx_ui_unit_icon {
    }

    class syyx_ui_toast extends ui.syyx_ad.ui_toastUI {
        constructor() {
            super();
        }
        show(desc) {
            if (!this.parent) {
                let order = syyx_sdk_utils.get_largest_zorder();
                Laya.stage.addChild(this);
                this.zOrder = order;
            }
            this.on_show(desc);
        }
        set_default_pos() {
            this.centerX = 0;
        }
        set_style_pos(x, y) {
        }
        on_hide() {
        }
        on_show(desc) {
            this.show_tips(desc);
        }
        show_tips(desc) {
            let self = this;
            this.centerY = 0;
            this.lb_tips.text = desc;
            Laya.Tween.clearAll(this);
            this.tips_box.centerY = 0;
            this.tips_tween = Laya.Tween.to(this, { centerY: -150 }, 1500, null, Laya.Handler.create(this, () => {
                self.hide();
            }));
        }
        hide() {
            if (this.parent) {
                this.removeSelf();
                this.on_hide();
            }
        }
    }

    class syyx_ui_turntable {
    }

    class syyx_ui_get_reward {
    }

    class syyx_ui_box {
    }

    class syyx_ui_congratulations {
    }

    class syyx_ui_activity_icon {
    }

    class syyx_ui_activity_bag {
    }

    class syyx_ui_activity_enter {
    }

    class syyx_ui_activity_rare {
    }

    class syyx_ui_activity_rob {
    }

    class syyx_ui_activity_red_packet_rain_prepare {
    }

    class syyx_ui_activity_red_packet_rain {
    }

    class syyx_ui_red_packet_congratulations {
    }

    class syyx_ui_user_protocol {
    }

    class syyx_ui_super_power_h {
    }

    class syyx_ui_interstitial_h extends ui.syyx_ad.ui_interstitial_hUI {
        constructor() {
            super();
            this.box_close.on(Laya.Event.CLICK, this, this.on_click_close);
            this.btn_click_button.on(Laya.Event.CLICK, this, this.on_click_adv);
            this.icon_video.on(Laya.Event.CLICK, this, this.on_click_adv);
            this.click_box.on(Laya.Event.CLICK, this, this.on_click_adv2);
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            this.set_background_on_show();
        }
        on_click_adv2() {
            if (this.easy_click || ad_native_interstitial.check_is_click_wrap()) {
                this.report_click();
            }
        }
        on_click_adv(evt) {
            this.report_click();
        }
        on_click_close() {
            if (ad_native_interstitial.check_is_click_wrap()) {
                this.report_click();
                return;
            }
            let _business_config_data = syyx_manager.get_business_config();
            if (_business_config_data && _business_config_data["native_institial_click_close_pro"]) {
                let trap_pro = _business_config_data["native_institial_click_close_pro"].value[0];
                if (trap_pro >= 0 && Math.random() <= trap_pro) {
                    this.report_click();
                }
            }
            this.hide();
        }
        report_click() {
            if (this.native_data && this.native_data.adPosId) {
                syyx_sdk_api.send_other_event(e_ad_id.native_interstitial_hall, igc.igc_stat_ids.native_interstitial_click, this.native_data.native_type);
                syyx_adv_manager.report_ad_click(e_ad_id.native_interstitial_hall, this.native_data);
            }
        }
        report_show() {
            if (this.native_data && this.native_data.adPosId) {
                syyx_adv_manager.report_ad_show(e_ad_id.native_interstitial_hall, this.native_data);
            }
        }
        show(native_data) {
            if (!this.parent) {
                this.native_data = native_data;
                let order = syyx_sdk_utils.get_largest_zorder();
                Laya.stage.addChild(this);
                this.zOrder = order;
                this.on_show();
            }
        }
        set_default_pos() {
        }
        set_style_pos(x, y) {
        }
        on_hide() {
        }
        on_show() {
            this.refresh();
            ad_native_interstitial.show_count++;
            this.easy_click = false;
            let _business_config_data = syyx_manager.get_business_config();
            if (_business_config_data && _business_config_data["native_institial_white_easy_click"]) {
                let easy_click_pro = _business_config_data["native_institial_white_easy_click"].value[0];
                if (easy_click_pro > 0 && Math.random() <= easy_click_pro) {
                    this.easy_click = true;
                }
            }
        }
        refresh() {
            this.icon_video.skin = this.native_data.imgUrlList;
            this.txt_title.text = this.native_data.title;
            this.text_desc.text = this.native_data.desc;
            this.report_show();
        }
        hide() {
            if (this.parent) {
                this.removeSelf();
                this.on_hide();
            }
        }
        set_background_on_show() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_sdk_api.on_show(function () {
                    if (self && !self.destroyed) {
                        console.log("igc----- native_interstitial set_background_on_show");
                        self.report_show();
                    }
                });
            }
        }
    }

    class syyx_laya_ui_manager {
        static load_atlas(view_type, call_back) {
            if (!syyx_manager.__game_init_data || !syyx_manager.__game_init_data.auto_load_atlas) {
                call_back && call_back(this.get_view_by_type(view_type));
                return;
            }
            let self = this;
            let view = this.viewMap[view_type];
            if (view && !view.destroyed) {
                call_back && call_back(view);
                return;
            }
            this._atlas_root_path = syyx_manager.__game_init_data.atlas_path;
            let ui_class = this.get_view_class(view_type);
            let atlas_dict = {};
            if (ui_class && ui_class.uiView) {
                for (let i = 0; i < ui_class.uiView.loadList.length; ++i) {
                    let image_path = ui_class.uiView.loadList[i];
                    let atlas_path = image_path.substring(0, image_path.lastIndexOf("/"));
                    if (!atlas_dict[atlas_path]) {
                        atlas_dict[atlas_path] = image_path;
                    }
                }
            }
            let all_count = Object.keys(atlas_dict).length;
            let load_count = 0;
            for (let atlas in atlas_dict) {
                let atlas_name = atlas + ".atlas";
                let atlas_path = this._atlas_root_path + atlas_name;
                if (this._atlas_cache[atlas]) {
                    this._atlas_loading_state[atlas] = false;
                    load_count++;
                    if (load_count == all_count) {
                        call_back && call_back(self.get_view_by_type(view_type));
                    }
                }
                else {
                    if (this._atlas_loading_state[atlas]) {
                        console.log("igc----- syyx_laya_ui_manager atlas is loading , please wait", atlas);
                        return;
                    }
                    this._atlas_loading_state[atlas] = true;
                    syyx_sdk_utils.load_resource(atlas_path, function (data) {
                        self._atlas_loading_state[atlas] = false;
                        if (data) {
                            console.log("igc----- syyx_laya_ui_manager load_atlas success", atlas_name);
                            load_count++;
                            self.save_atlas(atlas);
                            if (load_count == all_count) {
                                call_back && call_back(self.get_view_by_type(view_type));
                            }
                        }
                        else {
                            console.error("igc-----syyx_laya_ui_manager load_atlas fail", atlas_name);
                        }
                    });
                }
            }
        }
        static save_atlas(atlas_path) {
            this._atlas_cache[atlas_path] = 1;
        }
        static get_view_by_type(view_type) {
            let view = this.viewMap[view_type];
            if (!view || view.destroyed) {
                switch (view_type) {
                    case syyx_view.unit:
                        view = new syyx_ui_unit_game();
                        break;
                    case syyx_view.unit_icon:
                        view = new syyx_ui_unit_icon();
                        break;
                    case syyx_view.game_box:
                        view = new syyx_ui_game_box();
                        break;
                    case syyx_view.left_more_game:
                        view = new syyx_ui_left_more_game();
                        break;
                    case syyx_view.right_more_game:
                        view = new syyx_ui_right_more_game();
                        break;
                    case syyx_view.guess_like:
                        view = new syyx_ui_guess_like();
                        break;
                    case syyx_view.native_banner:
                        view = new syyx_ui_banner();
                        break;
                    case syyx_view.inner_interstitial:
                        view = new syyx_ui_inner_interstitial();
                        break;
                    case syyx_view.interstitial:
                        if (Laya.stage.width > Laya.stage.height) {
                            view = new syyx_ui_interstitial_h();
                        }
                        else {
                            view = new syyx_ui_interstitial();
                        }
                        break;
                    case syyx_view.native_icon:
                        view = new syyx_ui_native_icon();
                        break;
                    case syyx_view.congratulations:
                        view = new syyx_ui_congratulations();
                        break;
                    case syyx_view.activity_icon:
                        view = new syyx_ui_activity_icon();
                        break;
                    case syyx_view.activity_enter:
                        view = new syyx_ui_activity_enter();
                        break;
                    case syyx_view.activity_rare:
                        view = new syyx_ui_activity_rare();
                        break;
                    case syyx_view.activity_rob:
                        view = new syyx_ui_activity_rob();
                        break;
                    case syyx_view.activity_bag:
                        view = new syyx_ui_activity_bag();
                        break;
                    case syyx_view.toast:
                        view = new syyx_ui_toast();
                        break;
                    case syyx_view.activity_turntable:
                        view = new syyx_ui_turntable();
                        break;
                    case syyx_view.activity_get_reward:
                        view = new syyx_ui_get_reward();
                        break;
                    case syyx_view.activity_box:
                        view = new syyx_ui_box();
                        break;
                    case syyx_view.red_packet_rain_prepare:
                        view = new syyx_ui_activity_red_packet_rain_prepare();
                        break;
                    case syyx_view.red_packet_rain:
                        view = new syyx_ui_activity_red_packet_rain();
                        break;
                    case syyx_view.red_packet_rain_congratulation:
                        view = new syyx_ui_red_packet_congratulations();
                        break;
                    case syyx_view.user_protocol:
                        view = new syyx_ui_user_protocol();
                        break;
                    case syyx_view.super_power_icon:
                        view = new syyx_ui_super_icon();
                        break;
                    case syyx_view.super_power:
                        if (Laya.stage.height > Laya.stage.width) {
                            view = new syyx_ui_super_power();
                        }
                        else {
                            view = new syyx_ui_super_power_h();
                        }
                        break;
                    default:
                        console.log("igc-----syyx_laya_ui_manager get_view_by_type is not exist type", view_type);
                        break;
                }
                view && (this.viewMap[view_type] = view);
                if (view) {
                    if (syyx_manager._ui_prefab_config && syyx_manager._ui_prefab_config[view_type].laya_auto_scale) {
                        syyx_sdk_utils.set_default_scale(view);
                        console.log("igc----- syyx_laya_ui_manager " + syyx_manager._ui_prefab_config[view_type].name + " auto scale");
                    }
                }
            }
            view.set_default_pos && view.set_default_pos();
            return view;
        }
        static get_view_class(view_type) {
            switch (view_type) {
                case syyx_view.unit:
                    return syyx_ui_unit_game;
                case syyx_view.game_box:
                    return syyx_ui_game_box;
                case syyx_view.left_more_game:
                    return syyx_ui_left_more_game;
                case syyx_view.right_more_game:
                    return syyx_ui_right_more_game;
                case syyx_view.guess_like:
                    return syyx_ui_guess_like;
                case syyx_view.native_banner:
                    return syyx_ui_banner;
                case syyx_view.interstitial:
                    return syyx_ui_interstitial;
                case syyx_view.inner_interstitial:
                    return syyx_ui_inner_interstitial;
                case syyx_view.native_icon:
                    return syyx_ui_native_icon;
                case syyx_view.unit_icon:
                    return syyx_ui_unit_icon;
                case syyx_view.congratulations:
                    return syyx_ui_congratulations;
                case syyx_view.activity_icon:
                    return syyx_ui_activity_icon;
                case syyx_view.activity_enter:
                    return syyx_ui_activity_enter;
                case syyx_view.activity_rare:
                    return syyx_ui_activity_rare;
                case syyx_view.activity_rob:
                    return syyx_ui_activity_rob;
                case syyx_view.activity_bag:
                    return syyx_ui_activity_bag;
                case syyx_view.toast:
                    return syyx_ui_toast;
                case syyx_view.activity_turntable:
                    return syyx_ui_turntable;
                case syyx_view.activity_get_reward:
                    return syyx_ui_get_reward;
                case syyx_view.activity_box:
                    return syyx_ui_box;
                case syyx_view.red_packet_rain_prepare:
                    return syyx_ui_activity_red_packet_rain_prepare;
                case syyx_view.red_packet_rain:
                    return syyx_ui_activity_red_packet_rain;
                case syyx_view.red_packet_rain_congratulation:
                    return syyx_ui_red_packet_congratulations;
                default:
                    console.log("igc-----syyx_laya_ui_manager get_view_class fail", view_type);
                    return undefined;
            }
        }
    }
    syyx_laya_ui_manager._atlas_root_path = "";
    syyx_laya_ui_manager._atlas_cache = {};
    syyx_laya_ui_manager.viewMap = {};
    syyx_laya_ui_manager._atlas_loading_state = {};

    class syyx_red_packet_rain_manager {
        constructor() {
            this.red_packet_info = undefined;
            this._item_config = null;
            this._init_compelete = false;
            this.click_num = 0;
            this.disappear_num = 0;
            this.packet_num = 0;
            this.packet_group = [];
            this.red_packet_item_config_data = null;
            this.rw_num = -1;
        }
        get_data() {
            return this.red_packet_info;
        }
        save() {
            syyx_sdk_utils.set_item("syyx_red_packet_info", this.red_packet_info);
        }
        check_open() {
            let tag = syyx_sdk_api.get_business_data_by_key("open_red_paper_rain")[0] == 1;
            return this._init_compelete && tag;
        }
        add_packet(packet, index) {
            this.packet_group[index] = packet;
        }
        remove_packet(index) {
            this.packet_group[index] = null;
        }
        reset_packet_group() {
            this.packet_group = [];
        }
        rain_stop() {
            for (let i in this.packet_group) {
                if (this.packet_group[i] != null) {
                    this.packet_group[i].pause();
                }
            }
        }
        rain_resume() {
            for (let i in this.packet_group) {
                if (this.packet_group[i] != null) {
                    this.packet_group[i].resume();
                }
            }
        }
        load_activity_config() {
            let self = this;
            syyx_sdk_utils.load_resource(syyx_manager.__activity_red_packet_reward_config, function (data) {
                self._item_config = igc.igc_resources_utils.parse_csv(data, "id");
                console.log("igc-----red packet config is loaded", self._item_config);
                syyx_sdk_utils.load_resource(syyx_manager.__activity_red_packet_reward_item_config, function (data) {
                    self.red_packet_item_config_data = igc.igc_resources_utils.parse_csv(data, "item_id");
                    self.init_activity();
                    self._init_compelete = true;
                    console.log("igc-----red packet item config is loaded", self.red_packet_item_config_data);
                });
            }, this);
        }
        show_banner() {
            syyx_sdk_api.show_banner(e_ad_id.banner_hall, function onLoad(param, res) {
                console.log("igc-----show banner on_load");
            }, function onShow() {
                console.log("igc-----show banner onShow");
            }, function onClose(param, res) {
                console.log("igc-----show banner onClose");
            }, function onError(param, err) {
                console.log("igc-----show banner onError");
            });
        }
        init_activity() {
            let info_list = syyx_sdk_utils.get_item("syyx_red_packet_info");
            if (!info_list) {
                this.red_packet_info = new syyx_red_packet_info();
            }
            else {
                this.red_packet_info = info_list;
            }
            this.save();
        }
        add_click_num() {
            this.click_num++;
            this.disappear_num++;
            if (this.disappear_num == this.packet_num) {
                let red_packet_rain = syyx_laya_ui_manager.get_view_by_type(syyx_view.red_packet_rain);
                red_packet_rain.hide_prepare();
            }
        }
        add_disappear_num() {
            this.disappear_num++;
            if (this.disappear_num == this.packet_num) {
                let red_packet_rain = syyx_laya_ui_manager.get_view_by_type(syyx_view.red_packet_rain);
                red_packet_rain.hide_prepare();
            }
        }
        get_click_num() {
            return this.click_num;
        }
        reset_num() {
            this.packet_num = parseInt(syyx_sdk_api.get_business_data_by_key("red_paper_rain_play_time"));
            this.click_num = 0;
            this.disappear_num = 0;
        }
        check_in_online_cd() {
            let accumulated_time = syyx_sdk_utils.get_item("accumulated_online_time");
            let online_cd = syyx_sdk_api.get_business_data_by_key("red_paper_rain_online_cd");
            if (accumulated_time / 60 >= online_cd) {
                console.log("mijia --- red_packet is not in online cd");
                return false;
            }
            else {
                console.log("mijia --- red_packet is in online cd");
                return true;
            }
        }
        check_in_cd() {
            if (this.red_packet_info.last_timestamp == 0) {
                return false;
            }
            let now_stamp = syyx_sdk_utils.get_date_timestamp();
            let interval = now_stamp - this.red_packet_info.last_timestamp;
            let hours = (interval / (3600 * 1000));
            let cd = syyx_sdk_api.get_business_data_by_key("red_paper_rain_cd");
            if (hours >= cd) {
                return false;
            }
            else {
                return true;
            }
        }
        show_red_packet_prepare_view(call_back) {
            let self = this;
            if (!this.check_open()) {
                return;
            }
            syyx_manager.create_activity_red_packet_prepare(function (view) {
                if (!view.parent) {
                    view.show(call_back);
                }
            });
        }
        show_red_packet_rain_view(call_back) {
            let self = this;
            if (!this.check_open()) {
                return;
            }
            syyx_manager.create_activity_red_packet_rain(function (view) {
                if (!view.parent) {
                    view.show(call_back);
                }
            });
        }
        get_random_reward() {
            let cfg_len = Object.keys(this._item_config).length;
            this.rw_num = syyx_sdk_utils.get_random_number([1, cfg_len]);
            return this._item_config[this.rw_num];
        }
        get_red_packet_reward_config() {
            let item_cfg = this._item_config[this.rw_num];
            let res = [];
            for (var i = 1; i < 20; i++) {
                let reward;
                reward = item_cfg["reward_" + i];
                reward && res.push(reward);
            }
            return res;
        }
        send_first_click_red_packet_event() {
            if (this.click_num == 0) {
                syyx_activity_manager.send_activity_event(e_activity_event_id.click_first_red_packet);
            }
        }
    }

    class syyx_activity_manager {
        static remote_activity_open() {
            let is_open_rare = this.check_activity_open(e_activity_type.rare_treasure);
            let is_open_rob = this.check_activity_open(e_activity_type.rob_treasure);
            let is_open_red = this.check_activity_open(e_activity_type.red_packet_rain);
            return is_open_rare || is_open_red || is_open_rob;
        }
        static check_activity_open(activity_type) {
            let business_config_data = syyx_manager.get_business_config();
            let is_open = false;
            switch (activity_type) {
                case e_activity_type.rare_treasure:
                    if (business_config_data && business_config_data["open_rare_treasure"]) {
                        is_open = business_config_data["open_rare_treasure"].value[0] == 1;
                    }
                    break;
                case e_activity_type.rob_treasure:
                    if (business_config_data && business_config_data["open_rob_treasure"]) {
                        is_open = business_config_data["open_rob_treasure"].value[0] == 1;
                    }
                    break;
                case e_activity_type.rob_turntable:
                    if (business_config_data && business_config_data["open_turntable_activity"]) {
                        is_open = business_config_data["open_turntable_activity"].value[0] == 1;
                    }
                    break;
                case e_activity_type.common_box:
                    if (business_config_data && business_config_data["open_box_activity"]) {
                        is_open = business_config_data["open_box_activity"].value[0] == 1;
                    }
                    break;
                case e_activity_type.red_packet_rain:
                    if (business_config_data && business_config_data["open_red_paper_rain"]) {
                        is_open = business_config_data["open_red_paper_rain"].value[0] == 1;
                    }
                    break;
                default:
                    break;
            }
            return is_open;
        }
        static load_activity_config() {
            let self = this;
            this.__inited = true;
            let data = syyx_sdk_utils.get_item("syyx_game_num");
            this._game_num = data ? data : 0;
            if (this.check_activity_open(e_activity_type.rare_treasure)) {
                this._rare_treasure_instance.load_activity_config();
            }
            else {
                console.log("igc ----- rare treasure activity is close");
            }
            if (this.check_activity_open(e_activity_type.rob_treasure)) {
                this._rob_treasure_instance.load_activity_config();
            }
            else {
                console.log("igc ----- rob treasure activity is close");
            }
            if (this.check_activity_open(e_activity_type.red_packet_rain)) {
                this._red_packet_rain_manager.load_activity_config();
            }
            else {
                console.log("igc ----- red pakcet rain activity is close");
            }
            if (this.check_activity_open(e_activity_type.rob_turntable)) {
                if (!this._common_item_config) {
                    syyx_sdk_utils.load_resource(syyx_manager.__activity_item_config_path, (data) => {
                        this._common_item_config = igc.igc_resources_utils.parse_csv(data, "item_id");
                        this._turntable_instance.load_activity_config();
                    });
                }
            }
            else {
                console.log("igc ----- turntable activity is close");
            }
            if (this.check_activity_open(e_activity_type.common_box)) {
                if (!this._common_item_config) {
                    syyx_sdk_utils.load_resource(syyx_manager.__activity_item_config_path, (data) => {
                        this._common_item_config = igc.igc_resources_utils.parse_csv(data, "item_id");
                        this._box_instance.load_activity_box_config();
                    });
                }
            }
            else {
                console.log("igc ----- common box activity is close");
            }
        }
        static add_game_num(value = undefined) {
            let data = syyx_sdk_utils.get_item("syyx_game_num");
            if (this._game_num == 0) {
                this._game_num = data;
            }
            this._game_num = value ? value : ++this._game_num;
            this._rare_treasure_instance.active_activity(this._game_num);
            this._rob_treasure_instance.active_activity(this._game_num);
            this.save();
        }
        static get_active_game_num(type) {
            if (type == e_activity_type.rare_treasure) {
                return this._rare_treasure_instance.get_active_game_num();
            }
            else if (type == e_activity_type.rob_treasure) {
                return this._rob_treasure_instance.get_active_game_num();
            }
            else {
                return -1;
            }
        }
        static get_cur_game_num() {
            return this._game_num;
        }
        static get_activity_open() {
            this._func_open[e_activity_type.rare_treasure] = this._rare_treasure_instance.check_open();
            this._func_open[e_activity_type.rob_treasure] = this._rob_treasure_instance.check_open();
            this._func_open[e_activity_type.red_packet_rain] = this._red_packet_rain_manager.check_open();
            this._func_open[e_activity_type.rob_turntable] = this._turntable_instance.check_open();
            this._func_open[e_activity_type.common_box] = this._box_instance.check_open();
            return this._func_open;
        }
        static show_treasure_congratulations(config, call_back) {
            syyx_manager.create_congratulations(function (view) {
                if (!view.parent) {
                    view.show(config, call_back);
                }
            });
        }
        static show_red_packet_congratulations(config, call_back) {
            let self = this;
            syyx_manager.create_activity_red_packet_congratulation(function (view) {
                if (!view.parent) {
                    let is_win;
                    if (self._red_packet_rain_manager.get_click_num() > 0) {
                        is_win = true;
                    }
                    else {
                        is_win = false;
                    }
                    view.show(config, call_back, is_win);
                }
            });
        }
        static show_get_reward(config, call_back) {
            syyx_manager.create_activity_get_reward(function (view) {
                if (!view.parent) {
                    view.show(config, call_back);
                }
            });
        }
        static send_activity_event(event_id, extra = "") {
            syyx_manager.send_user_event(event_id, e_activity_event_type.activity, "", "", extra + "", "", "", "", "");
        }
        static save() {
            syyx_sdk_utils.set_item("syyx_game_num", this._game_num);
        }
        static is_inited() {
            return this.__inited;
        }
    }
    syyx_activity_manager._func_open = {};
    syyx_activity_manager._game_num = 0;
    syyx_activity_manager._common_item_config = null;
    syyx_activity_manager._rare_treasure_instance = new syyx_rare_treasure_manager();
    syyx_activity_manager._rob_treasure_instance = new syyx_rob_treasure_manager();
    syyx_activity_manager._turntable_instance = new syyx_turntable_manager();
    syyx_activity_manager._box_instance = new syyx_box_manager();
    syyx_activity_manager._red_packet_rain_manager = new syyx_red_packet_rain_manager();
    syyx_activity_manager.__inited = false;

    class syyx_super_power_manager {
        static load_super_power_config() {
            let cur_super_version = syyx_manager.get_app_version();
            let key = syyx_manager.get_syyx_app_id() + this.__super_power_version;
            let last_super_power_version = localStorage.getItem(key);
            if (cur_super_version != last_super_power_version) {
                localStorage.removeItem(syyx_const.local_super_power_data);
                localStorage.setItem(syyx_const.local_super_power_version, null);
                localStorage.setItem(key, cur_super_version);
                console.log("igc----- app_version change clear super_power localStorage");
            }
            let super_power_data;
            if (cur_super_version == last_super_power_version && (super_power_data = localStorage.getItem(syyx_const.local_super_power_data))) {
                this.super_power_data = JSON.parse(super_power_data);
                console.log("igc----- load_super_power_config use old super_power_config 1");
            }
            let super_version = localStorage.getItem(syyx_const.local_super_power_version);
            igc.igc_main.instance.tpf_sdk.getTpfConfig().httpGetconfig(syyx_const.remote_super_power_key, super_version, Date.now(), this.on_load_super_power.bind(this));
        }
        static on_load_super_power(ret, key, version, data) {
            if (ret === true) {
                this.super_power_data = JSON.parse(data);
                localStorage.setItem(syyx_const.local_super_power_version, version);
                localStorage.setItem(syyx_const.local_super_power_data, data);
                this.__remote_super_power_inited = true;
                this.power_test_compelete = false;
                localStorage.setItem("power_test_compelete", "0");
            }
            else {
                let save_data = localStorage.getItem(syyx_const.local_super_power_data);
                if (save_data) {
                    this.__remote_super_power_inited = true;
                    console.log("igc----- load_super_power_config use old super_power_config 2");
                }
            }
            if (!this.super_power_data || this.super_power_data["test_switch"] != 1) {
                this.power_test_compelete = localStorage.getItem("power_test_compelete") == "1";
            }
        }
        static set_power_test_compelete() {
            if (!this.super_power_data || this.super_power_data["test_switch"] != 1) {
                this.create_super_power_icon(function (view) {
                    view && view.hide && view.hide();
                });
                this.create_super_power(function (view) {
                    view && view.hide && view.hide();
                });
                this.power_test_compelete = true;
                localStorage.setItem("power_test_compelete", "1");
            }
        }
        static create_super_power_icon(call_back) {
            if (!this.power_test_compelete) {
                syyx_manager.create_view(syyx_view.super_power_icon, call_back);
            }
        }
        static create_super_power(call_back) {
            if (!this.power_test_compelete) {
                syyx_manager.create_view(syyx_view.super_power, call_back);
            }
        }
        static get_icon_role_list() {
            let list = this.super_power_data["role_icon"];
            if (list && list.length > 0) {
                return list;
            }
            return [];
        }
        static get_icon_list() {
            let list = [];
            let list1 = this.super_power_data["icon_list"];
            for (let i in list1) {
                list.push(list1[i]);
            }
            if (list && list.length > 0) {
                let cur_list = list;
                if (!this.is_open_six_icon_model()) {
                    cur_list = list.splice(0, 3);
                }
                if (this.is_order_list()) {
                    return cur_list;
                }
                let random_list = syyx_sdk_utils.shuffle(cur_list);
                return random_list;
            }
            return [];
        }
        static get_name_list() {
            let list = this.super_power_data["name_list"];
            if (list && list.length > 0) {
                if (this.is_order_list()) {
                    return list;
                }
                let random_list = syyx_sdk_utils.shuffle(list);
                return random_list;
            }
            return [];
        }
        static get_name_icon() {
            return this.super_power_data["name_icon"];
        }
        static get_start_icon() {
            let list = this.super_power_data["start_icon"];
            if (list && list.length > 0) {
                return list[Math.floor(Math.random() * list.length)];
            }
            return {};
        }
        static get_select_result(icon_id = undefined, name_id = undefined) {
            let result_list = this.super_power_data["icon_name_result"];
            for (let i in result_list) {
                if (icon_id && name_id) {
                    if (result_list[i].selection[0] == icon_id) {
                        return result_list[i];
                    }
                }
                else if (icon_id) {
                    if (result_list[i].selection[0] == icon_id) {
                        return result_list[i];
                    }
                }
                else {
                    if (result_list[i].selection[1] == name_id) {
                        return result_list[i];
                    }
                }
            }
            return result_list[result_list.length - 1];
        }
        static is_open() {
            if (!this.super_power_data) {
                return false;
            }
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["open_switch"] == 1) {
                return true;
            }
            return false;
        }
        static is_open_icon_test() {
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["icon_switch"] == 1) {
                return true;
            }
            return false;
        }
        static is_order_list() {
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["is_order"] == 1) {
                return true;
            }
            return false;
        }
        static is_open_name_test() {
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["name_switch"] == 1) {
                return true;
            }
            return false;
        }
        static is_open_six_icon_model() {
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["six_model_switch"] == 1) {
                return true;
            }
            return false;
        }
        static is_show_close_btn() {
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["show_close_btn"] == 1) {
                return true;
            }
            return false;
        }
        static is_test_model() {
            let switch_config = this.super_power_data;
            if (switch_config && switch_config["test_switch"] == 1) {
                return true;
            }
            return false;
        }
        static get_super_power_config() {
            return this.super_power_data;
        }
        static send_super_power_event(event_id, extra = "") {
            syyx_manager.send_user_event(event_id, e_syyx_sdk_point_type.super_power, "", "", extra + "", "", "", "", "");
        }
    }
    syyx_super_power_manager.__super_power_version = "__super_power_version";
    syyx_super_power_manager.__remote_super_power_inited = false;
    syyx_super_power_manager.super_power_data = null;
    syyx_super_power_manager.power_test_compelete = false;

    class syyx_manager {
        static init(init_config_path = null, init_callback) {
            let self = this;
            let path = init_config_path;
            if (!init_config_path) {
                path = this.__game_init_file_path;
            }
            let channel_type;
            if (window['qq']) {
                channel_type = igc.e_channel_type.qq;
            }
            else if (window["hbs"]) {
                channel_type = igc.e_channel_type.hw_qg;
            }
            else if (window["tt"]) {
                channel_type = igc.e_channel_type.tt;
            }
            else if (window["qg"] && !window["hbs"]) {
                let qg = window["qg"];
                let provider = qg.getProvider();
                if (provider == "OPPO") {
                    channel_type = igc.e_channel_type.oppo_qg;
                }
                else if (provider == "vivo") {
                    channel_type = igc.e_channel_type.vivo_qg;
                }
                else if (window["hbs"]) {
                    channel_type = igc.e_channel_type.hw_qg;
                }
            }
            else if (window["wx"]) {
                channel_type = igc.e_channel_type.wx;
            }
            else if (window["loadingView"]) {
                channel_type = igc.e_channel_type.apk;
            }
            else {
                channel_type = igc.e_channel_type.web;
            }
            syyx_const.syyx_sdk_channel = channel_type;
            this.syyx_sdk_channel_type = channel_type;
            console.log("igc-----channel type 1.web 2.oppo 4.vivo 5.qq 7.apk  8.tt  ------->channel ：", channel_type);
            syyx_sdk_utils.load_resource(path, data => {
                console.log("igc-----syyx_game_init.json", data);
                if (syyx_const.syyx_sdk_publish === e_syyx_sdk_publish_type.out) {
                    if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg) {
                        init_config.oppo_qg.app_id = data.syyx_app_id;
                        init_config.oppo_qg.app_version = data.channel[channel_type].app_version;
                        init_config.oppo_qg.pkg_name = data.channel[channel_type].pkg_name;
                        init_config.oppo_qg.stat_key = data.stat_key;
                        init_config.oppo_qg.configAppSecKey = data.config_key;
                    }
                    else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.vivo_qg) {
                        init_config.vivo_qg.app_id = data.syyx_app_id;
                        init_config.vivo_qg.app_version = data.channel[channel_type].app_version;
                        init_config.vivo_qg.pkg_name = data.channel[channel_type].pkg_name;
                        init_config.vivo_qg.stat_key = data.stat_key;
                        init_config.vivo_qg.configAppSecKey = data.config_key;
                    }
                    else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.tt) {
                        init_config.tt.app_id = data.syyx_app_id;
                        init_config.tt.app_version = data.channel[channel_type].app_version;
                        init_config.tt.pkg_name = data.channel[channel_type].pkg_name;
                        init_config.tt.stat_key = data.stat_key;
                        init_config.tt.configAppSecKey = data.config_key;
                    }
                    else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.qq) {
                        init_config.qq.app_id = data.syyx_app_id;
                        init_config.qq.app_version = data.channel[channel_type].app_version;
                        init_config.qq.pkg_name = data.channel[channel_type].pkg_name;
                        init_config.qq.stat_key = data.stat_key;
                        init_config.qq.configAppSecKey = data.config_key;
                    }
                    else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.wx) {
                        init_config.wx.app_id = data.syyx_app_id;
                        init_config.wx.app_version = data.channel[channel_type].app_version;
                        init_config.wx.pkg_name = data.channel[channel_type].pkg_name;
                        init_config.wx.stat_key = data.stat_key;
                        init_config.wx.configAppSecKey = data.config_key;
                    }
                    else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                        console.log("进入hw");
                        init_config.hw_qg.app_id = data.syyx_app_id;
                        init_config.hw_qg.channel_app_id = data.channel[channel_type].channel_app_id;
                        init_config.hw_qg.app_version = data.channel[channel_type].app_version;
                        init_config.hw_qg.pkg_name = data.channel[channel_type].pkg_name;
                        init_config.hw_qg.stat_key = data.stat_key;
                        init_config.hw_qg.configAppSecKey = data.config_key;
                    }
                    else {
                        init_config.web.app_id = data.syyx_app_id;
                        init_config.web.app_version = "123";
                        init_config.web.pkg_name = "123";
                        init_config.web.stat_key = data.stat_key;
                        init_config.web.configAppSecKey = data.config_key;
                    }
                    igc.igc_main.instance.init_wrap(syyx_const.syyx_sdk_channel, init_config);
                }
                self.__syyx_app_id = data.syyx_app_id;
                self.__game_init_data = data;
                self.__multual_push_file_path = data.multual_push_file_path;
                self.__business_config_file_path = data.business_config_file_path;
                self.__adv_config_file_path = data.adv_config_file_path;
                self.__rob_treasure_config_path = data.rob_treasure_config_path;
                self.__rob_treasure_reward_config_path = data.rob_treasure_reward_config_path;
                self.__rare_treasure_config_path = data.rare_treasure_config_path;
                self.__activity_item_config_path = data.activity_item_config_path;
                self.__activity_turntable_config_path = data.activity_turntable_config_path;
                self.__activity_box_reward_config_path = data.activity_box_reward_config_path;
                self.__activity_box_first_reward_config_path = data.activity_box_first_reward_config_path;
                self.__ui_prefab_config_path = data.ui_prefab_config_path;
                self.__activity_red_packet_reward_config = data.red_packet_rain_reward_confg_path;
                self.__activity_red_packet_reward_item_config = data.red_packet_rain_reward_item_config_path;
                self.__init_callback = init_callback;
                if (self.__init_callback) {
                    console.log("igc ----- game_init.json has loaded");
                    Laya.timer.loop(1000, self, self.set_accumulated_online_time);
                    self.__init_callback(true, { business_config: null, load_init_complete: true, load_local_complete: false, load_remote_complete: false });
                }
                self.load_config();
            }, this);
        }
        static set_accumulated_online_time() {
            let cur = syyx_sdk_utils.get_item("accumulated_online_time");
            if (!cur) {
                syyx_sdk_utils.set_item("accumulated_online_time", 1);
            }
            else {
                cur += 1;
                syyx_sdk_utils.set_item("accumulated_online_time", cur);
            }
        }
        static get_app_version() {
            let channel_type = syyx_const.syyx_sdk_channel + "";
            let version = "";
            if (this.__game_init_data && this.__game_init_data.channel[channel_type]) {
                version = this.__game_init_data.channel[channel_type].app_version;
            }
            else {
                version = "0.0.0.0";
                console.error("igc----- can not find app_version in syyx_game_init.json");
                console.error("igc----- channel_type  ", channel_type);
            }
            return version;
        }
        static get_app_pkg_name() {
            let channel_type = syyx_const.syyx_sdk_channel + "";
            let pkg_name = "";
            if (this.__game_init_data && this.__game_init_data.channel[channel_type]) {
                pkg_name = this.__game_init_data.channel[channel_type].pkg_name;
            }
            else {
                console.error("igc----- can not find pkg_name in syyx_game_init.json");
                console.error("igc----- channel_type  ", channel_type);
            }
            return pkg_name;
        }
        static get_syyx_app_id() {
            return this.__syyx_app_id || "";
        }
        static get_is_new_player() {
            return this.__is_new_player || 0;
        }
        static get_user_id() {
            return this.__user_id || "";
        }
        static init_remote_config_compelete() {
            if (this.__local_multual_push_inited == true && this.__local_business_config_inited == true && !this.init_completed_tag) {
                syyx_adv_manager.load_adv_config();
                this.check_unit_icon_protect_cd();
                syyx_adv_manager.init_first_banner_cd();
                this.__inited = true;
                if (this.__init_callback) {
                    this.init_completed_tag = true;
                    console.log("igc ----- local data has been back");
                    this.__init_callback(true, { business_config: this.__business_config_data, load_init_complete: false, load_local_complete: true, load_remote_complete: false });
                }
            }
            else if (this.__remote_business_config_inited && this.__remote_multual_push_inited && !this.refresh_completed_tag) {
                syyx_adv_manager.load_adv_config();
                this.check_unit_icon_protect_cd();
                syyx_adv_manager.init_first_banner_cd();
                this.__inited = true;
                if (this.__init_callback) {
                    this.refresh_completed_tag = true;
                    console.log("igc ----- remote data has been back");
                    this.__init_callback(true, { business_config: this.__business_config_data, load_init_complete: false, load_local_complete: false, load_remote_complete: true });
                }
            }
        }
        static use_local_business_config() {
            this.use_local_business_config_tag = true;
        }
        static check_user_start_game_type() {
            let is_old_player = localStorage.getItem("is_old_player");
            this.__is_new_player = is_old_player != "1";
            if (is_old_player == "1") {
                console.log("igc----- old bird--------------");
            }
            else {
                console.log("igc----- new fish--------------");
                localStorage.setItem("is_old_player", "1");
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                return;
            }
            let options = this.get_launch_options_sync();
            if (options && options.query) {
                if (options.query.type == igc.e_share_type.card || options.query.type == igc.e_share_type.record) {
                    let event_id = is_old_player == "1" ? igc.e_share_event_id.old_player : igc.e_share_event_id.new_player;
                    this.send_user_event(event_id, igc.e_share_event_type.share, 0, 0, options.query.type + "");
                }
            }
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg && options) {
                if (options.referrerInfo && options.referrerInfo.extraData && options.referrerInfo.extraData.userId) {
                    let user_id = options.referrerInfo.extraData.userId;
                    let view = options.referrerInfo.extraData.pushView || "1";
                    let last_pkg_name = options.referrerInfo.package;
                    let last_app_id = options.referrerInfo.extraData.syyxAppId;
                    let is_new = this.__is_new_player ? 1 : 0;
                    this.send_user_event(view, e_syyx_sdk_point_type.multual_push_game_enter_game, "", last_pkg_name, "", last_app_id + "", "", is_new, user_id + "");
                }
            }
        }
        static check_unit_icon_protect_cd() {
            let self = this;
            if (this.__is_new_player) {
                if (this.__business_config_data["unit_icon_protect_cd"] && this.__business_config_data["unit_icon_protect_cd"].value[0] > 0) {
                    this.__unit_icon_protect = true;
                    let cd = this.__business_config_data["unit_icon_protect_cd"].value[0];
                    this.unit_icon_timer_id && clearTimeout(this.unit_icon_timer_id);
                    this.unit_icon_timer_id = setTimeout(function () {
                        self.__unit_icon_protect = false;
                        self.create_uniticon(function (view) {
                            if (!view.parent) {
                                view.auto_show();
                            }
                        });
                    }, cd * 1000);
                }
            }
        }
        static init_param(account, user_id) {
            if (account == "" || account == undefined || user_id == "" || user_id == undefined) {
                console.error("igc----- init_param user_id is undefined!");
                return;
            }
            if (this.has_init_param) {
                return;
            }
            else {
                this.has_init_param = true;
            }
            this.__user_id = user_id + "";
            igc.stat_manager.instance.set_uid(account, user_id, "1");
            let save = localStorage.getItem("syyx_igc_uid" + igc.igc_main.instance.app_config.game_param.app_id);
            if (save && save != "") {
                this.send_user_login();
            }
            else {
                this.send_user_register();
                Laya.timer.once(1000, this, this.send_user_login);
                localStorage.setItem("syyx_igc_uid" + igc.igc_main.instance.app_config.game_param.app_id, user_id);
            }
            this.check_user_start_game_type();
            this.set_stat_inited();
        }
        static is_inited() {
            return this.__inited;
        }
        static is_ready() {
            return this.appData != null;
        }
        static is_open(viewType) {
            if (syyx_const.syyx_sdk_channel == igc.e_channel_type.web) {
                return true;
            }
            let is_push = this.is_push(viewType);
            if (!is_push)
                return true;
            if (syyx_const.syyx_sdk_channel !== igc.e_channel_type.oppo_qg) {
                return false;
            }
            return this.func_open[viewType];
        }
        static is_push(viewType) {
            switch (viewType) {
                case syyx_view.game_box:
                case syyx_view.unit:
                case syyx_view.unit_icon:
                case syyx_view.guess_like:
                case syyx_view.left_more_game:
                case syyx_view.right_more_game:
                    return true;
                default:
                    return false;
            }
        }
        static send_user_register() {
            igc.stat_manager.instance.send_user_register();
        }
        static send_user_event(event_id, event_type, place_id, place_type, extra, str1, str2, extra2, str3) {
            if (!this.__stat_inited) {
                this.__stat_data_cache.unshift({
                    "event_id": event_id,
                    "event_type": event_type,
                    "place_id": place_id,
                    "place_type": place_type,
                    "extra": extra,
                    "str1": str1,
                    "str2": str2,
                    "extra2": extra2,
                    "str3": str3,
                });
                console.error("igc----- stat manager is not init or init fail!");
                console.error("igc----- please use syyx_sdk_api.init_param  or  wait syyx_sdk_api.login_channel call_back");
                return;
            }
            igc.stat_manager.instance.send_user_event(event_id, event_type, place_id, place_type, extra, str1, str2, extra2, str3);
        }
        static set_stat_inited() {
            if (!this.__is_stat_delay) {
                let self = this;
                this.__is_stat_delay = true;
                setTimeout(function () {
                    self.__stat_inited = true;
                    self.send_stat_event_cache();
                }, 1000);
            }
        }
        static send_stat_event_cache() {
            if (this.__stat_data_cache && this.__stat_data_cache.length > 0) {
                let self = this;
                let stat_data = this.__stat_data_cache.pop();
                igc.stat_manager.instance.send_user_event(stat_data.event_id, stat_data.event_type, stat_data.place_id, stat_data.place_type, stat_data.extra, stat_data.str1, stat_data.str2, stat_data.extra2, stat_data.str3);
                setTimeout(function () {
                    self.send_stat_event_cache();
                }, 100);
            }
        }
        static hide(viewType) {
            this.load_view(viewType, function (view) {
                view.hide && view.hide();
            });
        }
        static hide_all_push_view() {
            for (let idx in this._ui_prefab_config) {
                if (this._ui_prefab_config[idx].ad_type && ad_type.multual_push == this._ui_prefab_config[idx].ad_type) {
                    this.hide(this._ui_prefab_config[idx].id);
                }
            }
        }
        static show(viewType, zOrder = -1, scene, chapter = 0) {
            this.load_view(viewType, function (view) {
                view.show(zOrder, scene, chapter);
            });
        }
        static send_user_login() {
            igc.stat_manager.instance.send_user_login();
        }
        static on_load_mutual(ret, key, version, data) {
            if (ret === true) {
                this.appData = JSON.parse(data);
                localStorage.setItem(syyx_const.local_multual_push_version, version);
                localStorage.setItem(syyx_const.local_multual_push_data, data);
            }
            else {
                let save_data = localStorage.getItem(syyx_const.local_multual_push_data);
                if (save_data) {
                    console.log("有版本互推数据缓存");
                }
            }
            this.__remote_multual_push_inited = true;
            this.init_remote_config_compelete();
        }
        static set_auto_scale(view, need_tag) {
            this.need_auto_scale[view] = need_tag;
            console.log("igc----- " + this._ui_prefab_config[view].name + "自动缩放已被设置" + need_tag);
        }
        static parse_fun_open(configs) {
            let support_game_box = this.support_game_box();
            let is_use_in_1076 = true;
            if (this.__business_config_data && this.__business_config_data["is_use_multual_push_in_1076"]) {
                is_use_in_1076 = this.__business_config_data["is_use_multual_push_in_1076"].value[0] == 1;
                console.log("igc-----the switch of  quickapp use old multual push in 1076 or not is ", is_use_in_1076);
            }
            let is_open = !support_game_box || (support_game_box && is_use_in_1076);
            if (configs.multual_push_open_guess) {
                this.func_open[syyx_view.guess_like] = Boolean(configs.multual_push_open_guess.value[0]) && is_open;
            }
            if (configs.multual_push_open_side) {
                this.func_open[syyx_view.left_more_game] = Boolean(configs.multual_push_open_side.value[0]) && is_open;
            }
            if (configs.multual_push_open_side) {
                this.func_open[syyx_view.right_more_game] = Boolean(configs.multual_push_open_side.value[0]) && is_open;
            }
            if (configs.multual_push_open_button) {
                this.func_open[syyx_view.unit] = Boolean(configs.multual_push_open_button.value[0]) && is_open;
            }
            if (configs.multual_push_open_icon) {
                this.func_open[syyx_view.unit_icon] = Boolean(configs.multual_push_open_icon.value[0]);
            }
            if (configs.multual_push_open_popular) {
                this.func_open[syyx_view.game_box] = Boolean(configs.multual_push_open_popular.value[0]) && is_open;
            }
        }
        static on_load_game_configs(ret, key, version, data) {
            if (this.use_local_business_config_tag) {
                ret = false;
            }
            if (ret == true) {
                this.remote_business_config_data = igc.igc_resources_utils.parse_csv(data, "id");
                console.log("remote config data is ");
                console.log(this.remote_business_config_data);
                localStorage.setItem(syyx_const.local_business_config_version, version);
                syyx_sdk_utils.replace_data(this.__business_config_data, this.remote_business_config_data);
                let temp = JSON.stringify(this.__business_config_data);
                localStorage.setItem(syyx_const.local_business_config_data, temp);
                this.parse_fun_open(this.__business_config_data);
                this.__remote_business_config_inited = true;
                syyx_activity_manager.load_activity_config();
            }
            else {
                let save_data = localStorage.getItem(syyx_const.local_business_config_data);
                if (save_data) {
                    this.__remote_business_config_inited = true;
                }
            }
            this.init_remote_config_compelete();
        }
        static load_config() {
            this.load_ui_config();
        }
        static load_ui_config() {
            let self = this;
            syyx_sdk_utils.load_resource(syyx_manager.__ui_prefab_config_path, function (data) {
                self._ui_prefab_config = igc.igc_resources_utils.parse_csv(data, "id");
                console.log("igc-----ui prefabs have loaded", self._ui_prefab_config);
                self.load_multual_push_config();
                self.load_business_config();
                syyx_super_power_manager.load_super_power_config();
                if (self._ui_prefab_config) {
                    for (let idx in self._ui_prefab_config) {
                        if (window["Laya"]) {
                            self.need_auto_scale[self._ui_prefab_config[idx].id] = self._ui_prefab_config[idx].laya_auto_scale;
                        }
                        else {
                            self.need_auto_scale[self._ui_prefab_config[idx].id] = self._ui_prefab_config[idx].cocos_auto_scale;
                        }
                    }
                }
            }, this, function () {
                console.log("igc-----ui prefabs loading failed");
                self.load_multual_push_config();
                self.load_business_config();
                syyx_super_power_manager.load_super_power_config();
            });
        }
        static load_multual_push_config() {
            let self = this;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg) {
                if (this.syyx_sdk_multual_push_open == false) {
                    this.__local_multual_push_inited = true;
                    this.__remote_multual_push_inited = true;
                }
                else {
                    let cur_push_version = this.get_app_version();
                    let key = this.get_syyx_app_id() + this.__multual_push_version;
                    let last_push_version = localStorage.getItem(key);
                    if (cur_push_version != last_push_version) {
                        localStorage.removeItem(syyx_const.local_multual_push_data);
                        localStorage.setItem(syyx_const.local_multual_push_version, null);
                        localStorage.setItem(key, cur_push_version);
                        console.log("igc----- app_version change clear multual_push localStorage");
                    }
                    let multual_data;
                    if (cur_push_version == last_push_version && (multual_data = localStorage.getItem(syyx_const.local_multual_push_data))) {
                        this.appData = JSON.parse(multual_data);
                        this.__local_multual_push_inited = true;
                        this.init_remote_config_compelete();
                    }
                    else {
                        syyx_sdk_utils.load_resource(this.__multual_push_file_path, data => {
                            if (!self.appData) {
                                self.appData = data;
                            }
                            self.__local_multual_push_inited = true;
                            self.init_remote_config_compelete();
                        }, this);
                    }
                    let multual_version = localStorage.getItem(syyx_const.local_multual_push_version);
                    igc.igc_main.instance.tpf_sdk.getTpfConfig().httpGetconfig(syyx_const.remote_multual_push_key, multual_version, Date.now(), this.on_load_mutual.bind(this));
                }
            }
            else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                syyx_sdk_utils.load_resource(this.__multual_push_file_path, data => {
                    if (!self.appData) {
                        self.appData = data;
                    }
                    self.__local_multual_push_inited = true;
                    self.__remote_multual_push_inited = true;
                    self.init_remote_config_compelete();
                }, this);
            }
            else {
                self.__local_multual_push_inited = true;
                self.__remote_multual_push_inited = true;
            }
        }
        static set_multual_push_open(is_open) {
            this.syyx_sdk_multual_push_open = is_open;
        }
        static load_business_config() {
            let business_data;
            let cur_business_version = this.get_app_version();
            let key = this.get_syyx_app_id() + this.__business_version;
            let last_business_version = localStorage.getItem(key);
            if (cur_business_version != last_business_version) {
                localStorage.removeItem(syyx_const.local_business_config_data);
                localStorage.setItem(syyx_const.local_business_config_version, null);
                localStorage.setItem(key, cur_business_version);
                console.log("igc----- app_version change clear business_config localStorage");
            }
            if (cur_business_version == last_business_version && !this.use_local_business_config_tag && (business_data = localStorage.getItem(syyx_const.local_business_config_data))) {
                console.log("igc----- on_load_game_configs -----use the config  in localstorage");
                this.__business_config_data = JSON.parse(business_data);
                this.parse_fun_open(this.__business_config_data);
                this.__local_business_config_inited = true;
                this.init_remote_config_compelete();
                syyx_activity_manager.load_activity_config();
            }
            else {
                this.on_load_local_business_config();
            }
            let business_config_version = localStorage.getItem(syyx_const.local_business_config_version);
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.tt || syyx_const.syyx_sdk_channel === igc.e_channel_type.wx || syyx_const.syyx_sdk_channel === igc.e_channel_type.qq) {
                if (syyx_const.syyx_sdk_channel === igc.e_channel_type.qq) {
                    business_config_version = null;
                }
                igc.igc_main.instance.tpf_sdk.getTpfConfig().httpGetconfigWx(syyx_const.remote_business_config_key, business_config_version, Date.now(), this.on_load_game_configs.bind(this));
            }
            else {
                igc.igc_main.instance.tpf_sdk.getTpfConfig().httpGetconfig(syyx_const.remote_business_config_key, business_config_version, Date.now(), this.on_load_game_configs.bind(this));
            }
        }
        static create_guess_like(call_back) {
            if (!this.get_multual_push_info(syyx_view.guess_like)) {
                console.log("igc----- guess like's data is empty   multual push data is not initialized  do not call interface too early");
                return null;
            }
            return this.create_view(syyx_view.guess_like, call_back);
        }
        static create_gamebox(call_back) {
            if (!this.get_multual_push_info(syyx_view.game_box)) {
                console.log("igc----- game box's data is empty  multual push data is not initialized  do not call interface too early");
                return null;
            }
            return this.create_view(syyx_view.game_box, call_back);
        }
        static create_leftmoregame(call_back) {
            if (!this.get_multual_push_info(syyx_view.left_more_game)) {
                console.log("igc----- more_game data is null  multual push data has not been initialized");
                return null;
            }
            return this.create_view(syyx_view.left_more_game, call_back);
        }
        static create_rightmoregame(call_back) {
            if (!this.get_multual_push_info(syyx_view.right_more_game)) {
                console.log("igc----- more_game data is null  multual push data has not been initialized");
                return null;
            }
            return this.create_view(syyx_view.right_more_game, call_back);
        }
        static create_super_power_icon(call_back) {
            syyx_super_power_manager.create_super_power_icon(call_back);
        }
        static create_super_power(call_back) {
            syyx_super_power_manager.create_super_power(call_back);
        }
        static create_unitgame(call_back) {
            if (!this.get_multual_push_info(syyx_view.unit)) {
                console.log("igc----- unit game'data is empty  multual push data is not initialized  do not call interface too early");
                return null;
            }
            return this.create_view(syyx_view.unit, call_back);
        }
        static create_uniticon(call_back) {
            if (!this.get_multual_push_info(syyx_view.unit)) {
                console.log("igc----- unit icon'data is empty   multual push data is not initialized  do not call interface too early");
                return null;
            }
            return this.create_view(syyx_view.unit_icon, call_back);
        }
        static create_native_banner(call_back) {
            if (!syyx_adv_manager.__adv_config_inited) {
                console.log("igc----- ad initialization is not achieve--->do not call interface too early  :create_native_banner");
                return null;
            }
            return this.create_view(syyx_view.native_banner, call_back);
        }
        static create_inner_interstitial(call_back) {
            if (!syyx_adv_manager.__adv_config_inited) {
                console.log("igc----- ad initialization is not achieve--->do not call interface too early  :create_inner_interstitial");
                return null;
            }
            return this.create_view(syyx_view.inner_interstitial, call_back);
        }
        static create_interstitial(call_back) {
            if (!syyx_adv_manager.__adv_config_inited) {
                console.log("igc----- ad initialization is not achieve--->do not call interface too early  :create_interstitial");
                return null;
            }
            return this.create_view(syyx_view.interstitial, call_back);
        }
        static create_native_icon(call_back) {
            if (!syyx_adv_manager.__adv_config_inited) {
                console.log("igc----- ad initialization is not achieve--->do not call interface too early  :create_native_icon");
                return null;
            }
            return this.create_view(syyx_view.native_icon, call_back);
        }
        static create_congratulations(call_back) {
            return this.create_view(syyx_view.congratulations, call_back);
        }
        static create_user_protocol(call_back) {
            return this.create_view(syyx_view.user_protocol, call_back);
        }
        static create_activity_icon(call_back) {
            if (!syyx_activity_manager._rob_treasure_instance._init_compelete || !syyx_activity_manager._rare_treasure_instance._init_compelete) {
                console.log("igc----- activity is not initialized  do not call interface too earlycreate_activity_icon");
                return null;
            }
            if (syyx_activity_manager.remote_activity_open()) {
                return this.create_view(syyx_view.activity_icon, call_back);
            }
            console.log("igc-----sdk activity remote config is close");
            return null;
        }
        static create_activity_enter(call_back) {
            if (!syyx_activity_manager._rob_treasure_instance._init_compelete || !syyx_activity_manager._rare_treasure_instance._init_compelete) {
                console.log("igc----- activity is not initialized  do not call interface too early: create_activity_enter");
                return null;
            }
            if (syyx_activity_manager.remote_activity_open()) {
                return this.create_view(syyx_view.activity_enter, call_back);
            }
            console.log("igc-----sdk activity remote config is close");
            return null;
        }
        static create_activity_rare(call_back) {
            if (!syyx_activity_manager._rare_treasure_instance._init_compelete) {
                console.log("igc----- activity is not initialized  do not call interface too early: create_activity_enter");
                return null;
            }
            if (syyx_activity_manager.remote_activity_open()) {
                return this.create_view(syyx_view.activity_rare, call_back);
            }
            console.log("igc-----sdk activity remote config is close");
            return null;
        }
        static create_activity_rob(call_back) {
            if (!syyx_activity_manager._rob_treasure_instance._init_compelete) {
                console.log("igc----- activity is not initialized  do not call interface too earlycreate_activity_icon");
                return null;
            }
            if (syyx_activity_manager.remote_activity_open()) {
                return this.create_view(syyx_view.activity_rob, call_back);
            }
            console.log("igc-----sdk activity remote config is close");
            return null;
        }
        static create_activity_bag(call_back) {
            if (syyx_activity_manager.remote_activity_open()) {
                return this.create_view(syyx_view.activity_bag, call_back);
            }
            console.log("igc-----sdk activity remote config is close");
            return null;
        }
        static create_activity_turntable(call_back) {
            return this.create_view(syyx_view.activity_turntable, call_back);
        }
        static create_activity_get_reward(call_back) {
            return this.create_view(syyx_view.activity_get_reward, call_back);
        }
        static create_toast(desc) {
            this.create_view(syyx_view.toast, function (view) {
                view && view.show && view.show(desc);
            });
        }
        static create_activity_box(call_back) {
            return this.create_view(syyx_view.activity_box, call_back);
        }
        static create_activity_red_packet_prepare(call_back) {
            return this.create_view(syyx_view.red_packet_rain_prepare, call_back);
        }
        static create_activity_red_packet_rain(call_back) {
            return this.create_view(syyx_view.red_packet_rain, call_back);
        }
        static create_activity_red_packet_congratulation(call_back) {
            return this.create_view(syyx_view.red_packet_rain_congratulation, call_back);
        }
        static create_view(viewType, call_back) {
            if (!this.is_open(viewType)) {
                console.log("igc-----now this function is cloce : viewType", viewType);
                return null;
            }
            this.load_view(viewType, call_back);
        }
        static load_view(viewType, call_back) {
            if (window["Laya"]) {
                syyx_laya_ui_manager.load_atlas(viewType, function (view) {
                    call_back && call_back(view);
                });
            }
        }
        static get_multual_push_info(viewType) {
            return null;
        }
        static get_business_config() {
            if (!this.__local_business_config_inited && !this.__remote_business_config_inited) {
                return undefined;
            }
            return this.__business_config_data;
        }
        static login_channel(callback) {
            let self = this;
            if (this.has_login_channel) {
                return;
            }
            else {
                this.has_login_channel = true;
            }
            igc.igc_main.instance.only_login_channel(function back(res) {
                if (res && res.channel_user_info && res.channel_user_info.uid) {
                    let save = localStorage.getItem("syyx_igc_uid" + igc.igc_main.instance.app_config.game_param.app_id);
                    if (save && save != "") {
                        self.send_user_login();
                    }
                    else {
                        self.send_user_register();
                        Laya.timer.once(1000, self, self.send_user_login);
                        self.__user_id = res.channel_user_info.uid;
                        localStorage.setItem("syyx_igc_uid" + igc.igc_main.instance.app_config.game_param.app_id, res.channel_user_info.uid);
                    }
                }
                self.check_user_start_game_type();
                self.set_stat_inited();
                callback && callback(res);
            });
        }
        static get_business_data_by_key(key) {
            let business_config_data = syyx_manager.get_business_config();
            if (business_config_data && business_config_data[key]) {
                return business_config_data[key].value;
            }
            return undefined;
        }
        static create_ad(ad_type, ad_pos_id, onLoad, onShow, onClose, onError, sub_ad_type) {
            let top_offset = 0;
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.qq) {
                top_offset = syyx_adv_manager.get_qq_banner_top_offset();
            }
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- syyx_manager create_ad ad_id no configure in adv.csv");
                return;
            }
            let param = {
                ad_type: ad_type,
                ad_id: ad_id,
                ad_pos_id: ad_pos_id,
                ad_event: ad_id,
                ad_scene: ad_id,
                top_offset: top_offset,
                sub_ad_type: sub_ad_type || igc.e_ad_native_type.native_banner_normal,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError
            };
            return igc.igc_main.instance.create_ad(param);
        }
        static show_ad(ad_type, ad_pos_id, onLoad, onShow, onClose, onError, sub_ad_type) {
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- syyx_manager show_ad ad_id no configure in adv.csv");
                return;
            }
            console.log("mijia ---- show_ad " + ad_type);
            let param = {
                ad_type: ad_type,
                ad_id: ad_id,
                ad_pos_id: ad_pos_id,
                ad_event: ad_id,
                ad_scene: ad_id,
                sub_ad_type: sub_ad_type || igc.e_ad_native_type.native_banner_normal,
                onLoad: onLoad,
                onShow: onShow,
                onClose: onClose,
                onError: onError
            };
            return igc.igc_main.instance.show_ad(param);
        }
        static destroy_ad(ad_type, ad_pos_id, sub_ad_type) {
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- syyx_manager destroy_ad ad_id no configure in adv.csv");
                return;
            }
            let param = {
                ad_type: ad_type,
                ad_id: ad_id,
                ad_pos_id: ad_pos_id,
                sub_ad_type: sub_ad_type || igc.e_ad_native_type.native_banner_normal,
                ad_event: ad_id,
                ad_scene: ad_id,
            };
            return igc.igc_main.instance.destroy_ad(param);
        }
        static hide_ad(ad_type, ad_pos_id) {
            let ad_id = syyx_adv_manager.get_channel_ad_id(ad_pos_id);
            if (!ad_id || ad_id == "1" || ad_id == "0") {
                console.log("igc----- syyx_manager hide_ad ad_id no configure in adv.csv");
                return;
            }
            let param = {
                ad_type: ad_type,
                ad_id: ad_id,
                ad_pos_id: ad_pos_id,
                ad_event: ad_id,
                ad_scene: ad_id,
            };
            return igc.igc_main.instance.hide_ad(param);
        }
        static report_native_inner_interstitial_click(ad_pos_id) {
            if (!ad_banner.can_show_first) {
                console.log("igc----- is in oppo first ad cd ");
                return;
            }
            let native_data = this.get_local_native_data(ad_pos_id);
            this.create_inner_interstitial(function (view) {
                if (native_data) {
                    view.report_click();
                }
            });
        }
        static hide_native_inner_interstitial() {
            this.load_view(syyx_view.inner_interstitial, function (view) {
                if (view.parent) {
                    view.hide && view.hide();
                }
            });
        }
        static support_game_box() {
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.oppo_qg) {
                let systeminfo = syyx_manager.get_system_info_sync();
                if (systeminfo && systeminfo.platformVersion) {
                    return systeminfo.platformVersion >= 1076;
                }
            }
            return false;
        }
        static check_can_add_desktop() {
            return igc.igc_main.instance.check_can_add_desktop({});
        }
        static check_is_add_desktop(can_add, has_add) {
            let param = {
                can_add: can_add,
                has_add: has_add
            };
            return igc.igc_main.instance.check_is_add_desktop(param);
        }
        static add_desktop(on_success, on_failed, on_failed_back, has_create) {
            let param = {
                on_success: on_success,
                on_failed: on_failed,
                on_failed_back: on_failed_back,
                has_create: has_create
            };
            return igc.igc_main.instance.add_desktop(param);
        }
        static on_show(callback) {
            return igc.igc_main.instance.on_show({
                on_show: callback
            });
        }
        static on_hide(callback) {
            return igc.igc_main.instance.on_hide({
                on_hide: callback
            });
        }
        static get_system_info_sync() {
            return igc.igc_main.instance.get_system_info_sync();
        }
        static get_launch_options_sync() {
            return igc.igc_main.instance.get_launch_options_sync();
        }
        static exit_mini_program() {
            return igc.igc_main.instance.exit_mini_program();
        }
        static navigate_to_mini_program(app_id, success) {
            let param = {
                app_id: app_id,
                success: success
            };
            return igc.igc_main.instance.navigate_to_mini_program(param);
        }
        static share(title, imageUrl, query, desc, success, fail) {
            let param = {
                title: title,
                imageUrl: imageUrl,
                query: query,
                desc: desc,
                success: success,
                fail: fail
            };
            return igc.igc_main.instance.share(param);
        }
        static on_share_app_message(title, imageUrl) {
            let param = {
                title: title,
                imageUrl: imageUrl
            };
            return igc.igc_main.instance.on_share_app_message(param);
        }
        static start_record_screen(time, is_clip_end, clip_time) {
            let param = {
                time: time,
                is_clip_end: is_clip_end,
                clip_time: clip_time
            };
            return igc.igc_main.instance.start_record_screen(param);
        }
        static stop_record_screen() {
            return igc.igc_main.instance.stop_record_screen();
        }
        static pause_record_screen() {
            return igc.igc_main.instance.pause_record_screen();
        }
        static resume_record_screen() {
            return igc.igc_main.instance.resume_record_screen();
        }
        static share_record_screen(videoTopics, title, desc, imageUrl, query, fail, success) {
            let param = {
                videoTopics: videoTopics,
                title: title,
                desc: desc,
                imageUrl: imageUrl,
                query: query,
                fail: fail,
                success: success,
            };
            return igc.igc_main.instance.share_record_screen(param);
        }
        static get_record_video() {
            return igc.igc_main.instance.get_record_video();
        }
        static on_load_local_business_config() {
            let self = this;
            syyx_sdk_utils.load_resource(this.__business_config_file_path, data => {
                let new_data = igc.igc_resources_utils.parse_csv(data, "id");
                new_data["delat_time_normal"] = {
                    desc: "按钮延迟",
                    id: "delat_time_normal",
                    value: [10]
                };
                new_data["native_icon_switch"] = {
                    desc: "原生icon开关",
                    id: "native_icon_switch",
                    value: [1]
                };
                new_data["native_icon_trap_pro"] = {
                    desc: "原生icon易点击概率",
                    id: "native_icon_trap_pro",
                    value: [1]
                };
                new_data["is_use_multual_push_in_1076"] = {
                    desc: "oppo快应用1076是否显示互推",
                    id: "is_use_multual_push_in_1076",
                    value: [0]
                };
                new_data["banner_cool_time"] = {
                    desc: "banner自动刷新时间",
                    id: "banner_cool_time",
                    value: [20, 20]
                };
                new_data["native_icon_cool_time"] = {
                    desc: " ",
                    id: "native_icon_cool_time",
                    value: [20, 20]
                };
                new_data["adv_banner_cd"] = {
                    desc: "原生及banner广告冷却（秒）",
                    id: "adv_banner_cd",
                    value: [60]
                };
                new_data["banner_top_offset"] = {
                    desc: "手Q渠道普通banner上移距离",
                    id: "banner_top_offset",
                    value: [0, 0]
                };
                new_data["native_banner_open_switch"] = {
                    desc: "是否启用原生banner广告",
                    id: "native_banner_open_switch",
                    value: [1]
                };
                new_data["native_banner_click_switch"] = {
                    desc: "是否启用原生banner易点击处理",
                    id: "native_banner_click_switch",
                    value: [0]
                };
                new_data["native_banner_click_pro"] = {
                    desc: "原生banner易点击触发概率",
                    id: "native_banner_click_pro",
                    value: [0]
                };
                new_data["native_banner_click_protect"] = {
                    desc: "原生banner易点击保护",
                    id: "native_banner_click_protect",
                    value: [3]
                };
                new_data["native_institial_white_easy_click"] = {
                    desc: "原生插屏点击空白跳转",
                    id: "native_institial_white_easy_click",
                    value: [0]
                };
                new_data["native_banner_report_click_update_switch"] = {
                    desc: "原生Banner点击上报后立即刷新",
                    id: "native_banner_report_click_update_switch",
                    value: [1]
                };
                new_data["native_icon_report_click_update_switch"] = {
                    desc: "原生icon点击上报后立即刷新",
                    id: "native_icon_report_click_update_switch",
                    value: [1]
                };
                new_data["native_inner_report_click_update_switch"] = {
                    desc: "结算原生点击上报后立即刷新",
                    id: "native_inner_report_click_update_switch",
                    value: [1]
                };
                new_data["native_interstitial_report_click_update_switch"] = {
                    desc: "原生插屏点击上报后立即刷新",
                    id: "native_interstitial_report_click_update_switch",
                    value: [1]
                };
                new_data["multual_push_open_side"] = {
                    desc: "互推侧边开启",
                    id: "multual_push_open_side",
                    value: [0]
                };
                new_data["multual_push_open_gif"] = {
                    desc: "互推gif开启",
                    id: "multual_push_open_gif",
                    value: [0]
                };
                new_data["multual_push_open_guess"] = {
                    desc: "互推底部开启",
                    id: "multual_push_open_guess",
                    value: [0]
                };
                new_data["multual_push_open_popular"] = {
                    desc: "互推居中开启",
                    id: "multual_push_open_popular",
                    value: [0]
                };
                new_data["multual_push_open_button"] = {
                    desc: "单个互开启钮",
                    id: "multual_push_open_button",
                    value: [0]
                };
                new_data["multual_push_open_icon"] = {
                    desc: "互推icon轮播开启",
                    id: "multual_push_open_icon",
                    value: [0]
                };
                new_data["unit_icon_protect_cd"] = {
                    desc: "icon轮播新手禁止展示时间",
                    id: "unit_icon_protect_cd",
                    value: [60]
                };
                new_data["show_normal_banner_switch"] = {
                    desc: "是否开启展示普通banner",
                    id: "show_normal_banner_switch",
                    value: [1]
                };
                new_data["native_icon_trap_pro"] = {
                    desc: "原生icon易点击概率",
                    id: "native_icon_trap_pro",
                    value: [0]
                };
                new_data["open_rare_treasure"] = {
                    desc: "开启稀世珍宝活动",
                    id: "open_rare_treasure",
                    value: [0]
                };
                new_data["active_rare_treasure_chapter"] = {
                    desc: "激活稀世珍宝所需局数",
                    id: "active_rare_treasure_chapter",
                    value: [5]
                };
                new_data["rare_treasure_forging_time"] = {
                    desc: "稀世珍宝铸造时长（毫秒）",
                    id: "rare_treasure_forging_time",
                    value: [180000]
                };
                new_data["rare_treasure_get_over_time"] = {
                    desc: "稀世珍宝领取时长（毫秒）",
                    id: "rare_treasure_get_over_time",
                    value: [86400000]
                };
                new_data["open_rob_treasure"] = {
                    desc: "开启夺宝奇兵活动",
                    id: "open_rob_treasure",
                    value: [0]
                };
                new_data["active_rob_treasure_chapter"] = {
                    desc: "激活夺宝奇兵所需局数",
                    id: "active_rob_treasure_chapter",
                    value: [3]
                };
                new_data["active_rob_treasure_enter_wait_num"] = {
                    desc: "夺宝奇兵夺宝每N次进入休息状态",
                    id: "active_rob_treasure_enter_wait_num",
                    value: [3]
                };
                new_data["active_rob_treasure_resume_time"] = {
                    desc: "夺宝奇兵休息时长",
                    id: "active_rob_treasure_resume_time",
                    value: [30000]
                };
                new_data["active_rob_treasure_bomb_time"] = {
                    desc: "夺宝奇兵炸弹恢复时间(毫秒)",
                    id: "active_rob_treasure_bomb_time",
                    value: [45000, 90000, 120000]
                };
                new_data["active_rob_treasure_gold_num"] = {
                    desc: "夺宝奇兵获得金币随机范围",
                    id: "active_rob_treasure_gold_num",
                    value: [100, 200]
                };
                new_data["open_turntable_activity"] = {
                    desc: "是否开启幸运转盘",
                    id: "open_turntable_activity",
                    value: [0]
                };
                new_data["turntable_today_max_count"] = {
                    desc: "幸运转盘每日最大抽奖次数",
                    id: "turntable_today_max_count",
                    value: [12]
                };
                new_data["turntable_reset_count"] = {
                    desc: "幸运转盘每X次获得最佳奖励",
                    id: "turntable_reset_count",
                    value: [4]
                };
                new_data["open_box_activity"] = {
                    desc: "是否开启幸运宝箱",
                    id: "open_box_activity",
                    value: [0]
                };
                new_data["finger_close_banner_switch"] = {
                    desc: "关闭Banner后不再展示",
                    id: "finger_close_banner_switch",
                    value: [0, 60]
                };
                new_data["native_inner_institial_click_close_pro"] = {
                    desc: "关闭结算原生易跳转概率",
                    id: "native_inner_institial_click_close_pro",
                    value: [0]
                };
                new_data["native_institial_click_close_pro"] = {
                    desc: "关闭原生插屏易跳转概率",
                    id: "native_institial_click_close_pro",
                    value: [0]
                };
                new_data["more_game_repeat_num"] = {
                    desc: "左右侧更多游戏重复倍数",
                    id: "more_game_repeat_num",
                    value: [0]
                };
                new_data["more_game_three_item_switch"] = {
                    desc: "更多游戏显示三列开关",
                    id: "more_game_three_item_switch",
                    value: [0]
                };
                new_data["open_red_paper_rain"] = {
                    desc: "红包雨活动开关",
                    id: "open_red_paper_rain",
                    value: [0]
                };
                new_data["red_paper_rain_cd"] = {
                    desc: "红包雨活动cd，单位小时",
                    id: "red_paper_rain_cd",
                    value: [0.01]
                };
                new_data["red_paper_rain_online_cd"] = {
                    desc: "红包雨活动在线开启所需cd",
                    id: "red_paper_rain_online_cd",
                    value: [0]
                };
                new_data["red_paper_rain_play_time"] = {
                    desc: "红包雨活动一次时长",
                    id: "red_paper_rain_play_time",
                    value: [10]
                };
                new_data["open_oppo_new_rule"] = {
                    desc: "是否开启oppo新规",
                    id: "open_oppo_new_rule",
                    value: [1]
                };
                new_data["oppo_banner_cool_time"] = {
                    desc: "oppoBanner累计展示刷新时间",
                    id: "oppo_banner_cool_time",
                    value: [[0, 120, 10], [121, 180, 11], [181, 240, 12]]
                };
                new_data["oppo_native_show_limit"] = {
                    desc: "oppo原生展示限制",
                    id: "oppo_native_show_limit",
                    value: [60, 60]
                };
                new_data["oppo_native_cache_length"] = {
                    desc: "oppo原生数据缓存数组长度",
                    id: "oppo_native_cache_length",
                    value: [5]
                };
                new_data["red_paper_rain_video_order_number"] = {
                    desc: "红包雨活动视频广告序号",
                    id: "red_paper_rain_video_order_number",
                    value: [3, 4, 6]
                };
                new_data["red_paper_rain_gold_order_number"] = {
                    desc: "红包雨活动黄金红包序号",
                    id: "red_paper_rain_gold_order_number",
                    value: [5, 9]
                };
                new_data["native_inner_interstitial_switch"] = {
                    desc: "结算原生开关",
                    id: "native_inner_interstitial_switch",
                    value: [1]
                };
                new_data["native_banner_click_pro_limit"] = {
                    desc: "原生banner点击率限制",
                    id: "native_banner_click_pro_limit",
                    value: [1000, 0.4, 60]
                };
                new_data["native_inner_click_pro_limit"] = {
                    desc: "结算原生点击率限制",
                    id: "native_inner_click_pro_limit",
                    value: [1000, 0.4, 60]
                };
                new_data["native_interstitial_click_pro_limit"] = {
                    desc: "原生插屏点击率限制",
                    id: "native_interstitial_click_pro_limit",
                    value: [1000, 0.4, 60]
                };
                new_data["native_interstitial_click_wrap"] = {
                    desc: "原生插屏展示策略",
                    id: "native_interstitial_click_wrap",
                    value: [1000, 2, 5]
                };
                new_data["native_inner_institial_click_wrap"] = {
                    desc: "结算原生展示策略",
                    id: "native_inner_institial_click_wrap",
                    value: [1000, 2, 5]
                };
                new_data["banner_strong_update_switch"] = {
                    desc: "banner强制刷新开关",
                    id: "banner_strong_update_switch",
                    value: [0]
                };
                new_data["native_banner_height_open_rule"] = {
                    desc: "原生banner高度启动规则",
                    id: "native_banner_height_open_rule",
                    value: [1000, 3, 5]
                };
                new_data["native_banner_height_rule"] = {
                    desc: "原生banner高度规则",
                    id: "native_banner_height_rule",
                    value: [200, 200, 1]
                };
                new_data["load_native_interstitial_rule"] = {
                    desc: "原生插屏加载规则（第X次去加载）",
                    id: "load_native_interstitial_rule",
                    value: [3]
                };
                new_data["first_use_natibe_banner"] = {
                    desc: "原生插屏优先使用原生Banner",
                    id: "first_use_natibe_banner",
                    value: [1]
                };
                if (self.__remote_business_config_inited) {
                    syyx_sdk_utils.replace_data(new_data, self.__business_config_data);
                    console.log("igc----- bussiness config is ", new_data);
                    self.__business_config_data = new_data;
                    let temp = JSON.stringify(self.__business_config_data);
                    localStorage.setItem(syyx_const.local_business_config_data, temp);
                    self.parse_fun_open(self.__business_config_data);
                }
                else {
                    self.__business_config_data = new_data;
                    self.parse_fun_open(new_data);
                    console.log("igc-----local bussiness config is ", new_data);
                }
                self.__local_business_config_inited = true;
                self.init_remote_config_compelete();
            }, this);
        }
        static show_video(ad_pos_id, onLoad, onShow, onClose, onError, need_err_tips = false) {
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.web) {
                onClose && onClose(null, { isEnded: true });
                return;
            }
            else if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_manager.show_ad(igc.e_ad_type.video, ad_pos_id, onLoad, onShow, function (param, res) {
                    if (res.isEnded) {
                        syyx_sdk_api.send_other_event(ad_pos_id, igc.igc_stat_ids.video_compelete);
                    }
                    else {
                        syyx_sdk_api.send_other_event(ad_pos_id, igc.igc_stat_ids.video_uncompelete);
                    }
                    onClose && onClose(param, res);
                }, function () {
                    need_err_tips && syyx_manager.create_toast("目前暂时无广告，请稍后再试");
                    onError && onError();
                });
            }
            else {
                syyx_manager.create_ad(igc.e_ad_type.video, ad_pos_id, onLoad, onShow, function (param, res) {
                    if (res.isEnded) {
                        syyx_sdk_api.send_other_event(ad_pos_id, igc.igc_stat_ids.video_compelete);
                    }
                    else {
                        syyx_sdk_api.send_other_event(ad_pos_id, igc.igc_stat_ids.video_uncompelete);
                    }
                    onClose && onClose(param, res);
                }, function () {
                    need_err_tips && syyx_manager.create_toast("目前暂时无广告，请稍后再试");
                    onError && onError();
                });
            }
        }
        static show_interstitial(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_manager.create_ad(igc.e_ad_type.interstitial, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static preload_video() {
            if (syyx_const.syyx_sdk_channel === igc.e_channel_type.hw_qg) {
                syyx_manager.create_ad(igc.e_ad_type.video, e_ad_id.video_add_gold, () => { }, () => { }, () => { }, () => { });
            }
        }
        static pre_load_game_portal_box(ad_pos_id, onLoad, onShow, onClose, onError) {
            let self = this;
            if (this.support_game_box()) {
                self.create_ad(igc.e_ad_type.app_box, ad_pos_id, null, null, function () {
                    onClose && onClose();
                    setTimeout(function () {
                        self.pre_load_game_portal_box(ad_pos_id, null, null, null, null);
                    }, 500);
                }, null, igc.e_ad_app_box_type.portal_box);
            }
        }
        static show_game_portal_box(ad_pos_id, onLoad, onShow, onClose, onError, need_err_tips = false) {
            let self = this;
            this.show_ad(igc.e_ad_type.app_box, ad_pos_id, onLoad, onShow, function () {
                onClose && onClose();
                setTimeout(function () {
                    self.pre_load_game_portal_box(ad_pos_id, null, null, null, null);
                }, 500);
            }, function () {
                need_err_tips && syyx_manager.create_toast("努力加载中，请稍后再试");
                onError && onError();
            }, igc.e_ad_app_box_type.portal_box);
        }
        static report_ad_show(ad_pos_id, native_data) {
            return syyx_adv_manager.report_ad_show(ad_pos_id, native_data);
        }
        static show_native_inner_interstitial(ad_pos_id, parent, click_back, show_back, hide_back, is_new_type = true) {
            if (!ad_banner.can_show_first) {
                console.log("igc----- is in oppo first ad cd ");
                return;
            }
            let native_data = this.get_local_native_data(ad_pos_id);
            this.create_inner_interstitial(function (view) {
                if (native_data) {
                    view.show(parent, native_data, click_back, show_back, hide_back, is_new_type);
                }
            });
        }
        static click_native_inner_interstitial(call_back) {
            this.create_inner_interstitial(function (view) {
                if (view && view.parent) {
                    view.report_click();
                }
                else {
                    call_back && call_back();
                }
            });
        }
        static get_local_native_data(ad_pos_id) {
            return syyx_adv_manager.get_local_native_data(ad_pos_id);
        }
        static get_channel_ad_id(ad_pos_id) {
            return syyx_adv_manager.get_channel_ad_id(ad_pos_id);
        }
        static show_banner(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_adv_manager.show_banner(igc.e_ad_type.banner, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_banner() {
            syyx_adv_manager.hide_banner();
        }
        static report_ad_click(ad_pos_id, native_data) {
            return syyx_adv_manager.report_ad_click(ad_pos_id, native_data);
        }
        static send_multual_push_show_event(push_type) {
            let syyx_app_id = syyx_manager.get_syyx_app_id();
            let user_id = syyx_manager.get_user_id();
            this.send_user_event(push_type, e_syyx_sdk_point_type.multual_push_show, "", "", "", syyx_app_id + "", "", "", user_id + "");
        }
        static send_multual_push_item_show_event(push_type, position, target_app_name, target_app_id) {
            let syyx_app_id = syyx_manager.get_syyx_app_id();
            let user_id = syyx_manager.get_user_id();
            this.send_user_event(push_type, e_syyx_sdk_point_type.multual_push_game_show, position + "", "", target_app_name, syyx_app_id + "", target_app_id + "", "", user_id + "");
        }
        static send_multual_push_click_event(push_type, position, target_app_name, target_app_id, pkg_name) {
            let syyx_app_id = syyx_manager.get_syyx_app_id();
            let user_id = syyx_manager.get_user_id();
            this.send_user_event(push_type, e_syyx_sdk_point_type.multual_push_game_click, position + "", pkg_name, target_app_name, syyx_app_id + "", target_app_id + "", "", user_id + "");
        }
    }
    syyx_manager.__syyx_app_id = 0;
    syyx_manager.viewMap = {};
    syyx_manager.func_open = {};
    syyx_manager.need_auto_scale = {};
    syyx_manager.__is_mutual_ready = false;
    syyx_manager.__is_func_open_ready = false;
    syyx_manager.syyx_sdk_channel_type = 2;
    syyx_manager.syyx_sdk_multual_push_open = true;
    syyx_manager.__multual_push_file_path = "";
    syyx_manager.__game_init_file_path = "";
    syyx_manager.__business_config_file_path = "";
    syyx_manager.__adv_config_file_path = "";
    syyx_manager.__rob_treasure_config_path = "";
    syyx_manager.__rob_treasure_reward_config_path = "";
    syyx_manager.__rare_treasure_config_path = "";
    syyx_manager.__activity_item_config_path = "";
    syyx_manager.__activity_turntable_config_path = "";
    syyx_manager.__activity_box_reward_config_path = "";
    syyx_manager.__activity_box_first_reward_config_path = "";
    syyx_manager.__activity_red_packet_reward_config = "";
    syyx_manager.__activity_red_packet_reward_item_config = "";
    syyx_manager.__multual_push_version = "__multual_push_version";
    syyx_manager.__business_version = "__business_version";
    syyx_manager.__init_callback = undefined;
    syyx_manager.has_init_param = false;
    syyx_manager.has_login_channel = false;
    syyx_manager.__game_init_data = undefined;
    syyx_manager.__multual_push_data = {};
    syyx_manager.__local_multual_push_inited = false;
    syyx_manager.__remote_multual_push_inited = false;
    syyx_manager.__business_config_data = {};
    syyx_manager.__local_business_config_inited = false;
    syyx_manager.__remote_business_config_inited = false;
    syyx_manager.remote_business_config_data = null;
    syyx_manager.__is_new_player = false;
    syyx_manager.__unit_icon_protect = false;
    syyx_manager.use_local_business_config_tag = false;
    syyx_manager.init_completed_tag = false;
    syyx_manager.refresh_completed_tag = false;
    syyx_manager.__stat_inited = false;
    syyx_manager.__is_stat_delay = false;
    syyx_manager.__stat_data_cache = [];
    syyx_manager.unit_icon_timer_id = undefined;
    syyx_manager.__user_id = "";

    class syyx_sdk_api {
        static init(game_init_file_path = null, init_callback) {
            console.log("igc--------------------syyx_apk version" + syyx_const.syyx_sdk_version);
            syyx_manager.init(game_init_file_path, init_callback);
        }
        static use_local_business_config() {
            syyx_manager.use_local_business_config();
        }
        static login_channel(callback) {
            syyx_manager.login_channel(callback);
        }
        static init_param(account, user_id) {
            syyx_manager.init_param(account, user_id);
        }
        static set_multual_push_open(is_open) {
            syyx_manager.set_multual_push_open(true);
        }
        static get_business_data_by_key(key) {
            return syyx_manager.get_business_data_by_key(key);
        }
        static send_user_register() {
            syyx_manager.send_user_register();
        }
        static send_user_login() {
            syyx_manager.send_user_login();
        }
        static send_user_event(event_id, event_type, place_id, place_type, extra, str1, str2, extra2, str3) {
            syyx_manager.send_user_event(event_id, event_type, place_id, place_type, extra, str1, str2, extra2, str3);
        }
        static send_hall_event(event_id, extra2 = 0, str1 = "") {
            syyx_manager.send_user_event(event_id, e_stat_event_type.hall, "", "", "", str1, "", extra2, "");
        }
        static send_chapter_event(event_id, is_win = undefined, str1 = "") {
            let extra = is_win ? e_chapter_result_type.win : e_chapter_result_type.lose;
            if (is_win == true) {
                extra = e_chapter_result_type.win;
            }
            else if (is_win == false) {
                extra = e_chapter_result_type.lose;
            }
            else {
                extra = e_chapter_result_type.enter_chapter;
            }
            syyx_manager.send_user_event(event_id, e_stat_event_type.chapter, "", "", extra, str1, "", "", "");
        }
        static send_settlement_event(event_id, extra = "", str1 = "") {
            syyx_manager.send_user_event(event_id, e_stat_event_type.result, "", "", extra, str1, "", "", "");
        }
        static send_other_event(event_id, event_type, extra = "", extra2 = "", str1 = "", str2 = "", str3 = "") {
            syyx_manager.send_user_event(event_id, event_type, "", "", extra, str1, str2, extra2, str3);
        }
        static is_inited() {
            return syyx_manager.is_inited();
        }
        static is_open(viewType) {
            return syyx_manager.is_open(viewType);
        }
        static create_super_power_icon(call_back) {
            return syyx_manager.create_super_power_icon(call_back);
        }
        static create_super_power(call_back) {
            return syyx_manager.create_super_power(call_back);
        }
        static create_unitgame(call_back) {
            return syyx_manager.create_unitgame(call_back);
        }
        static create_uniticon(call_back) {
            return syyx_manager.create_uniticon(call_back);
        }
        static create_guess_like(call_back) {
            return syyx_manager.create_guess_like(call_back);
        }
        static create_gamebox(call_back) {
            return syyx_manager.create_gamebox(call_back);
        }
        static create_leftmoregame(call_back) {
            return syyx_manager.create_leftmoregame(call_back);
        }
        static create_rightmoregame(call_back) {
            return syyx_manager.create_rightmoregame(call_back);
        }
        static create_native_banner(call_back) {
            return syyx_manager.create_native_banner(call_back);
        }
        static create_interstitial(call_back) {
            return syyx_manager.create_interstitial(call_back);
        }
        static create_inner_interstitial(call_back) {
            return syyx_manager.create_inner_interstitial(call_back);
        }
        static create_native_icon(call_back) {
            return syyx_manager.create_native_icon(call_back);
        }
        static create_toast(desc) {
            return syyx_manager.create_toast(desc);
        }
        static create_activity_turntable(call_back) {
            return syyx_manager.create_activity_turntable(call_back);
        }
        static set_turntable_growth_coefficient(value) {
            syyx_activity_manager._turntable_instance.set_growth_coefficient(value);
        }
        static create_activity_box(call_back) {
            return syyx_manager.create_activity_box(call_back);
        }
        static hide(viewType) {
            syyx_manager.hide(viewType);
        }
        static hide_all_push_view() {
            syyx_manager.hide_all_push_view();
        }
        static show(viewType, zOrder = -1, scene, chapter = 0) {
            syyx_manager.show(viewType, zOrder, scene, chapter);
        }
        static load_view(viewType, call_bcak) {
            return syyx_manager.load_view(viewType, call_bcak);
        }
        static create_ad(ad_type, ad_pos_id, onLoad, onShow, onClose, onError) {
            return false;
        }
        static destroy_ad(ad_type, ad_pos_id) {
            return syyx_manager.destroy_ad(ad_type, ad_pos_id);
        }
        static hide_ad(ad_type, ad_pos_id) {
            return syyx_manager.hide_ad(ad_type, ad_pos_id);
        }
        static report_ad_show(ad_pos_id, native_data) {
            return syyx_manager.report_ad_show(ad_pos_id, native_data);
        }
        static report_ad_click(ad_pos_id, native_data) {
            return syyx_manager.report_ad_click(ad_pos_id, native_data);
        }
        static get_local_native_data(ad_pos_id) {
            return syyx_manager.get_local_native_data(ad_pos_id);
        }
        static get_channel_ad_id(ad_pos_id) {
            return syyx_manager.get_channel_ad_id(ad_pos_id);
        }
        static show_banner(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_manager.show_banner(ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_banner() {
            syyx_manager.hide_banner();
        }
        static set_banner_height() {
            syyx_adv_manager.set_banner_height();
        }
        static set_normal_banner_switch(value = true) {
            syyx_adv_manager.set_normal_banner_switch(value);
        }
        static show_video(ad_pos_id, onLoad, onShow, onClose, onError, need_err_tips) {
            syyx_manager.show_video(ad_pos_id, onLoad, onShow, onClose, onError, need_err_tips);
        }
        static show_interstitial(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_manager.show_interstitial(ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static show_native_interstitial(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_adv_manager.show_native_interstitial(igc.e_ad_type.native, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_native_interstitial() {
            ad_native_interstitial.hide_native_interstitial_ui();
        }
        static preload_native_inner_interstitial(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_adv_manager.preload_native_inner_interstitial(igc.e_ad_type.native, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static show_native_inner_interstitial(ad_pos_id, parent, click_back, show_back, hide_back, is_new_type = true) {
            syyx_manager.show_native_inner_interstitial(ad_pos_id, parent, click_back, show_back, hide_back, is_new_type);
        }
        static click_native_inner_interstitial() {
            syyx_manager.click_native_inner_interstitial();
        }
        static set_on_click_inner_interstitial_btn(click_back) {
            syyx_adv_manager.set_on_click_inner_interstitial_btn(click_back);
        }
        static hide_native_inner_interstitial() {
            syyx_manager.hide_native_inner_interstitial();
        }
        static show_native_icon(parent, ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_adv_manager.show_native_icon(parent, igc.e_ad_type.native, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_native_icon() {
            syyx_adv_manager.hide_native_icon();
        }
        static support_game_box() {
            return syyx_manager.support_game_box();
        }
        static show_game_banner_box(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_manager.create_ad(igc.e_ad_type.app_box, ad_pos_id, onLoad, onShow, onClose, onError, igc.e_ad_app_box_type.banner_box);
        }
        static hide_game_banner_box(ad_pos_id) {
            syyx_manager.destroy_ad(igc.e_ad_type.app_box, ad_pos_id, igc.e_ad_app_box_type.banner_box);
        }
        static pre_load_game_portal_box(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_manager.pre_load_game_portal_box(ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static show_game_portal_box(ad_pos_id, onLoad, onShow, onClose, onError, need_err_tips) {
            syyx_manager.show_game_portal_box(ad_pos_id, onLoad, onShow, onClose, onError, need_err_tips);
        }
        static show_app_box(ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_manager.create_ad(igc.e_ad_type.app_box, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static show_block(style, ad_pos_id, onLoad, onShow, onClose, onError) {
            syyx_adv_manager.show_block(style, igc.e_ad_type.block, ad_pos_id, onLoad, onShow, onClose, onError);
        }
        static hide_block(ad_pos_id) {
            syyx_adv_manager.hide_block(ad_pos_id);
        }
        static hide_all_block() {
            syyx_adv_manager.hide_all_block();
        }
        static show_user_protocol(call_back) {
            if (localStorage.getItem("syyx_sdk_need_protocol") == "0") {
                console.error("hw-- user protocol callback directly");
                call_back && call_back();
                return;
            }
            syyx_manager.create_user_protocol(function (view) {
                if (!view.parent) {
                    view.show(call_back);
                }
                else {
                    view.hide();
                }
            });
        }
        static create_congratulations(call_back) {
            return syyx_manager.create_congratulations(call_back);
        }
        static create_activity_icon(call_back) {
            return syyx_manager.create_activity_icon(call_back);
        }
        static create_activity_enter(call_back) {
            return syyx_manager.create_activity_enter(call_back);
        }
        static create_activity_rare(call_back) {
            return syyx_manager.create_activity_rare(call_back);
        }
        static create_activity_rob(call_back) {
            return syyx_manager.create_activity_rob(call_back);
        }
        static create_activity_bag(call_back) {
            return syyx_manager.create_activity_bag(call_back);
        }
        static add_game_num(chapter) {
            return syyx_activity_manager.add_game_num(chapter);
        }
        static check_can_add_desktop() {
            return syyx_manager.check_can_add_desktop();
        }
        static check_is_add_desktop(can_add, has_add) {
            return syyx_manager.check_is_add_desktop(can_add, has_add);
        }
        static add_desktop(on_success, on_failed, on_failed_back, has_create) {
            return syyx_manager.add_desktop(on_success, on_failed, on_failed_back, has_create);
        }
        static on_show(callback) {
            return syyx_manager.on_show(callback);
        }
        static on_hide(callback) {
            return syyx_manager.on_hide(callback);
        }
        static get_system_info_sync() {
            return syyx_manager.get_system_info_sync();
        }
        static get_launch_options_sync() {
            let options = syyx_manager.get_launch_options_sync();
            let data = new launch_options();
            data.scene = options.scene || "";
            data.query = options.query || {};
            data.referrerInfo = options.referrerInfo || {};
            data.entryDataHash = options.entryDataHash || {};
            data.extra = options.extra || {};
            return data;
        }
        static exit_mini_program() {
            return syyx_manager.exit_mini_program();
        }
        static navigate_to_mini_program(app_id, succss) {
            return syyx_manager.navigate_to_mini_program(app_id, succss);
        }
        static share(title, imageUrl, query, desc, success, fail) {
            return syyx_manager.share(title, imageUrl, query, desc, success, fail);
        }
        static on_share_app_message(title, imageUrl) {
            return syyx_manager.on_share_app_message(title, imageUrl);
        }
        static start_record_screen(time, is_clip_end, clip_time) {
            return syyx_manager.start_record_screen(time, is_clip_end, clip_time);
        }
        static stop_record_screen() {
            return syyx_manager.stop_record_screen();
        }
        static pause_record_screen() {
            return syyx_manager.pause_record_screen();
        }
        static resume_record_screen() {
            return syyx_manager.resume_record_screen();
        }
        static share_record_screen(videoTopics, title, desc, imageUrl, query, fail, success) {
            return syyx_manager.share_record_screen(videoTopics, title, desc, imageUrl, query, fail, success);
        }
        static get_record_video() {
            return syyx_manager.get_record_video();
        }
        static set_auto_scale(view, need_tag) {
            syyx_manager.set_auto_scale(view, need_tag);
        }
        static get_is_new_player() {
            return syyx_manager.get_is_new_player();
        }
        static get_syyx_app_id() {
            return syyx_manager.get_syyx_app_id();
        }
        static get_screen_ratio() {
            if (window["Laya"]) {
                if (Laya.stage.width > Laya.stage.height) {
                    return window["Laya"].stage.height / 1080;
                }
                else {
                    return window["Laya"].stage.width / 1080;
                }
            }
            return 1;
        }
    }

    class SyyxConfig {
    }
    SyyxConfig.pushInterstitial = [2, 1];
    SyyxConfig.pushTry = [2, 1];
    SyyxConfig.nativeBannerHeight = [300, 1, 5];

    class SyyxSdkUtils {
        constructor() {
            this.qg = Laya.Browser.window.qg;
            this.isShowBanner = false;
            this.callInterstitialCount = 0;
            this.mIsShowingVideo = false;
            this.EVENT_HALL = 0;
            this.EVENT_CHAPTER = 1;
            this.EVENT_SETTLEMENT = 2;
            this.EVENT_ID_DESKTOP_CLICK = 10020;
            this.EVENT_ID_CLICK_NATIVE_AD = 10021;
        }
        login() { }
        init(params, callback) {
            let self = this;
            let isInit = false;
            syyx_sdk_api.init("3rd/syyx_game_init.json", function (ret, param) {
                if (ret === true) {
                    if (param.load_init_complete) {
                        syyx_sdk_api.login_channel(function (res) {
                        });
                    }
                    if (param.load_local_complete) {
                        console.log("本地配置", param);
                        self.initComplete();
                        Laya.timer.once(2000, self, function () {
                            syyx_sdk_api.pre_load_game_portal_box(e_ad_id.game_portal_box, function () {
                                console.log("--------加载成功");
                            }, function () {
                                console.log("--------展示成功");
                            }, function () {
                                console.log("--------关闭成功");
                            }, function (err) {
                                console.log("--------加载失败", err);
                            });
                        });
                    }
                    if (param.load_remote_complete) {
                        console.log("远端配置", param);
                        self.initComplete();
                    }
                    if (!isInit) {
                        isInit = true;
                        callback();
                    }
                }
            }.bind(this));
            if (SdkCenter.getInstannce().isOppo() || SdkCenter.getInstannce().isVivo()) {
                this.mPlatform = Laya.Browser.window.qg;
            }
            else if (SdkCenter.getInstannce().isWx()) {
                this.mPlatform = Laya.Browser.window.wx;
            }
            else if (SdkCenter.getInstannce().isTT()) {
                this.mPlatform = Laya.Browser.window.tt;
            }
            else if (SdkCenter.getInstannce().isBd()) {
                this.mPlatform = Laya.Browser.window.bd;
            }
            else {
                return;
            }
            this.mPlatform.onShow(function () {
                if (self.mIsShowingVideo) {
                    return;
                }
                if (self.mOnShowCallback) {
                    self.mOnShowCallback();
                }
            });
            this.mPlatform.onHide(function () {
                if (self.mOnHideCallback) {
                    self.mOnHideCallback();
                }
            });
        }
        initSyyxConfig() {
            let pushInterstitialConfig = syyx_sdk_api.get_business_data_by_key("push_interstitial");
            if (pushInterstitialConfig) {
                SyyxConfig.pushInterstitial = pushInterstitialConfig;
            }
            let delayConfig = syyx_sdk_api.get_business_data_by_key("btn_delay_time_native_get");
            if (delayConfig) {
                SyyxConfig.btnDelayTime = delayConfig[0] * 1000;
            }
            let openPower = syyx_sdk_api.get_business_data_by_key("control_oppo");
            if (openPower) {
                UserGD.openPower = (openPower[0] == 1) ? true : false;
                Utils.dispatchEvent(SelfGameConfig.EVENT_INIT_NAV_AD_PROGRESS, true);
            }
            let pushTry = syyx_sdk_api.get_business_data_by_key("push_try");
            if (pushTry) {
                SyyxConfig.pushTry = pushTry;
            }
            let nativeBannerHeight = syyx_sdk_api.get_business_data_by_key("native_banner_height");
            if (nativeBannerHeight) {
                SyyxConfig.nativeBannerHeight = JSON.parse(JSON.stringify(nativeBannerHeight));
                console.log("SyyxConfig.nativeBannerHeight: ", SyyxConfig.nativeBannerHeight);
            }
        }
        initComplete() {
            this.initSyyxConfig();
        }
        setLoadingProgress(progress) {
        }
        loadSubpackage(nameArr, success, fail) {
            console.log("-----------加载分包", nameArr);
            if (SdkCenter.getInstannce().isOppo()) {
                if (nameArr) {
                    this.recursionLoadSubpackage(0, nameArr, function (code) {
                        console.log("加载回调code", code);
                        if (code == -1 && fail) {
                            fail();
                            console.log("加载失败");
                        }
                        else if (success) {
                            success();
                            console.log("加载成功");
                        }
                    });
                }
            }
            else if (SdkCenter.getInstannce().isVivo()) {
                console.log("vivo加载分包");
                if (nameArr) {
                    this.recursionLoadSubpackage(0, nameArr, function (code) {
                        console.log("加载回调code", code);
                        if (code == -1 && fail) {
                            fail();
                            console.log("加载失败");
                        }
                        else if (success) {
                            success();
                            console.log("加载成功");
                        }
                    });
                }
            }
            else {
                success();
            }
        }
        vibrateShort(success, fail, complete) {
            if (SdkCenter.getInstannce().isOppo() || SdkCenter.getInstannce().isVivo()) {
                this.qg.vibrateShort(success, fail, complete);
            }
        }
        vibrateLong(success, fail, complete) {
            if (SdkCenter.getInstannce().isOppo() || SdkCenter.getInstannce().isVivo()) {
                this.qg.vibrateLong(success, fail, complete);
            }
        }
        onShow(callback) {
            this.mOnShowCallback = callback;
        }
        onHide(callback) {
            this.mOnHideCallback = callback;
        }
        showToast(title, icon, img) {
            syyx_sdk_api.create_toast(title);
        }
        hideToast() {
        }
        showLoading(title) {
        }
        hideLoading() {
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            onTap(null);
        }
        postMessage(message) {
        }
        showModal(modalInfo) {
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
        }
        showRewardedVideoAd(adUnitId, onSuccess, onErrorF, onCancel) {
            var self = this;
            var id = adUnitId != null ? adUnitId : e_ad_id.video_add_gold;
            syyx_sdk_api.show_video(id, function onLoad(param, res) {
            }, function onShow() {
                if (SdkCenter.getInstannce().isVivo()) {
                    self.mIsShowingVideo = true;
                    self.mOnHideCallback();
                }
            }, function onClose(param, res) {
                if (res.isEnded) {
                    if (onSuccess) {
                        onSuccess();
                    }
                }
                else {
                    self.showToast("未看完视频无法领取奖励");
                    if (onCancel) {
                        onCancel();
                    }
                }
                if (SdkCenter.getInstannce().isVivo()) {
                    self.mIsShowingVideo = false;
                    self.mOnShowCallback();
                }
            }, function onError(param, err) {
                console.log("------------------视频播放失败");
                self.showToast("视频加载失败，请稍后再试");
                if (onErrorF) {
                    onErrorF();
                }
                if (SdkCenter.getInstannce().isVivo()) {
                    self.mIsShowingVideo = false;
                    self.mOnShowCallback();
                }
            });
        }
        isShowingRewardedVideoAd() {
            return false;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
            syyx_sdk_api.on_share_app_message(title, imageUrl);
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
            syyx_sdk_api.on_share_app_message(title, imageUrl);
        }
        getSystemInfoSync() {
            let info = syyx_sdk_api.get_system_info_sync();
            let systemInfo = new SystemInfo();
            if (SdkCenter.getInstannce().isVivo()) {
                if (Laya.stage.width > Laya.stage.height) {
                    systemInfo.windowHeight = info.windowWidth;
                    systemInfo.windowWidth = info.windowHeight;
                    systemInfo.screenWidth = info.screenHeight;
                    systemInfo.screenHeight = info.screenWidth;
                }
                else {
                    systemInfo.windowHeight = info.windowHeight;
                    systemInfo.windowWidth = info.windowWidth;
                    systemInfo.screenWidth = info.screenWidth;
                    systemInfo.screenHeight = info.screenHeight;
                }
            }
            else {
                systemInfo.windowHeight = info.windowHeight;
                systemInfo.windowWidth = info.windowWidth;
                systemInfo.screenWidth = info.screenWidth;
                systemInfo.screenHeight = info.screenHeight;
            }
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
        }
        showBanner(adUnitId) {
            let self = this;
            if (this.isShowBanner) {
                return;
            }
            console.log("展示banner", adUnitId ? adUnitId : "");
            this.isShowBanner = true;
            syyx_sdk_api.show_banner(e_ad_id.banner_hall, function onLoad(param, res) {
            }, function onShow() {
            }, function onClose(param, res) {
            }, function onError(param, err) {
            });
        }
        hideBanner(adUnitId) {
            console.log("隐藏banner");
            this.isShowBanner = false;
            syyx_sdk_api.hide_banner();
        }
        destroyBanner(adUnitId) {
        }
        setBannerPos(pos) {
        }
        createInterstitialAd(adUnitId, onClose) {
            return null;
        }
        preloadNativeInnerInterstitial() {
            let self = this;
            syyx_sdk_api.preload_native_inner_interstitial(e_ad_id.native_inner_interstitial_success, function onLoad(param, res) {
            }, function onShow() {
            }, function onClose(param, res) {
            }, function onError(param, err) {
            });
        }
        checkInnerInterstitialNative() {
            if (syyx_sdk_api.get_local_native_data(e_ad_id.native_inner_interstitial_success)) {
                return true;
            }
            else {
                return false;
            }
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            var self = this;
            let native_data = syyx_sdk_api.get_local_native_data(e_ad_id.native_inner_interstitial_success);
            if (native_data) {
                syyx_sdk_api.show_native_inner_interstitial(e_ad_id.native_inner_interstitial_success, parent, function () {
                    if (clickCallback) {
                        clickCallback();
                    }
                }, function () {
                    self.hideBanner();
                    if (showCallback) {
                        showCallback();
                    }
                }, function () {
                    if (hideCallback) {
                        hideCallback();
                    }
                });
                return true;
            }
            else {
                return false;
            }
        }
        hideInnerInterstitialNative() {
            let native_data = syyx_sdk_api.get_local_native_data(e_ad_id.native_inner_interstitial_success);
            if (native_data) {
                syyx_sdk_api.hide_native_inner_interstitial();
            }
        }
        showInterstitialAd(adUnitId, onShowCallback, onCloseCallback, onErrorCallback, isMask) {
            this.callInterstitialCount++;
            var isShowBanner = this.isShowBanner;
            if (isMask === false) {
                syyx_sdk_api.show_interstitial(e_ad_id.interstitial_hall, function onLoad(param, res) {
                }, function onShow() {
                    if (isShowBanner) {
                        SdkCenter.getInstannce().hideBanner();
                    }
                    if (onShowCallback) {
                        onShowCallback();
                    }
                }, function onClose(param, res) {
                    if (isShowBanner) {
                        SdkCenter.getInstannce().showBanner();
                    }
                    if (onCloseCallback) {
                        onCloseCallback();
                    }
                }, function onError(param, res) {
                    if (onErrorCallback) {
                        onErrorCallback();
                    }
                });
            }
            else {
                if (this.callInterstitialCount >= SyyxConfig.pushInterstitial[0]) {
                    if ((this.callInterstitialCount == SyyxConfig.pushInterstitial[0]) ||
                        ((this.callInterstitialCount - SyyxConfig.pushInterstitial[0]) % (SyyxConfig.pushInterstitial[1] + 1) == 0)) {
                        syyx_sdk_api.show_native_interstitial(e_ad_id.native_interstitial_hall, function onLoad(param, res) {
                        }, function onShow() {
                            SdkCenter.getInstannce().hideBanner();
                            if (onShowCallback) {
                                onShowCallback();
                            }
                        }, function onClose(param, res) {
                            if (isShowBanner) {
                                SdkCenter.getInstannce().showBanner();
                            }
                            if (onCloseCallback) {
                                onCloseCallback();
                            }
                        }, function onError(param, err) {
                        });
                    }
                    else {
                        if (onErrorCallback) {
                            onErrorCallback();
                        }
                    }
                }
                else {
                    if (onErrorCallback) {
                        onErrorCallback();
                    }
                }
            }
        }
        clickNativeAd() {
            this.aldSendEvent(this.EVENT_ID_CLICK_NATIVE_AD, 1);
            syyx_sdk_api.click_native_inner_interstitial();
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
            var self = this;
            syyx_sdk_api.add_desktop(function () {
                self.aldSendEvent(self.EVENT_ID_DESKTOP_CLICK, "1");
                console.log("创建完成");
                Laya.timer.once(1000, self, function () {
                    syyx_sdk_api.check_is_add_desktop(() => {
                        self.aldSendEvent(self.EVENT_ID_DESKTOP_CLICK, "4");
                        console.log("创建失败");
                        if (onFail) {
                            onFail();
                        }
                        if (onComplete) {
                            onComplete();
                        }
                    }, () => {
                        console.log("创建");
                        self.aldSendEvent(self.EVENT_ID_DESKTOP_CLICK, "3");
                        if (onSuccess) {
                            onSuccess();
                        }
                        if (onComplete) {
                            onComplete();
                        }
                    });
                });
            }, function () {
                if (onFail) {
                    onFail();
                }
                if (onComplete) {
                    onComplete();
                }
            }, function () {
                if (onFail) {
                    onFail();
                }
                if (onComplete) {
                    onComplete();
                }
            }, function () {
                if (onFail) {
                    onFail();
                }
                if (onComplete) {
                    onComplete();
                }
            });
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
            if (syyx_sdk_api.check_can_add_desktop()) {
                syyx_sdk_api.check_is_add_desktop(function () {
                    if (onSuccess) {
                        onSuccess();
                    }
                }, function () {
                    if (onFail) {
                        onFail();
                    }
                });
            }
            else {
                if (onFail) {
                    onFail();
                }
            }
        }
        navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion) {
            if (success) {
                success();
            }
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        recursionLoadSubpackage(index, nameArr, callback) {
            var self = this;
            console.log(nameArr[index]);
            console.log("分包数量", nameArr.length);
            var subLen = nameArr.length;
            if (index == subLen) {
                callback();
            }
            else {
                var platform = null;
                if (SdkCenter.getInstannce().isOppo() || SdkCenter.getInstannce().isVivo()) {
                    platform = Laya.Browser.window.qg;
                }
                else if (SdkCenter.getInstannce().isWx()) {
                    platform = Laya.Browser.window.wx;
                }
                else if (SdkCenter.getInstannce().isTT()) {
                    platform = Laya.Browser.window.tt;
                }
                else if (SdkCenter.getInstannce().isBd()) {
                    platform = Laya.Browser.window.bd;
                }
                platform.loadSubpackage({
                    name: nameArr[index],
                    success: function (res) {
                        console.log("-----------分包加载成功", res);
                        self.recursionLoadSubpackage(++index, nameArr, callback);
                    },
                    fail: function (res) {
                        console.log("------------分包加载失败", res);
                        Laya.timer.frameOnce(3, self, function () {
                            self.recursionLoadSubpackage(index, nameArr, callback);
                        });
                    }
                });
            }
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
            let self = this;
            syyx_sdk_api.show_banner(e_ad_id.banner_hall, function onLoad(param, res) {
            }, function onShow() {
            }, function onClose(param, res) {
            }, function onError(param, err) {
            });
        }
        hideNativeBanner() {
            syyx_sdk_api.hide_banner();
        }
        exitGame() {
        }
        showAppBox(onClose) {
        }
        hideAppBox() {
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        isSupportGamesModal() {
            return syyx_sdk_api.support_game_box();
        }
        showGameBannerBox() {
            let self = this;
            let isShowBanner = this.isShowBanner;
            syyx_sdk_api.show_game_banner_box(e_ad_id.game_banner_box, function onLoad(param, res) {
            }, function onShow() {
                self.hideBanner();
            }, function onClose(param, res) {
                if (self.isShowBanner) {
                    self.showBanner();
                }
            }, function onError(param, err) {
            });
        }
        hideGameBannerBox() {
            let self = this;
            syyx_sdk_api.hide_game_banner_box(e_ad_id.game_banner_box);
        }
        showMoreGamesModal() {
            if (syyx_sdk_api.support_game_box()) {
                var self = this;
                var isShowBanner = this.isShowBanner;
                syyx_sdk_api.show_game_portal_box(e_ad_id.game_portal_box, function onLoad(param, res) {
                    console.log("igc-----show show_portal_box on_load:" + JSON.stringify(res));
                }, function onShow() {
                    console.log("igc-----show show_portal_box onShow");
                    self.hideBanner();
                }, function onClose() {
                    console.log("igc-----show show_portal_box onClose");
                    if (isShowBanner) {
                        self.showBanner();
                    }
                }, function onError(param, err) {
                    self.showToast("九宫格加载失败，请稍后再试");
                });
            }
        }
        aldSendEvent(eventType, eventId, extra) {
            switch (eventType) {
                case this.EVENT_HALL:
                    if (extra) {
                        syyx_sdk_api.send_hall_event(eventId, extra.costTime);
                    }
                    else {
                        syyx_sdk_api.send_hall_event(eventId);
                    }
                    break;
                case this.EVENT_CHAPTER:
                    if (extra) {
                        var str1 = "";
                        if (extra.str1) {
                            str1 = extra.str1;
                        }
                        syyx_sdk_api.send_chapter_event(eventId, extra.result, str1);
                    }
                    else {
                        syyx_sdk_api.send_chapter_event(eventId);
                    }
                    break;
                case this.EVENT_SETTLEMENT:
                    if (extra) {
                        var lv = "";
                        var str1 = "";
                        if (extra.lv) {
                            lv = extra.lv;
                        }
                        if (extra.str1) {
                            str1 = extra.str1;
                        }
                        syyx_sdk_api.send_settlement_event(eventId, lv, str1);
                    }
                    else {
                        syyx_sdk_api.send_settlement_event(eventId);
                    }
                    break;
                default:
                    if (extra) {
                        var extraData = "";
                        var str1 = "";
                        var str2 = "";
                        var extra2 = "";
                        if (extra.extra !== null && extra !== undefined) {
                            extraData = extra.extra;
                        }
                        if (extra.str1) {
                            str1 = extra.str1;
                        }
                        if (extra.str2) {
                            str2 = extra.str2;
                        }
                        if (extra.extra2) {
                            extra2 = extra.extra2;
                        }
                        syyx_sdk_api.send_other_event(eventId, eventType, extraData, extra2, str1, str2, "");
                    }
                    else {
                        syyx_sdk_api.send_other_event(eventId, eventType);
                    }
                    break;
            }
        }
        getUserInfo() {
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        getCloseDelayTime() {
            return SyyxConfig.btnDelayTime;
        }
        requestSubscribeMessage(success, fail) {
        }
        aldStageStart(stageId, stageName) {
        }
        aldStageEnd(stageId, stageName, event, params) {
        }
        aldStageRunning(stageId, stageName, event, params) {
        }
        showLatticeAd() {
        }
        hideLatticeAd() {
        }
        addColorSign(success, fail, complete) {
        }
        showBlockAd(adUnitId) { }
        hideBlockAd(adUnitId) { }
        setOnClickInnerInterstitialBtn(callback) {
            syyx_sdk_api.set_on_click_inner_interstitial_btn(callback);
        }
        setBannerHeight() {
            syyx_sdk_api.set_banner_height();
        }
    }

    class FrameAnimUtils {
        static imgTrim(url) {
            let sourceTexture = Laya.loader.getRes(url);
            let width = sourceTexture.sourceWidth;
            let height = sourceTexture.sourceHeight;
            let newWidth = Math.floor(width / 3);
            let newHeight = Math.floor(height / 3);
            let textureArray = new Array();
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {
                    let originX = Math.floor(0 + i * newWidth);
                    let originY = Math.floor(0 + j * newHeight);
                    textureArray.push(Laya.Texture.createFromTexture(sourceTexture, originX, originY, newWidth, newHeight));
                }
            }
            return textureArray;
        }
        static imgFrameAnim(img, url) {
            Laya.loader.load(url, Laya.Handler.create(img, (img, url) => {
                let index = 0;
                let textureArray = FrameAnimUtils.imgTrim(url);
                for (let i = 0; i < 9; i++) {
                    let imgNew = new Laya.Image();
                    imgNew.name = "frame" + i;
                    imgNew.source = textureArray[i];
                    img.addChild(imgNew);
                    imgNew.size(img.width, img.height);
                    imgNew.pos(0, 0, true);
                    imgNew.visible = false;
                }
                Laya.timer.frameLoop(6, img, () => {
                    if (index == 0) {
                        img.getChildByName("frame8").visible = false;
                        img.getChildByName("frame0").visible = true;
                    }
                    else {
                        img.getChildByName("frame" + (index - 1)).visible = false;
                        img.getChildByName("frame" + (index)).visible = true;
                    }
                    if (++index > 8) {
                        index = 0;
                    }
                });
            }, [img, url]));
        }
        static clearFrameAnim(img) {
            Laya.timer.clearAll(img);
            if (img.numChildren >= 9) {
                for (let i = 0; i < 9; i++) {
                    img.removeChildByName("frame" + i);
                }
            }
        }
    }

    class UiUtils {
        static init() {
            this.getBottomNeed();
        }
        static isAllScreen() {
            var clientWidth = Laya.Browser.clientWidth;
            var clientHeight = Laya.Browser.clientHeight;
            if (clientHeight / clientWidth >= 1.9) {
                return true;
            }
            return false;
        }
        static checkIsIphoneX() {
            var width = Laya.Browser.width;
            var height = Laya.Browser.height;
            var ratio = width > height ? (width / height) : (height / width);
            return (ratio > 1.95);
        }
        static checkIsRealIphoneX() {
            var width = Laya.Browser.width;
            var height = Laya.Browser.height;
            var ratio = width > height ? (width / height) : (height / width);
            return (ratio > 2.06);
        }
        static autoFix() {
            if (Laya.Browser.onPC) {
                Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL;
                console.log("宽高", Laya.stage.width, Laya.stage.height);
                Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
                Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
                Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;
            }
            else {
                Laya.stage.alignV = "middle";
                Laya.stage.alignH = "center";
                if (this.isAllScreen()) {
                    Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_WIDTH;
                }
                else {
                    Laya.stage.scaleMode = Laya.Stage.SCALE_FIXED_HEIGHT;
                }
            }
        }
        static fix4399() {
            Laya.stage.scaleMode = Laya.Stage.SCALE_SHOWALL;
            console.log("宽高", Laya.stage.width, Laya.stage.height);
            Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
            Laya.stage.alignV = Laya.Stage.ALIGN_MIDDLE;
            Laya.stage.screenMode = Laya.Stage.SCREEN_NONE;
        }
        static getBottomNeed() {
            let bottomMaxHeight = 250 * Laya.Browser.clientHeight / 1334;
            let bottomDiff = Laya.Browser.clientHeight - (1334 * Laya.Browser.clientWidth / 750);
            this.bottomNeed = bottomDiff > 0 ?
                (bottomDiff > bottomMaxHeight ? bottomDiff - bottomMaxHeight : bottomMaxHeight - bottomDiff)
                : bottomMaxHeight - bottomDiff;
            this.bottomNeed = this.bottomNeed * 750 / Laya.Browser.clientWidth;
        }
        static resetBottom(node) {
            if (SdkCenter.getInstannce().isWx()) {
                if (UserGD.isIphoneX) {
                    node.bottom = 300;
                }
                else {
                    node.bottom = 250;
                }
            }
            else if (SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.isIphoneX) {
                    node.bottom = 130;
                }
                else {
                    node.bottom = 140;
                }
            }
            else if (SdkCenter.getInstannce().is4399()) {
                if (UserGD.isIphoneX) {
                    node.bottom = 300;
                }
                else {
                    node.bottom = 200;
                }
            }
            else if (SdkCenter.getInstannce().isTT()) {
                if (UserGD.isIphoneX) {
                    node.bottom = 300;
                }
                else {
                    node.bottom = 250;
                }
            }
            else {
                if (UserGD.isIphoneX) {
                    node.bottom = 300;
                }
                else {
                    node.bottom = 250;
                }
            }
        }
        static getClientScale() {
            return Laya.stage.height / 1334;
        }
        static castShadow(node) {
            if (node instanceof Laya.SkinnedMeshSprite3D) {
                node.skinnedMeshRenderer.castShadow = true;
            }
            else {
                node.meshRenderer.castShadow = true;
            }
        }
        static receiveShadow(node) {
            if (node instanceof Laya.SkinnedMeshSprite3D) {
                node.skinnedMeshRenderer.receiveShadow = true;
            }
            else {
                node.meshRenderer.receiveShadow = true;
            }
        }
        static scaleNode(img, time = 300, nextTime = 1000, once) {
            var self = this;
            Laya.Tween.clearAll(img);
            Laya.Tween.to(img, { scaleX: 1.2, scaleY: 1.2 }, time, Laya.Ease.backOut, Laya.Handler.create(self, function () {
                Laya.Tween.to(img, { scaleX: 1, scaleY: 1 }, time, Laya.Ease.linearIn, Laya.Handler.create(self, function () {
                    if (!once) {
                        UiUtils.scaleNode(img, time, nextTime);
                    }
                }), nextTime, true);
            }), nextTime, true);
        }
        static scaleNodeV2(img, time, middleTime, nextTime, minScale, maxScale) {
            let realTime = (time == undefined) ? 300 : time;
            let realMiddleTime = middleTime ? middleTime : 0;
            let realNextTime = nextTime ? nextTime : 1000;
            let realMinScale = minScale ? minScale : 0.9;
            let realMaxScale = maxScale ? maxScale : 1.1;
            var self = this;
            Laya.Tween.clearAll(img);
            Laya.Tween.to(img, { scaleX: realMaxScale, scaleY: realMaxScale }, realTime, Laya.Ease.backOut, Laya.Handler.create(self, function () {
                Laya.Tween.to(img, { scaleX: realMinScale, scaleY: realMinScale }, realTime, Laya.Ease.linearIn, Laya.Handler.create(self, function () {
                    UiUtils.scaleNodeV2(img, realTime, realMiddleTime, realNextTime, realMinScale, realMaxScale);
                }), realMiddleTime, true);
            }), realNextTime, true);
        }
        static moveNodeX(img, posX, posXEnd) {
            var self = this;
            Laya.Tween.clearAll(img);
            Laya.Tween.to(img, { x: posX }, 750, Laya.Ease.linearIn, Laya.Handler.create(self, function () {
                Laya.Tween.to(img, { x: posXEnd }, 750, Laya.Ease.linearIn, Laya.Handler.create(self, function () {
                    UiUtils.moveNodeX(img, posX, posXEnd);
                }), 500, true);
            }), 0, true);
        }
        static skewNode(img) {
            var self = this;
            Laya.Tween.clearAll(img);
            Laya.Tween.to(img, { skewX: -8 }, 200, Laya.Ease.linearIn, Laya.Handler.create(self, function () {
                Laya.Tween.to(img, { skewX: 8 }, 200, Laya.Ease.linearIn, Laya.Handler.create(self, function () {
                    self.skewNode(img);
                }), 1000, true);
            }), 0, true);
        }
        static rotateNodeInter(node) {
            var self = this;
            Laya.Tween.clearAll(node);
            Laya.Tween.to(node, { rotation: 8, scaleX: 1.1, scaleY: 1.1 }, 160, Laya.Ease.linearIn, Laya.Handler.create(self, function (args) {
                let node;
                if (args instanceof Array) {
                    node = args[0];
                }
                else {
                    node = args;
                }
                Laya.Tween.to(node, { rotation: -8 }, 320, Laya.Ease.linearIn, Laya.Handler.create(self, function (args) {
                    let node;
                    if (args instanceof Array) {
                        node = args[0];
                    }
                    else {
                        node = args;
                    }
                    Laya.Tween.to(node, { rotation: 8 }, 320, Laya.Ease.linearIn, Laya.Handler.create(self, function (args) {
                        let node;
                        if (args instanceof Array) {
                            node = args[0];
                        }
                        else {
                            node = args;
                        }
                        Laya.Tween.to(node, { rotation: 0, scaleX: 1, scaleY: 1 }, 160, Laya.Ease.linearIn, null, 0);
                    }, [node]), 0);
                }, [node]));
            }, [node]), 0);
        }
        static shrinkNode(node) {
            var self = this;
            Laya.Tween.clearAll(node);
            Laya.Tween.to(node, { scaleX: 0, scaleY: 0 }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, function s(node) {
                let img;
                if (node instanceof Array) {
                    img = node[0];
                }
                else {
                    img = node;
                }
                Laya.timer.once(400, self, function s1() {
                    if (img) {
                        Laya.Tween.to(img, { scaleX: 1, scaleY: 1 }, 300, Laya.Ease.linearIn, null, 0);
                    }
                });
            }, [node]), 0);
        }
        static checkFrameAnimProcess(img, data) {
            if (data.isdynamic == "yes") {
                FrameAnimUtils.imgFrameAnim(img, data.pic);
            }
            else {
                UiUtils.clearFrameAnimProcess(img);
                img.skin = data.pic;
            }
        }
        static clearFrameAnimProcess(img) {
            FrameAnimUtils.clearFrameAnim(img);
        }
        static showLayaToast(text) {
            if (text) {
                this.queue.push(text);
                ++this.queueTail;
            }
            if (this.queueTail == this.queueHead || Laya.stage.getChildByName("bgimg")) {
                return;
            }
            let newTxt = this.queue[this.queueHead++];
            var bgimg = new Laya.Image("common/bg_rounded_rect_2.png");
            bgimg.name = "bgimg";
            var lal = new Laya.Label(newTxt);
            bgimg.size(newTxt.length <= 5 ? 550 : 650, 80);
            lal.centerY = 0;
            lal.width = 550;
            lal.fontSize = 35;
            lal.bold = true;
            lal.font = "Arial";
            lal.color = "#ffffff";
            lal.align = "center";
            lal.valign = "middle";
            lal.overflow = "hidden";
            lal.centerX = 0;
            bgimg.centerX = 0;
            bgimg.centerY = -200;
            bgimg.zOrder = 101;
            bgimg.addChild(lal);
            Laya.stage.addChild(bgimg);
            Laya.timer.once(1000, PulCenter, function s() {
                bgimg.visible = false;
                bgimg.removeChildren();
                Laya.stage.removeChild(bgimg);
                UiUtils.showLayaToast();
            });
        }
        static shake(img, caller, type, duration, scale, callback) {
            let rotation;
            switch (type) {
                case -1: {
                    rotation = -15;
                    break;
                }
                case 0: {
                    rotation = 0;
                    break;
                }
                case 1: {
                    rotation = 15;
                    break;
                }
            }
            Laya.Tween.to(img, {
                rotation: rotation,
                scaleX: scale ? scale : 1,
                scaleY: scale ? scale : 1
            }, duration ? duration : 100, Laya.Ease.linearIn, Laya.Handler.create(caller, () => {
                if (callback) {
                    callback();
                }
            }));
        }
        static shrink(img, caller, duration, callback) {
            Laya.Tween.to(img, {
                rotation: 0,
                scaleX: 0.7,
                scaleY: 0.7
            }, duration ? duration : 100, Laya.Ease.linearIn, Laya.Handler.create(caller, () => {
                if (callback) {
                    callback();
                }
            }));
        }
        static btnEffect(btn, dotX) {
            Laya.Tween.to(btn, { scaleX: 1.1, scaleY: 1.1 }, 100, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                UiUtils.btnEffect2(btn, dotX);
            }), 0);
        }
        static btnEffect2(btn, dotX) {
            Laya.Tween.to(btn, { scaleX: 1, scaleY: 1 }, 100, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                let whiteDot = btn.getChildByName("shineBar");
                Laya.timer.once(500, UiUtils, UiUtils.btnEffect3, [whiteDot, dotX]);
            }), 0);
        }
        static btnEffect3(whiteDot, dotX) {
            whiteDot.visible = true;
            Laya.Tween.to(whiteDot, { x: dotX }, 400, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                whiteDot.visible = false;
                whiteDot.x = 0;
            }), 0);
        }
        static shakeExMark(thing, caller) {
            UiUtils.shake(thing, caller, -1, 50, 1.3, () => {
                UiUtils.shake(thing, caller, 1, 100, 1.3, () => {
                    UiUtils.shake(thing, caller, -1, 100, 1.3, () => {
                        UiUtils.shake(thing, caller, 1, 100, 1.3, () => {
                            UiUtils.shake(thing, caller, -1, 100, 1.3, () => {
                                UiUtils.shake(thing, caller, 1, 100, 1.3, () => {
                                    UiUtils.shake(thing, caller, 0, 50, 1, () => {
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }
        static closeDialog(name) {
            let dialog = Laya.stage.getChildByName(name);
            dialog && dialog.eventClose && dialog.eventClose();
        }
    }
    UiUtils.queue = new Array();
    UiUtils.queueHead = 0;
    UiUtils.queueTail = 0;

    class LwConfig {
    }
    LwConfig.lwCustomConfig = [1, 1, 2, 5, 30, 1, 1];
    LwConfig.interstitialId = [];
    LwConfig.firstHot = true;
    LwConfig.firstFullAd = true;
    LwConfig.firstFullAdSimple = true;
    LwConfig.firstIcon = true;
    LwConfig.firstSurprise = true;

    class LwSdkUtils extends BaseSdkUtils {
        constructor() {
            super(...arguments);
            this.wx = Laya.Browser.window.wx;
            this.mIsVibrate = false;
            this.mVideoIdArr = [];
            this.mVideoMap = {};
            this.mIsShowingVideo = false;
            this.isForceVideo = false;
            this.mBannerIdArr = [];
            this.mBannerMap = {};
            this.mIsShowBanner = false;
            this.currentBanerIndex = 0;
            this.currentBanerIndexForClick = 0;
            this.isFirstTimeForClick = true;
            this.currentCreateBannerIndex = 0;
            this.bannerPullChance = 3;
            this.mInterstitialAdIdArr = [];
            this.mInterstitialAdMap = {};
            this.mInterstitialAdIndex = 0;
            this.mIsShowedodal = false;
            this.mLatticeAds = new Array();
            this.mLatticeAdMap = {};
            this.mLatticeAdIndex = 0;
            this.mPrimordialIndex = 0;
            this.mPrimordialAds = new Array();
            this.mIsShowLatticeAd = false;
            this.mIsShowPrimordialAd = false;
            this.mShowExtension = false;
            this.mBannerShowTime = 0;
            this.mBannerAdShowing = false;
            this.mVideoAdShowing = false;
            this.lwVersion = "1.1.0";
            this.gameCode = "ruantangchaoren-weixin";
            this.isPlayingVideo = false;
            this.sdkInitOk = false;
        }
        init(params, callback) {
            const updateManager = Laya.Browser.window.wx.getUpdateManager();
            updateManager.onCheckForUpdate(function (res) {
                console.log("res.hasUpdate: ", res.hasUpdate);
            });
            updateManager.onUpdateReady(function () {
                Laya.Browser.window.wx.showModal({
                    title: '更新提示',
                    content: '新版本已经准备好，是否重启应用？',
                    success(res) {
                        if (res.confirm) {
                            updateManager.applyUpdate();
                        }
                    }
                });
            });
            let gameConfig = params.gameConfig;
            JJSdkConfig.GAME_ID = gameConfig.wx.id;
            JJSdkConfig.SDK_VERSION = gameConfig.wx.ver;
            JJSdkConfig.UNION_CHANNEL_ID = gameConfig.wx.channel;
            Utils.onEvent(this, SelfGameConfig.EVENT_REGET_SDK_CONFIG, this.initAdvs);
            UserGD.bannerConfig = [1, 6, 30];
            let self = this;
            super.init(params, (data) => {
                if (data) {
                    self.initAdvs();
                }
                if (callback) {
                    callback();
                }
            });
            this.initLwSdk();
            this.wx.onShow((res) => {
                if (self.mOnShowCallback) {
                    self.mOnShowCallback(res);
                }
                if (UserGD.toastOnShow) {
                    UserGD.toastOnShow = false;
                    UiUtils.showLayaToast(UserGD.strToastOnShow);
                }
                if (UserGD.shareType == "normal") {
                    UserGD.shareType = null;
                    return;
                }
                let curTime = Date.now();
                let lastTime = PulCenter.getDataByDay(UserGD.saveShareKey, null);
                if (lastTime) {
                    if (curTime - lastTime > 3 * 1000) {
                        if (UserGD.shareType) {
                            switch (UserGD.shareType) {
                                case "video":
                                    this.mVideoCancelCallback();
                                    break;
                            }
                        }
                        Utils.dispatchEvent(SelfGameConfig.SHARE_CANCEL, true);
                        UserGD.shareType = null;
                        return;
                    }
                }
                if (UserGD.shareType) {
                    switch (UserGD.shareType) {
                        case "video":
                            this.mVideoSuccessCallback();
                            break;
                    }
                }
                UserGD.shareType = null;
            });
            this.wx.onHide((res) => {
                if ((res.targetAction == 8 || res.targetAction == 9 || res.targetAction == 10)
                    && res.targetPagePath.length > 50) {
                    console.log("----------------点击了banner");
                }
                if (self.mOnHideCallback) {
                    self.mOnHideCallback(res);
                }
            });
            Laya.timer.loop(500, self, function loopBanner() {
                if (self.sdkInitOk) {
                    if (UserGD.canShowBanner) {
                        if (UserGD.isGameing) {
                            let passTime = Math.ceil(new Date().getTime() - self.mBannerShowTime);
                            if (passTime >= (LwConfig.lwCustomConfig[4] * 1000)) {
                                self.mBannerShowTime = new Date().getTime();
                                console.log("---------------showBanner wx1-------------------");
                                if (PulCenter.checkLwCondition("banner")) {
                                    self.showBannerNormal();
                                }
                            }
                        }
                        else {
                            let passTime = Math.ceil(new Date().getTime() - self.mBannerShowTime);
                            if (passTime >= (LwConfig.lwCustomConfig[4] * 1000) || UserGD.showBannerNow == true) {
                                if (UserGD.showBannerNow == true) {
                                    UserGD.showBannerNow = false;
                                }
                                self.mBannerShowTime = new Date().getTime();
                                console.log("---------------showBanner wx2-------------------");
                                self.showBannerNormal();
                            }
                        }
                    }
                    else {
                        if (self.mBannerAdShowing == true) {
                            self.mBannerAdShowing = false;
                            self.hideBanner();
                        }
                    }
                }
            });
        }
        initLwSdk() {
            let self = this;
            if (lwsdk) {
                lwsdk.init({
                    debug: true,
                    game: this.gameCode,
                    version: this.lwVersion,
                    dev_platform: 'weixin',
                    changeHost: false,
                    gameAdIsNeed: true,
                    preloadBanner: false,
                    BANNERAD_MAX_COUNT: 1,
                    success: (userinfo) => {
                        console.log(userinfo);
                        self.sdkInitOk = true;
                        console.log("sdk初始化", this.sdkInitOk);
                        lwsdk.onShareAppMessage();
                        let keys = [
                            "bannerShowTime",
                            "buttonMoveTime",
                            "yujiazai",
                            "bannershijian",
                            "laqubanner",
                            "wudianjushu",
                            "xiuxijushu"
                        ];
                        for (var i = 0; i < keys.length; i++) {
                            let data = lwsdk.getCustomConfigByKey(keys[i]);
                            if (data != undefined || data != null) {
                                LwConfig.lwCustomConfig[i] = parseFloat(data);
                            }
                        }
                        console.log("自定义开关", LwConfig.lwCustomConfig);
                    },
                    fail: err => {
                        console.warn('lwsdk初始化失败，重试。');
                        setTimeout(() => {
                            self.initLwSdk();
                        }, 1000);
                    }
                });
            }
        }
        buttonCondition(name) {
            return lwsdk.getButtonVisible(name);
        }
        getAdDataToShow(positionKey, showCount = 0, index = 0) {
            return lwsdk.getAdDataToShow({
                positionKey: positionKey,
                showCount: showCount,
                index: index
            });
        }
        showCustomAd(dialog) {
            let self = this;
            let left;
            let top;
            left = (this.getSystemInfoSync().screenWidth - 360) / 2;
            top = this.getSystemInfoSync().screenHeight / 2 + 160;
            switch (dialog) {
                case "wrongClickAd":
                    self.createCustomAd(self.mPrimordialAds[Utils$1.nextInt(0, self.mPrimordialAds.length - 1)], left, top);
                    break;
            }
        }
        destroyCustomAd() {
            if (this.customAd) {
                this.customAd.destroy();
            }
        }
        createCustomAd(adUnitId, left, top) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.11.1")) {
                var style = {
                    left: left,
                    top: top,
                    fixed: true
                };
                let customAd;
                customAd = this.wx.createCustomAd({
                    adUnitId: adUnitId,
                    adIntervals: 30,
                    style: style
                });
                customAd.onLoad((res) => {
                    console.log("横排广告加载完成", res);
                    console.log("样式", customAd.style);
                    customAd.show()
                        .then(() => {
                        console.log("横排广告展示成功");
                    }).catch(() => {
                        console.log("横排广告展示失败");
                    });
                });
                customAd.onError((res) => {
                    console.log("横排广告加载错误", res);
                });
                this.customAd = customAd;
            }
        }
        loopCreateBanner() {
            if (this.currentCreateBannerIndex < this.mBannerIdArr.length) {
                this.createBannerAd(this.mBannerIdArr[this.currentCreateBannerIndex]);
                ++this.currentCreateBannerIndex;
            }
            else {
                Laya.timer.clear(this, this.loopCreateBanner);
            }
        }
        initAdvs() {
            let self = this;
            let platAd = this.mJjSdk.getPlatAd();
            if (platAd) {
                let navAdArr = platAd.drawerAd;
                if (navAdArr && navAdArr.length > 0) {
                    UserGD.navAdArray = navAdArr;
                    Utils$1.saveNavigateAd();
                    UserGD.navAdNotJumpedArray = Utils$1.getNotJumpedNavigateAd();
                }
            }
            Utils.dispatchEvent(SelfGameConfig.EVENT_INIT_NAV_AD_PROGRESS, true);
            this.showShareMenu();
            let wxAdInfo = this.mJjSdk.getWxAdInfo();
            console.log("wxAdinfo  ", wxAdInfo);
            if (wxAdInfo != null) {
                var bannerAd = wxAdInfo.bannerAd;
                var rewardAd = wxAdInfo.videoAd;
                var popupAd = wxAdInfo.popupAd;
                var primordialAd = wxAdInfo.PrimordialAd;
                if (bannerAd) {
                    let length = bannerAd.length;
                    this.currentCreateBannerIndex = 1;
                    this.mBannerIdArr = new Array();
                    for (let i = 0; i < length; i++) {
                        const ad = bannerAd[i];
                        this.mBannerIdArr.push(ad.unitId);
                    }
                    this.mBannerIdArr = Utils$1.shuffeArr(this.mBannerIdArr);
                    this.createBannerAd(this.mBannerIdArr[0]);
                    Laya.timer.loop(300, this, function createBannerAd() {
                        self.createBannerAd(self.mBannerIdArr[self.currentCreateBannerIndex]);
                        ++self.currentCreateBannerIndex;
                        if (self.currentCreateBannerIndex >= LwConfig.lwCustomConfig[2] || self.currentCreateBannerIndex >= self.mBannerIdArr.length) {
                            Laya.timer.clear(self, createBannerAd);
                        }
                    });
                    Laya.timer.loop(LwConfig.lwCustomConfig[3] * 1000, this, this.loopCreateBanner);
                }
                if (rewardAd) {
                    this.mVideoIdArr = new Array();
                    for (let j = 0; j < rewardAd.length; j++) {
                        let element = rewardAd[j];
                        this.mVideoIdArr.push(element.unitId);
                    }
                }
                if (popupAd && popupAd.length > 0) {
                    console.log("popupAd--------------> " + popupAd.length);
                    this.mInterstitialAdIdArr = new Array();
                    for (let j = 0; j < popupAd.length; j++) {
                        let element = popupAd[j];
                        this.mInterstitialAdIdArr.push(element.unitId);
                    }
                    let index = 0;
                    Laya.timer.loop(6000, this, function createInterAd() {
                        if (index < this.mInterstitialAdIdArr.length) {
                            self.createInterstitialAd(self.mInterstitialAdIdArr[index++], () => {
                            });
                        }
                        else {
                            Laya.timer.clear(self, createInterAd);
                        }
                    });
                }
                else {
                    console.log("interstitialAd is null");
                }
                if (primordialAd) {
                    this.mPrimordialAds = new Array();
                    for (let i = 0; i < primordialAd.length; i++) {
                        const ad = primordialAd[i];
                        if (ad.status == "yes") {
                            this.mPrimordialAds.push(ad.unitId);
                        }
                    }
                }
            }
            UserGD.openPower = false;
        }
        setLoadingProgress(progress) {
        }
        loadSubpackage(nameArr, success, fail) {
            this.recursionLoadSubpackage(0, nameArr, function (code) {
                if (code == -1 && fail) {
                    fail();
                }
                else if (success) {
                    success();
                }
            });
        }
        vibrateShort(success, fail, complete) {
            let self = this;
            if (!this.mIsVibrate) {
                this.mIsVibrate = true;
                this.wx.vibrateShort({
                    "success": function () {
                        if (success) {
                            success();
                        }
                    },
                    "fail": function () {
                        if (fail) {
                            fail();
                        }
                    },
                    "complete": function () {
                        self.mIsVibrate = false;
                        if (complete) {
                            complete();
                        }
                    }
                });
            }
        }
        vibrateLong(success, fail, complete) {
            let self = this;
            if (!this.mIsVibrate) {
                this.mIsVibrate = true;
                this.wx.vibrateLong({
                    "success": function () {
                        if (success) {
                            success();
                        }
                    },
                    "fail": function () {
                        if (fail) {
                            fail();
                        }
                    },
                    "complete": function () {
                        self.mIsVibrate = false;
                        if (complete) {
                            complete();
                        }
                    }
                });
            }
        }
        onShow(callback) {
            this.mOnShowCallback = callback;
        }
        onHide(callback) {
            this.mOnHideCallback = callback;
        }
        showToast(title, icon, img) {
            let obj = {};
            obj.title = title;
            obj.icon = "none";
            img ? obj.image = img : "";
            this.wx.showToast(obj);
        }
        hideToast() {
            this.wx.hideToast();
        }
        showLoading(title) {
            Laya.timer.clear(this, this.hideLoading);
            this.wx.showLoading({
                title: title,
            });
            Laya.timer.once(2000, this, this.hideLoading);
        }
        hideLoading() {
            this.wx.hideLoading();
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            let self = this;
            let button = this.wx.createUserInfoButton({
                type: type,
                lang: lang,
                text: text,
                style: style
            });
            button.onTap((res) => {
                if (res && res.userInfo) {
                }
                if (res && onTap) {
                    onTap(res);
                }
                button.destroy();
            });
        }
        postMessage(message) {
            this.wx.postMessage(message);
        }
        showModal(modalInfo) {
            if (this.mIsShowedodal) {
                return;
            }
            this.mIsShowedodal = true;
            let self = this;
            let obj = {};
            modalInfo.title ? obj.title = modalInfo.title : null;
            modalInfo.content ? obj.content = modalInfo.content : null;
            obj.showCancal = modalInfo.showCancel;
            modalInfo.cancelText ? obj.cancelText = modalInfo.cancelText : null;
            modalInfo.cancelColor ? obj.cancelColor = modalInfo.cancelColor : null;
            modalInfo.confirmText ? obj.confirmText = modalInfo.confirmText : null;
            modalInfo.confirmColor ? obj.confirmColor = modalInfo.confirmColor : null;
            obj.success = function (res) {
                if (res.confirm) {
                    if (modalInfo.confirm) {
                        modalInfo.confirm();
                    }
                }
                else if (res.cancel) {
                    if (modalInfo.cancel) {
                        modalInfo.cancel();
                    }
                }
            };
            obj.fail = function () {
                if (modalInfo.fail) {
                    modalInfo.fail();
                }
            };
            obj.complete = function () {
                if (modalInfo.complete) {
                    modalInfo.complete();
                }
                self.mIsShowedodal = false;
            };
            this.wx.showModal(obj);
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.1.0") == false || !adUnitId) {
                this.mVideoAdShowing = false;
                if (onError) {
                    onError();
                }
                return;
            }
            let self = this;
            this.mVideoSuccessCallback = onSuccess;
            this.mVideoCancelCallback = onCancel;
            this.mVideoErrorCallback = onError;
            if (this.isForceVideo) {
                this.isForceVideo = false;
            }
            else {
            }
            let videoAd = this.wx.createRewardedVideoAd({
                adUnitId: adUnitId,
                multiton: true,
            });
            videoAd.onError(function (res) {
                self.mVideoAdShowing = false;
                self.mIsShowingVideo = false;
                if (self.mVideoErrorCallback) {
                    self.mVideoErrorCallback();
                    self.mVideoErrorCallback = null;
                }
            });
            videoAd.onClose(function (res) {
                self.eventToGame();
                self.mVideoAdShowing = false;
                self.mIsShowingVideo = false;
                if (res && res.isEnded || res === undefined) {
                    if (self.mVideoSuccessCallback) {
                        self.mVideoSuccessCallback({ "videoInfo": null, "showTime": null });
                        self.mVideoSuccessCallback = null;
                    }
                }
                else {
                    if (self.mVideoCancelCallback) {
                        self.mVideoCancelCallback({ "videoInfo": null, "showTime": null });
                        self.mVideoCancelCallback = null;
                    }
                }
            });
            videoAd.onLoad(() => {
            });
            this.mVideoMap[adUnitId] = videoAd;
            return videoAd;
        }
        eventToGame() {
            AudioManager.playBgm();
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel) {
            if (PulCenter.checkLwCondition("video")) {
                var unitId;
                var self = this;
                if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.1.0") == false) {
                    return;
                }
                if (!this.mVideoAdShowing) {
                    this.mVideoAdShowing = true;
                    this.mVideoSuccessCallback = onSuccess;
                    this.mVideoCancelCallback = onCancel;
                    this.mVideoErrorCallback = onError;
                    if (adUnitId) {
                        this.isForceVideo = true;
                    }
                    if (this.mVideoIdArr.length == 0) {
                        this.mVideoAdShowing = false;
                        if (onError) {
                            onError();
                        }
                        return;
                    }
                    else {
                        var random = Math.floor(Math.random() * this.mVideoIdArr.length);
                        unitId = this.mVideoIdArr[random];
                    }
                    let videoAd = this.mVideoMap[unitId];
                    if (!videoAd) {
                        videoAd = this.createRewardedVideoAd(unitId, onSuccess, onCancel, onError);
                    }
                    if (videoAd) {
                        videoAd.show().then(() => {
                        }).catch(err => {
                            videoAd.load().then(() => {
                                videoAd.show().then(() => {
                                    self.mIsShowingVideo = true;
                                });
                            });
                        });
                    }
                }
            }
            else {
                this.shareAppMessage();
            }
        }
        isShowingRewardedVideoAd() {
            return this.mIsShowingVideo;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
            var self = this;
            var shareArr = this.mJjSdk.getShareArr();
            var shareNormalArr = this.mJjSdk.getShareNormalArr();
            let obj = {};
            if (!Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.11.3") || Laya.Browser.onIOS) {
                console.log("sdkVersion is too low for ShareTimeline");
            }
            else {
                obj.menus = ['shareAppMessage', 'shareTimeline'];
            }
            this.wx.showShareMenu(obj);
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            if (!shareInfo) {
                shareInfo = { id: 0, title: null, pic: null };
            }
            let openId = userInfo ? userInfo.openId : "9527";
            var uid = userInfo ? userInfo.uid : "9527";
            let queryContent = "materialID=" + shareInfo.id + "&openId=" + openId
                + "&JJshareId=" + shareInfo.id + "&inviteUid=" + uid;
            this.wx.onShareAppMessage(function (res) {
                return {
                    title: shareInfo.title,
                    query: queryContent,
                    imageUrl: shareInfo.pic
                };
            });
            if (!Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.11.3") || Laya.Browser.onIOS) {
                console.log("sdkVersion is too low to wx.onShareTimeline");
            }
            else {
                this.wx.onShareTimeline(() => {
                    return {
                        title: shareInfo.title,
                        query: queryContent,
                        imageUrl: shareInfo.pic
                    };
                });
            }
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
            var obj = {};
            title ? obj.title = title : "";
            imageUrl ? obj.imageUrl = imageUrl : "";
            query ? obj.query = query : "";
            imageUrlId ? obj.imageUrlId = imageUrlId : "";
            this.wx.onShareAppMessage(() => {
                return obj;
            });
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
            UserGD.shareType = query.replace("ac=", "");
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            if (!shareInfo) {
                shareInfo = { id: 0, title: null, pic: null };
            }
            var qType = query ? query : "";
            let openId = userInfo ? userInfo.openId : "9527";
            var uid = userInfo ? userInfo.uid : "9527";
            let queryContent = "queryType=" + qType + "&JJshareId=" + shareInfo.id + "&inviteUid=" + uid;
            this.showLoading("加载中...");
            this.mJjSdk.shareAppMessage(shareInfo);
            PulCenter.saveDataByDay(UserGD.saveShareKey, Date.now());
            this.wx.shareAppMessage({
                title: shareInfo.title,
                query: queryContent,
                imageUrl: shareInfo.pic
            });
        }
        getSystemInfoSync() {
            let systemInfo = new SystemInfo();
            let info = this.wx.getSystemInfoSync();
            systemInfo.brand = info.brand;
            systemInfo.model = info.model;
            systemInfo.pixelRatio = info.pixelRatio;
            systemInfo.screenWidth = info.screenWidth;
            systemInfo.screenHeight = info.screenHeight;
            systemInfo.windowWidth = info.windowWidth;
            systemInfo.windowHeight = info.windowHeight;
            systemInfo.statusBarHeight = info.statusBarHeight;
            systemInfo.language = info.language;
            systemInfo.version = info.version;
            systemInfo.system = info.system;
            systemInfo.platform = info.platform;
            systemInfo.fontSizeSetting = info.fontSizeSetting;
            systemInfo.SDKVersion = info.SDKVersion;
            systemInfo.benchmarkLevel = info.benchmarkLevel;
            systemInfo.albumAuthorized = info.albumAuthorized;
            systemInfo.cameraAuthorized = info.cameraAuthorized;
            systemInfo.locationAuthorized = info.locationAuthorized;
            systemInfo.microphoneAuthorized = info.microphoneAuthorized;
            systemInfo.notificationAuthorized = info.notificationAuthorized;
            systemInfo.notificationAlertAuthorized = info.notificationAlertAuthorized;
            systemInfo.notificationBadgeAuthorized = info.notificationBadgeAuthorized;
            systemInfo.notificationSoundAuthorized = info.notificationSoundAuthorized;
            systemInfo.bluetoothEnabled = info.bluetoothEnabled;
            systemInfo.locationEnabled = info.locationEnabled;
            systemInfo.wifiEnabled = info.wifiEnabled;
            systemInfo.safeArea = info.safeArea;
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
            let self = this;
            console.log("------create Banner-----: ", adUnitId);
            if (adUnitId && adUnitId != "") {
                if (this.mBannerMap[adUnitId]) {
                    return;
                }
                let sys = this.wx.getSystemInfoSync();
                let screenWidth = sys.screenWidth;
                let screenHeight = sys.screenHeight;
                var top = screenHeight;
                var bannerAd = this.wx.createBannerAd({
                    adUnitId: adUnitId,
                    style: {
                        left: 0,
                        top: 0,
                        width: 300,
                    }
                });
                if (bannerAd) {
                    bannerAd.onLoad((callback) => {
                        if (callback == undefined || callback == null) {
                            var realWidth = bannerAd.style.realWidth;
                            var realHeight = bannerAd.style.realHeight;
                            var newHeight = screenWidth / realWidth * realHeight;
                            var maxBottom = 250 * Laya.Browser.clientHeight / 1334 - 2;
                            if (newHeight > maxBottom) {
                                bannerAd.style.top = top - maxBottom;
                                var newWidth = realWidth / realHeight * maxBottom;
                                bannerAd.style.width = newWidth;
                                bannerAd.style.left = (screenWidth - newWidth) / 2;
                            }
                            else {
                                bannerAd.style.width = screenWidth;
                                bannerAd.style.top = top - maxBottom;
                            }
                            self.mBannerMap[bannerAd.adUnitId] = bannerAd;
                        }
                    });
                    bannerAd.onError(function (data) {
                        if (data.errCode == 1004 && (--self.bannerPullChance > 0)) {
                            console.log("1004情况出现，banner加载暂停");
                            Laya.timer.clear(self, self.loopCreateBanner);
                            Laya.timer.once(10000, self, () => {
                                console.log("延迟加载banner开始");
                                self.currentCreateBannerIndex = 1;
                                self.createBannerAd(self.mBannerIdArr[0]);
                                Laya.timer.loop(UserGD.bannerConfig[1] * 1000, self, self.loopCreateBanner);
                            });
                        }
                    });
                }
            }
        }
        showBanner(isForClick, isCreateNew) {
            if (isForClick) {
                this.showBannerForClick();
            }
            else {
                this.showBannerNormal();
            }
        }
        showBannerNormal() {
            this.mIsShowBanner = true;
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.0.4")) {
                let length = Object.keys(this.mBannerMap).length;
                if (length > 0) {
                    PulCenter.hideBottomAd();
                    for (let wxId in this.mBannerMap) {
                        this.mBannerMap[wxId].hide();
                    }
                    var index = 0;
                    for (var wxId in this.mBannerMap) {
                        if (index == this.currentBanerIndex) {
                            this.mBannerMap[wxId].show();
                            this.mBannerAdShowing = true;
                            this.mBannerShowTime = new Date().getTime();
                            console.log("currentBanerIndex: --> ", this.currentBanerIndex);
                            console.log("Banner.adUnitId: --> ", this.mBannerMap[wxId].adUnitId);
                            break;
                        }
                        index++;
                    }
                    ++this.currentBanerIndex;
                    this.currentBanerIndex = this.currentBanerIndex % length;
                }
                else {
                    console.log("Banner is NULL");
                    PulCenter.showBottomAd();
                }
            }
            else {
                console.log("Banner is NULL");
                PulCenter.showBottomAd();
            }
        }
        showBannerForClick() {
            this.mIsShowBanner = true;
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.0.4")) {
                let length = Object.keys(this.mBannerMap).length;
                if (length > 0) {
                    for (var wxId in this.mBannerMap) {
                        this.mBannerMap[wxId].hide();
                    }
                    let index = 0;
                    if (this.isFirstTimeForClick) {
                        this.isFirstTimeForClick = false;
                        this.currentBanerIndexForClick = Math.floor(Math.random() * length);
                    }
                    for (var wxId in this.mBannerMap) {
                        if (index == this.currentBanerIndexForClick) {
                            this.mBannerMap[wxId].show();
                            this.mBannerAdShowing = true;
                            this.mBannerShowTime = new Date().getTime();
                            console.log("WrongClick currentBanerIndex: --> ", this.currentBanerIndexForClick);
                            console.log("WrongClick Banner.adUnitId: --> ", this.mBannerMap[wxId].adUnitId);
                            break;
                        }
                        index++;
                    }
                    (--this.currentBanerIndexForClick < 0) ? (this.currentBanerIndexForClick = length - 1) : 0;
                }
                else {
                    console.log("Banner is NULL");
                }
            }
            else {
                console.log("Banner is NULL");
            }
        }
        hideBanner(adUnitId) {
            console.log("隐藏banner");
            this.mIsShowBanner = false;
            for (let key in this.mBannerMap) {
                let bannerAd = this.mBannerMap[key];
                bannerAd.hide();
            }
            this.mBannerAdShowing = false;
            PulCenter.hideBottomAd();
        }
        destroyBanner(adUnitId) { }
        createInterstitialAd(adUnitId, onClose) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.6.0")) {
                if (this.mInterstitialAdIdArr.length == 0) {
                    return;
                }
                for (let i = 0; i < this.mInterstitialAdIdArr.length; i++) {
                    var adUnitIdNew = this.mInterstitialAdIdArr[i];
                    let interAd = this.wx.createInterstitialAd({
                        adUnitId: adUnitIdNew,
                    });
                    interAd.onLoad(function (callback) {
                    });
                    interAd.onError(function (data) {
                    });
                    interAd.onClose(function () {
                        if (onClose) {
                            onClose();
                        }
                    });
                    this.mInterstitialAdMap[adUnitIdNew] = interAd;
                }
                return true;
            }
            else {
                return null;
            }
        }
        showInterstitialAd(adUnitId, onCloseCallback) {
            if (Utils$1.compareVersion(this.wx.getSystemInfoSync().SDKVersion, "2.6.0")) {
                let interAd;
                let length = Object.keys(this.mInterstitialAdMap).length;
                if (this.mInterstitialAdMap && length > 0) {
                    var nowData = Date.now();
                    if ((nowData - UserGD.timeLoadedGame) < 15 * 1000 || (nowData - Utils$1.getWxInterShowTime()) < 15 * 1000) {
                        return;
                    }
                    Utils$1.setWxInterShowTime(nowData);
                    if (length == 1) {
                        this.mInterstitialAdIndex = 0;
                    }
                    else if (++this.mInterstitialAdIndex == length) {
                        this.mInterstitialAdIndex = 0;
                    }
                    for (let key in this.mInterstitialAdMap) {
                        if (key == Object.keys(this.mInterstitialAdMap)[this.mInterstitialAdIndex]) {
                            interAd = this.mInterstitialAdMap[key];
                            break;
                        }
                    }
                    if (interAd) {
                        interAd.show();
                    }
                }
            }
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
        }
        hideNativeBanner() {
        }
        navigateToMiniProgram(data, success, fail, complete, path, extraData, envVersion) {
            lwsdk.onAdTouch({
                adItem: data,
                navigateToFail: function () {
                    if (fail) {
                        fail();
                    }
                },
                navigateToSuccess: function () {
                    if (success) {
                        success();
                    }
                }
            });
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        recursionLoadSubpackage(index, nameArr, callback) {
            var self = this;
            console.log("加载第" + index + "个分包");
            if (index == nameArr.length) {
                callback();
            }
            else {
                this.wx.loadSubpackage({
                    name: nameArr[index],
                    success: function (res) {
                        console.log("分包加载成功");
                        self.recursionLoadSubpackage(++index, nameArr, callback);
                    },
                    fail: function (res) {
                        callback(-1);
                    }
                });
            }
        }
        exitGame() {
            this.wx.exitMiniProgram();
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        showMoreGamesModal() {
        }
        login(params, onSuccess, onCancel, onError) {
        }
        aldSendEvent(name, keyValue) {
            if (this.wx.aldSendEvent) {
                this.wx.aldSendEvent(name, keyValue + "");
            }
        }
        getUserInfo() {
            return this.mJjSdk.getUserInfo();
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        showAppBox(onClose) {
        }
        hideAppBox() {
        }
        getCloseDelayTime() {
            return WxConfig.DELAY_SHOW_CLOSE;
        }
        showFloatView(floatView) {
            if (!this.mFloatView) {
                this.mFloatView = floatView;
            }
        }
        submitScore(score, callback) {
            this.mJjSdk.submitScore(score, function (data) {
                if (callback) {
                    callback(data);
                }
            });
        }
        setHelpInfo(callback) {
            if (this.mJjSdk.getUserInfo()) {
                this.mJjSdk.getHelpInfo("help", 10, function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
            }
        }
        requestSubscribeMessage(success, fail, initiatively) {
            if (this.wx.requestSubscribeMessage) {
                var b = Laya.LocalStorage.getItem("isSubscribeMessage");
                if (b) {
                    return;
                }
                let tempIds = ["DF3ePSENdthX-sT2dH414DHhtxzhlSHSdjDK0TIHRAk"];
                this.wx.requestSubscribeMessage({
                    tmplIds: tempIds,
                    success: function (res) {
                        console.log("requestSubscribeMessage suc ", res);
                        if (res && res["DF3ePSENdthX-sT2dH414DHhtxzhlSHSdjDK0TIHRAk"] == "accept") {
                            console.log("-----------订阅请求");
                            var idstr = "";
                            for (let index = 0; index < tempIds.length; index++) {
                                const element = tempIds[index];
                                idstr += element + ",";
                            }
                            idstr = idstr.substr(0, idstr.length - 1);
                            var requestData = {
                                version: JJSdkConfig.SDK_VERSION,
                                gameId: JJSdkConfig.GAME_ID,
                                openId: UserGD.openId,
                                tempids: idstr,
                                SDKVERSION: JJSdkConfig.SDK_VERSION,
                                channelId: JJSdkConfig.UNION_CHANNEL_ID,
                            };
                            Laya.Browser.window.wx.request({
                                header: {},
                                method: "GET",
                                dataType: "",
                                responseType: "text",
                                url: "https://xyx.45app.com" + "/subscribe?port=9002",
                                data: requestData,
                                success: function (res) {
                                    console.log("---------------订阅通知成功");
                                    Laya.LocalStorage.setItem("isSubscribeMessage", "true");
                                },
                                fail: function () {
                                },
                                complete: function () {
                                }
                            });
                            if (success) {
                                success();
                            }
                        }
                        else {
                            if (fail) {
                                fail();
                            }
                        }
                    },
                    fail: function (res) {
                        console.log("requestSubscribeMessage fail----- ", res);
                        if (fail) {
                            fail();
                        }
                    },
                    complete: function () {
                    }
                });
            }
            else {
                if (fail) {
                    fail();
                }
            }
        }
        createLatticeAds(onClose) {
            if (this.mLatticeAds.length == 0) {
                return;
            }
            for (let i = 0; i < this.mLatticeAds.length; i++) {
                var adUnitIdNew = this.mLatticeAds[i];
                let interAd = this.wx.createGridAd({
                    adUnitId: adUnitIdNew,
                    adTheme: 'white',
                    gridCount: 5
                });
                var self = this;
                interAd.onLoad(function () {
                    let systemInfo = self.getSystemInfoSync();
                    let screenWidth = systemInfo.screenWidth;
                    let screenHeight = systemInfo.screenHeight;
                    let top = screenHeight;
                    let realWidth = interAd.style.realWidth;
                    let realHeight = interAd.style.realHeight;
                    let newHeight = screenWidth / realWidth * realHeight;
                    let maxBottom = 250 * Laya.Browser.clientHeight / 1334 - 2;
                    if (newHeight > maxBottom) {
                        interAd.style.top = top - maxBottom;
                        let newWidth = realWidth / realHeight * maxBottom;
                        interAd.style.width = newWidth;
                        interAd.style.left = (screenWidth - newWidth) / 2;
                    }
                    else {
                        interAd.style.width = screenWidth;
                        interAd.style.top = top - maxBottom;
                    }
                    self.mLatticeAdMap[adUnitIdNew] = interAd;
                });
                interAd.onError(function (data) {
                    console.log('LatticeAd 广告显示error', data);
                });
            }
            return true;
        }
        showLatticeAd() {
            if (this.mLatticeAdMap && Object.keys(this.mLatticeAdMap).length > 0) {
                let interAd;
                let len = Object.keys(this.mLatticeAdMap).length;
                if (len == 1) {
                    this.mLatticeAdIndex = 0;
                }
                else {
                    this.mLatticeAdIndex += 1;
                    if (this.mLatticeAdIndex > len - 1) {
                        this.mLatticeAdIndex = 0;
                    }
                }
                for (let key in this.mLatticeAdMap) {
                    if (key == Object.keys(this.mLatticeAdMap)[this.mLatticeAdIndex]) {
                        interAd = this.mLatticeAdMap[key];
                        break;
                    }
                }
                this.mIsShowLatticeAd = true;
                if (interAd) {
                    interAd.show().then(function () {
                        console.log("LatticeAd 广告显示成功");
                    }).catch(function (data) {
                        console.log("LatticeAd 广告显示失败", data);
                    });
                }
            }
        }
        hideLatticeAd() {
            let interAd;
            this.mIsShowLatticeAd = false;
            for (let key in this.mLatticeAdMap) {
                if (key == Object.keys(this.mLatticeAdMap)[this.mLatticeAdIndex]) {
                    interAd = this.mLatticeAdMap[key];
                    break;
                }
            }
            if (interAd) {
                interAd.hide();
            }
        }
        addColorSign(success, fail, complete) {
        }
        createBlockAd(adUnitId, style, size, orientation) { }
        showBlockAd(adUnitId) { }
        hideBlockAd(adUnitId) { }
        setBannerPos(pos) {
        }
        preloadNativeInnerInterstitial() {
        }
        checkInnerInterstitialNative() {
            return false;
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return false;
        }
        hideInnerInterstitialNative() {
        }
        clickNativeAd() {
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
        }
        isSupportGamesModal() {
            return false;
        }
        showGameBannerBox() {
        }
        hideGameBannerBox() {
        }
        setOnClickInnerInterstitialBtn(callback) {
        }
        setBannerHeight() {
        }
    }

    class QQConfig {
    }
    QQConfig.APP_ID = 0;
    QQConfig.APPBOX_ID_ARR = [
        "9193745fdca67de9374db4b0a7a1927a",
        "07d7b46787537792c49ffa8d79ba7586"
    ];
    QQConfig.VIDEO_ID_ARR = [
        "efbe28115580cbb48466ab402acbf31a",
        "8f02fce31ead0c06949388b5564f07ac",
        "3c3b85e4ee7fde0af1d5a4b991c468b5",
        "ff4f36b6d3a3615a99ee9b697d0d0c91",
        "ae0a85a6171169084a375b5c53e2cef1",
        "4d6cde10cd10dee1f5331999455c4fc6"
    ];
    QQConfig.INTERSTITIAL_ID_ARR = [
        "ada4878d143ffa571b172e9925daf354"
    ];
    QQConfig.BANNER_ID_ARR = [
        "0c42443cc9d1f85e286935ad910300dc",
        "5da9c7169a2c8e2c442e4335f3fe4d9f",
        "9ed1fd93b1e5ad05d4605afef6b2bbad",
        "45e9e4159259754b1dad7ee86fc54d73",
        "c194c57c74c5782087e7becacf0d1992"
    ];
    QQConfig.DELAY_SHOW_CLOSE = 4000;
    QQConfig.DRAW_AD_ARR = [];
    QQConfig.BLOCK_AD_ARR = [
        "e31f1a0b81d3ebe1fbb661c482fd6745",
        "19c70e3cb1c91e02a8806be684fa3e5b",
        "0c0730d2ff4b3a410120e8f8395a1b7e",
        "35dc233066cf903e33341bf854e3e72f",
        "392f6709f2cb2605917b408cecdadb49",
        "1fc2166f9a7846eeed3438bfd2462440",
        "a8ff39345cfef0456961466a44dd35e5",
        "bcd83ff245df27f8e503d4ce443505ea",
        "4d1f07bbfdf2088bb0a572020f193e86",
        "52cb1ac0eaef6017517cfd665e33b567"
    ];
    QQConfig.SUBSCRIBE_ID_ARR = [
        "58d8a0375f06dee8ef821fbf04dab912",
        "aa8b5d336e6699f0aa5cde5c945a229f",
        "a18c934a5105720246ea91d7b44a3875"
    ];

    class SyyxSubUtils {
        constructor() {
            this.EVENT_HALL = 0;
            this.EVENT_CHAPTER = 1;
            this.EVENT_SETTLEMENT = 2;
            this.EVENT_ID_DESKTOP_CLICK = 10020;
            this.EVENT_ID_CLICK_NATIVE_AD = 10021;
        }
        static getInstance() {
            if (!this.instance) {
                this.instance = new SyyxSubUtils();
            }
            return this.instance;
        }
        init() {
            syyx_sdk_api.init("3rd/syyx_game_init.json", function (ret, param) {
                if (ret === true) {
                    if (param.load_init_complete) {
                        syyx_sdk_api.login_channel(function (res) { });
                    }
                }
            }.bind(this));
        }
        aldSendEvent(eventType, eventId, extra) {
            switch (eventType) {
                case this.EVENT_HALL:
                    if (extra) {
                        syyx_sdk_api.send_hall_event(eventId, extra.costTime);
                    }
                    else {
                        syyx_sdk_api.send_hall_event(eventId);
                    }
                    break;
                case this.EVENT_CHAPTER:
                    if (extra) {
                        var str1 = "";
                        if (extra.str1) {
                            str1 = extra.str1;
                        }
                        syyx_sdk_api.send_chapter_event(eventId, extra.result, str1);
                    }
                    else {
                        syyx_sdk_api.send_chapter_event(eventId);
                    }
                    break;
                case this.EVENT_SETTLEMENT:
                    if (extra) {
                        var lv = "";
                        var str1 = "";
                        if (extra.lv) {
                            lv = extra.lv;
                        }
                        if (extra.str1) {
                            str1 = extra.str1;
                        }
                        syyx_sdk_api.send_settlement_event(eventId, lv, str1);
                    }
                    else {
                        syyx_sdk_api.send_settlement_event(eventId);
                    }
                    break;
                default:
                    if (extra) {
                        var extraData = "";
                        var str1 = "";
                        var str2 = "";
                        var extra2 = "";
                        if (extra.extra !== null && extra !== undefined) {
                            extraData = extra.extra;
                        }
                        if (extra.str1) {
                            str1 = extra.str1;
                        }
                        if (extra.str2) {
                            str2 = extra.str2;
                        }
                        if (extra.extra2) {
                            extra2 = extra.extra2;
                        }
                        syyx_sdk_api.send_other_event(eventId, eventType, extraData, extra2, str1, str2, "");
                    }
                    else {
                        syyx_sdk_api.send_other_event(eventId, eventType);
                    }
                    break;
            }
        }
    }

    class QQSdkUtils extends BaseSdkUtils {
        constructor() {
            super(...arguments);
            this.qq = Laya.Browser.window.qq;
            this.mIsVibrate = false;
            this.mVideoMap = {};
            this.mVideoSuccessCallbackLocked = false;
            this.mVideoCancelCallbackLocked = false;
            this.mVideoErrorCallbackLocked = false;
            this.mIsShowingVideo = false;
            this.isForceVideo = false;
            this.currentCreateBannerIndex = 0;
            this.mPrimordialAds = new Array();
            this.mIsShowBanner = false;
            this.mIsBannerCreating = false;
            this.currentBannerIndex = 0;
            this.currentBanerIndexForClick = 0;
            this.isFirstTimeForClick = true;
            this.iosBannerMap = {};
            this.mBannerShowTime = 0;
            this.mBannerAdShowing = false;
            this.mInterstitialAdMap = {};
            this.mCreateInterstitialAdIndex = 0;
            this.mInterstitialAdIndex = 0;
            this.mIsShowedodal = false;
            this.sdkVersion = null;
            this.mIsShowingColorSign = false;
            this.mAppBoxShowing = false;
            this.mBannerIdArr = null;
            this.mAppBoxIdMap = {};
            this.mVideoIdMap = {};
            this.mInterIdArr = null;
            this.subscribeIdArr = null;
            this.blockIdMap = {};
            this.mBlockAdMap = {};
            this.mIsShowBlock = false;
        }
        init(params, callback) {
            const updateManager = Laya.Browser.window.qq.getUpdateManager();
            updateManager.onCheckForUpdate(function (res) {
                console.log("res.hasUpdate: ", res.hasUpdate);
            });
            updateManager.onUpdateReady(function () {
                Laya.Browser.window.qq.showModal({
                    title: '更新提示',
                    content: '新版本已经准备好，是否重启应用？',
                    success(res) {
                        if (res.confirm) {
                            updateManager.applyUpdate();
                        }
                    }
                });
            });
            UserGD.bannerConfig = [3, 5, 10];
            let self = this;
            let systemInfo = this.getSystemInfoSync();
            this.appPlatform = systemInfo.AppPlatform;
            UserGD.appPlatform = this.appPlatform;
            console.log("平台", systemInfo.AppPlatform);
            this.sdkVersion = systemInfo.SDKVersion;
            UserGD.brand = systemInfo.brand.toLowerCase();
            console.log("qq sdkVersion: ", this.sdkVersion);
            let gameConfig = params.gameConfig;
            JJSdkConfig.GAME_ID = gameConfig.qq.id;
            JJSdkConfig.SDK_VERSION = gameConfig.qq.ver;
            JJSdkConfig.UNION_CHANNEL_ID = gameConfig.qq.channel;
            Utils.onEvent(this, SelfGameConfig.EVENT_REGET_SDK_CONFIG, this.initAdvs);
            super.init(params, (data) => {
                self.initAdvs();
                if (callback) {
                    callback();
                }
            }, () => {
                PulCenter.getQqOpenDataContext();
            });
            this.qq.onShow((res) => {
                console.log("^^^^^^^^^onshow^^^^^^^^^^^^^^");
                if (self.mOnShowCallback) {
                    self.mOnShowCallback(res);
                }
                PulCenter.checkCanShowBanner();
                self.hideAppBox();
                if (UserGD.shareType == "normal") {
                    UserGD.shareType = null;
                    return;
                }
                let curTime = Date.now();
                let lastTime = PulCenter.getDataByDay(UserGD.saveShareKey, null);
                if (lastTime) {
                    if (curTime - lastTime < 3 * 1000) {
                        Utils.dispatchEvent(SelfGameConfig.SHARE_CANCEL, true);
                        UserGD.shareType = null;
                        return;
                    }
                }
                UserGD.shareType = null;
            });
            this.qq.onHide((res) => {
                UserGD.canShowBanner = false;
                this.hideBanner();
                if (self.mOnHideCallback) {
                    self.mOnHideCallback(res);
                }
            });
            Laya.timer.loop(500, self, function loopBanner() {
                if (UserGD.canShowBanner == true) {
                    if (UserGD.isGameing == true) {
                        if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openBanner) {
                            console.log("游戏中banner的显示", UserGD.canShowBanner);
                            let passTime = Math.ceil(new Date().getTime() - self.mBannerShowTime);
                            if (passTime >= (UserGD.bannerConfig[2] * 1000)) {
                                self.mBannerShowTime = new Date().getTime();
                                console.log("---------------showBanner qq1-------------------");
                                self.showBanner();
                            }
                        }
                        else {
                            if (self.mBannerAdShowing == true) {
                                self.mBannerAdShowing = false;
                                self.hideBanner();
                            }
                        }
                    }
                    else {
                        let passTime = Math.ceil(new Date().getTime() - self.mBannerShowTime);
                        if (passTime >= (UserGD.bannerConfig[2] * 1000) || UserGD.showBannerNow) {
                            self.mBannerShowTime = new Date().getTime();
                            console.log("---------------showBanner qq2-------------------");
                            self.showBanner(UserGD.showBannerNow);
                            if (UserGD.showBannerNow) {
                                UserGD.showBannerNow = false;
                            }
                        }
                    }
                }
                else {
                    if (self.mBannerAdShowing == true) {
                        self.mBannerAdShowing = false;
                        self.hideBanner();
                    }
                }
            });
            SyyxSubUtils.getInstance().init();
        }
        initAdvs() {
            this.showShareMenu();
            let self = this;
            let wxAdInfo = this.mJjSdk.getWxAdInfo();
            console.log("wxAdinfo  ", wxAdInfo);
            if (wxAdInfo != null) {
                var bannerAd = wxAdInfo.bannerAd;
                var rewardAd = wxAdInfo.videoAd;
                var popupAd = wxAdInfo.popupAd;
                var latticeAd = wxAdInfo.latticeAd;
                var primordialAd = wxAdInfo.PrimordialAd;
                var placeName = wxAdInfo.placeName;
                if (bannerAd) {
                    let length = bannerAd.length;
                    this.currentCreateBannerIndex = 1;
                    this.mBannerIdArr = new Array();
                    for (let i = 0; i < length; i++) {
                        const ad = bannerAd[i];
                        this.mBannerIdArr.push(ad.unitId);
                    }
                    this.mBannerIdArr = Utils$1.shuffeArr(this.mBannerIdArr);
                }
                if (rewardAd) {
                    for (let i = 0; i < rewardAd.length; i++) {
                        this.mVideoIdMap[rewardAd[i].placeName] = rewardAd[i].unitId;
                    }
                }
                if (popupAd && popupAd.length > 0) {
                    console.log("popupAd--------------> " + popupAd.length);
                    this.mInterIdArr = new Array();
                    for (let j = 0; j < popupAd.length; j++) {
                        let element = popupAd[j];
                        this.mInterIdArr.push(element.unitId);
                    }
                    if (this.mInterIdArr && this.mInterIdArr.length > 0) {
                        this.createInterstitialAd(this.mInterIdArr[0], () => { });
                    }
                }
                else {
                    console.log("interstitialAd is null");
                }
                if (latticeAd) {
                    for (let i = 0; i < latticeAd.length; i++) {
                        this.mAppBoxIdMap[latticeAd[i].placeName] = latticeAd[i].unitId;
                    }
                }
                if (primordialAd) {
                    for (let i = 0; i < primordialAd.length; i++) {
                        this.blockIdMap[primordialAd[i].placeName] = primordialAd[i].unitId;
                    }
                    let blockStyles = {
                        kjwd: {
                            centerX: Laya.Browser.onIOS ? undefined : 0,
                            left: Laya.Browser.onIOS ? 130 : undefined,
                            top: UserGD.isIphoneX ? 1200 : 950
                        },
                        jswd: {
                            centerX: Laya.Browser.onIOS ? undefined : 0,
                            left: Laya.Browser.onIOS ? 130 : undefined,
                            top: UserGD.isIphoneX ? 1200 : 950
                        },
                        gq: {
                            right: 20,
                            centerY: 0
                        },
                        cgcg: {
                            right: 20,
                            top: UserGD.isIphoneX ? 1100 : 850
                        },
                        cgsb: {
                            right: 20,
                            top: UserGD.isIphoneX ? 1100 : 850
                        },
                        cghd: {
                            centerX: Laya.Browser.onIOS ? undefined : 0,
                            left: Laya.Browser.onIOS ? 130 : undefined,
                            top: UserGD.isIphoneX ? 850 : 650
                        },
                        sbhd: {
                            centerX: Laya.Browser.onIOS ? undefined : 0,
                            left: Laya.Browser.onIOS ? 130 : undefined,
                            top: UserGD.isIphoneX ? 850 : 650
                        },
                        jgg: {
                            right: 20,
                            top: UserGD.isIphoneX ? 1100 : 900
                        },
                        sd: {
                            right: 20,
                            top: UserGD.isIphoneX ? 1100 : 1000
                        },
                    };
                    for (let i in this.blockIdMap) {
                        console.log("创建积木广告", this.blockIdMap[i]);
                        if (i == "gq") {
                            this.createBlockAd(this.blockIdMap[i], blockStyles[i], 3, "vertical");
                        }
                        else if (i == "cgcg" || i == "cgsb" || i == "jgg" || i == "sd") {
                            this.createBlockAd(this.blockIdMap[i], blockStyles[i], 1);
                        }
                        else {
                            this.createBlockAd(this.blockIdMap[i], blockStyles[i]);
                        }
                    }
                    console.log("primordialAd-----", primordialAd);
                }
            }
            Utils.dispatchEvent(SelfGameConfig.EVENT_INIT_NAV_AD_PROGRESS, true);
        }
        login(params, onSuccess, onCancel, onError) {
        }
        setLoadingProgress(progress) {
        }
        loadSubpackage(nameArr, success, fail) {
            var isLoadComplete = false;
            this.recursionLoadSubpackage(0, nameArr, function (code) {
                if (code == -1 && fail) {
                    fail();
                }
                else if (success) {
                    success();
                }
            });
        }
        vibrateShort(success, fail, complete) {
            let self = this;
            if (!this.mIsVibrate) {
                this.mIsVibrate = true;
                this.qq.vibrateShort({
                    "success": function () {
                        if (success) {
                            success();
                        }
                    },
                    "fail": function () {
                        if (fail) {
                            fail();
                        }
                    },
                    "complete": function () {
                        self.mIsVibrate = false;
                        if (complete) {
                            complete();
                        }
                    }
                });
            }
        }
        vibrateLong(success, fail, complete) {
            let self = this;
            if (!this.mIsVibrate) {
                this.mIsVibrate = true;
                this.qq.vibrateLong({
                    "success": function () {
                        if (success) {
                            success();
                        }
                    },
                    "fail": function () {
                        if (fail) {
                            fail();
                        }
                    },
                    "complete": function () {
                        self.mIsVibrate = false;
                        if (complete) {
                            complete();
                        }
                    }
                });
            }
        }
        onShow(callback) {
            this.mOnShowCallback = callback;
        }
        onHide(callback) {
            this.mOnHideCallback = callback;
        }
        showToast(title, icon, img) {
            this.qq.showToast({
                title: title,
                icon: "none",
                image: img ? img : "",
                success: function () {
                },
                fail: function () {
                },
                complete: function () {
                }
            });
        }
        hideToast() {
            this.qq.hideToast();
        }
        showLoading(title) {
            Laya.timer.clear(this, this.hideLoading);
            this.qq.showLoading({
                title: title,
            });
            Laya.timer.once(2000, this, this.hideLoading);
        }
        hideLoading() {
            this.qq.hideLoading();
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
        }
        postMessage(message) {
            this.qq.postMessage(message);
        }
        showModal(modalInfo) {
            if (this.mIsShowedodal) {
                return;
            }
            this.mIsShowedodal = true;
            let self = this;
            let obj = {};
            modalInfo.title ? obj.title = modalInfo.title : null;
            modalInfo.content ? obj.content = modalInfo.content : null;
            obj.showCancal = modalInfo.showCancel;
            modalInfo.cancelText ? obj.cancelText = modalInfo.cancelText : null;
            modalInfo.cancelColor ? obj.cancelColor = modalInfo.cancelColor : null;
            modalInfo.confirmText ? obj.confirmText = modalInfo.confirmText : null;
            modalInfo.confirmColor ? obj.confirmColor = modalInfo.confirmColor : null;
            obj.success = function (res) {
                if (res.confirm) {
                    if (modalInfo.confirm) {
                        modalInfo.confirm();
                    }
                }
                else if (res.cancel) {
                    if (modalInfo.cancel) {
                        modalInfo.cancel();
                    }
                }
            };
            obj.fail = function () {
                if (modalInfo.fail) {
                    modalInfo.fail();
                }
            };
            obj.complete = function () {
                if (modalInfo.complete) {
                    modalInfo.complete();
                }
                self.mIsShowedodal = false;
            };
            this.qq.showModal(obj);
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
            if (!adUnitId) {
                if (onError) {
                    onError();
                }
                return null;
            }
            let self = this;
            this.mVideoSuccessCallback = onSuccess;
            this.mVideoCancelCallback = onCancel;
            this.mVideoErrorCallback = onError;
            if (this.isForceVideo) {
                this.isForceVideo = false;
            }
            else {
                this.showLoading("视频加载中...");
            }
            let videoAd = this.qq.createRewardedVideoAd({
                adUnitId: adUnitId,
                multiton: true,
            });
            videoAd.onError(function funcOnError(res) {
                self.afterVideoAd();
                if (self.mVideoErrorCallback && !self.mVideoErrorCallbackLocked) {
                    self.mVideoErrorCallbackLocked = true;
                    self.mVideoErrorCallback();
                }
                self.hideLoading();
            });
            videoAd.onClose(function funcOnClose(res) {
                self.afterVideoAd();
                if (res && res.isEnded || res === undefined) {
                    if (self.mVideoSuccessCallback && !self.mVideoSuccessCallbackLocked) {
                        self.mVideoSuccessCallbackLocked = true;
                        self.mVideoSuccessCallback();
                    }
                }
                else {
                    if (self.mVideoCancelCallback && !self.mVideoCancelCallbackLocked) {
                        self.mVideoCancelCallbackLocked = true;
                        self.mVideoCancelCallback();
                    }
                }
            });
            videoAd.onLoad(function funcOnLoad() {
                self.hideLoading();
            });
            this.mVideoMap[adUnitId] = videoAd;
            return videoAd;
        }
        beforeVideoAd() {
            UserGD.canShowBanner = false;
            this.hideBanner();
        }
        afterVideoAd() {
            PulCenter.checkCanShowBanner();
            this.mIsShowingVideo = false;
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel) {
            console.log("QQSdkUtils.showRewardedVideoAd --");
            if (this.mIsShowingVideo) {
                console.log("error QQSdkUtils.showRewardedVideoAd -- last video Showing");
                return;
            }
            let self = this;
            this.mVideoSuccessCallback = onSuccess;
            this.mVideoCancelCallback = onCancel;
            this.mVideoErrorCallback = onError;
            this.mVideoErrorCallbackLocked = false;
            this.mVideoCancelCallbackLocked = false;
            this.mVideoSuccessCallbackLocked = false;
            var unitId = null;
            let keys = Object.keys(this.mVideoIdMap);
            if (keys.length > 0) {
                if (adUnitId != null) {
                    unitId = this.mVideoIdMap[adUnitId];
                }
                else {
                    var random = Math.floor(Math.random() * keys.length);
                    unitId = this.mVideoIdMap[random];
                }
            }
            else if (onError) {
                onError();
                return;
            }
            let videoAd = null;
            if (unitId) {
                this.beforeVideoAd();
                videoAd = this.mVideoMap[unitId];
                if (!videoAd) {
                    if (adUnitId == "qlsp") {
                        this.isForceVideo = true;
                    }
                    videoAd = this.createRewardedVideoAd(unitId, onSuccess, onCancel, onError);
                }
            }
            if (videoAd) {
                console.log("videoAd show --");
                videoAd.load()
                    .then(() => {
                    videoAd.show();
                    self.mIsShowingVideo = true;
                })
                    .catch(err => {
                    onError ? onError() : 0;
                    self.mIsShowingVideo = false;
                });
            }
            else if (onError) {
                onError();
            }
        }
        isShowingRewardedVideoAd() {
            return this.mIsShowingVideo;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
            var obj = {};
            if (this.compareVersion(this.sdkVersion, "1.6.3") < 0) {
                obj.showShareItems = ['qq', 'qzone'];
            }
            else {
                obj.showShareItems = ['qq', 'qzone', 'wechatFriends', 'wechatMoment'];
            }
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            obj.withShareTicket = withShareTicket;
            obj.success = function () {
                if (success) {
                    console.log("---------分享成功-------");
                    success();
                }
            };
            obj.fail = function () {
                if (fail) {
                    console.log("--------分享失败--------");
                    fail();
                }
            };
            obj.complete = function () {
                if (complete) {
                    complete();
                }
            };
            this.qq.showShareMenu(obj);
            this.onShareAppMessage();
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            if (!shareInfo) {
                shareInfo = {
                    id: 0,
                    title: "玩的好就是挂？是软糖超人",
                    pic: "https://src.45app.com/attachment/share/20210513/1620877769371720.jpg"
                };
            }
            var qType = query ? query : "";
            let openId = userInfo ? userInfo.openId : "9527";
            var uid = userInfo ? userInfo.uid : "9527";
            let queryContent = "queryType=" + qType + "&JJshareId=" + shareInfo.id + "&inviteUid=" + uid;
            var obj = {};
            obj.title = shareInfo.title;
            obj.imageUrl = shareInfo.pic;
            obj.query = queryContent;
            if (!(this.compareVersion(this.sdkVersion, "1.8.5") < 0)) {
                obj.shareAppType = "qqFastShareList";
            }
            imageUrlId ? obj.imageUrlId = imageUrlId : "";
            this.qq.onShareAppMessage(() => {
                return obj;
            });
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
            UserGD.shareType = query.replace("ac=", "");
            let shareInfo = null;
            let shareArray = this.mJjSdk.getShareArr();
            let userInfo = this.mJjSdk.getUserInfo();
            let length = shareArray.length;
            if (length > 0) {
                let random = Math.floor(Math.random() * length);
                let item = shareArray[random];
                shareInfo = item;
            }
            if (!shareInfo) {
                shareInfo = {
                    id: 0,
                    title: "玩的好就是挂？是软糖超人",
                    pic: "https://src.45app.com/attachment/share/20210513/1620877769371720.jpg"
                };
            }
            var qType = query ? query : "";
            let openId = userInfo ? userInfo.openId : "9527";
            var uid = userInfo ? userInfo.uid : "9527";
            let queryContent = "queryType=" + qType + "&JJshareId=" + shareInfo.id + "&inviteUid=" + uid;
            this.showLoading("加载中...");
            var obj = {};
            obj.title = shareInfo.title;
            obj.imageUrl = shareInfo.pic;
            obj.query = queryContent;
            if (!(this.compareVersion(this.sdkVersion, "1.8.5") < 0)) {
                obj.shareAppType = "qqFastShareList";
            }
            imageUrlId ? obj.imageUrlId = imageUrlId : "";
            this.qq.shareAppMessage(obj);
        }
        getSystemInfoSync() {
            let systemInfo = new SystemInfo();
            let info = this.qq.getSystemInfoSync();
            systemInfo.brand = info.brand;
            systemInfo.model = info.model;
            systemInfo.pixelRatio = info.pixelRatio;
            systemInfo.screenWidth = info.screenWidth;
            systemInfo.screenHeight = info.screenHeight;
            systemInfo.windowWidth = info.windowWidth;
            systemInfo.windowHeight = info.windowHeight;
            systemInfo.statusBarHeight = info.statusBarHeight;
            systemInfo.language = info.language;
            systemInfo.version = info.version;
            systemInfo.system = info.system;
            systemInfo.platform = info.platform;
            systemInfo.fontSizeSetting = info.fontSizeSetting;
            systemInfo.SDKVersion = info.SDKVersion;
            systemInfo.benchmarkLevel = info.benchmarkLevel;
            systemInfo.albumAuthorized = info.albumAuthorized;
            systemInfo.cameraAuthorized = info.cameraAuthorized;
            systemInfo.locationAuthorized = info.locationAuthorized;
            systemInfo.microphoneAuthorized = info.microphoneAuthorized;
            systemInfo.notificationAuthorized = info.notificationAuthorized;
            systemInfo.notificationAlertAuthorized = info.notificationAlertAuthorized;
            systemInfo.notificationBadgeAuthorized = info.notificationBadgeAuthorized;
            systemInfo.notificationSoundAuthorized = info.notificationSoundAuthorized;
            systemInfo.bluetoothEnabled = info.bluetoothEnabled;
            systemInfo.locationEnabled = info.locationEnabled;
            systemInfo.wifiEnabled = info.wifiEnabled;
            systemInfo.safeArea = info.safeArea;
            systemInfo.AppPlatform = info.AppPlatform;
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
            console.log("createBannerAd =>", adUnitId);
            let self = this;
            this.mIsBannerCreating = true;
            if (!adUnitId) {
                return;
            }
            let systemInfo = this.getSystemInfoSync();
            var targetBannerAdWidth = systemInfo.screenWidth;
            var scale = systemInfo.screenWidth / 750;
            var bannerTop = systemInfo.screenHeight - (180 * scale);
            let tempStyle = {
                left: (systemInfo.screenWidth - targetBannerAdWidth) / 2 + 0.1,
                top: bannerTop,
                width: targetBannerAdWidth
            };
            tempStyle = style ? style : tempStyle;
            let bannerAd = this.qq.createBannerAd({
                adUnitId: adUnitId,
                style: tempStyle
            });
            bannerAd.onLoad(function bannerOnload() {
                if (self.mCurrentBannerAd) {
                    self.mCurrentBannerAd.hide();
                }
                for (let i in self.iosBannerMap) {
                    self.iosBannerMap[i].hide();
                }
                if (Laya.Browser.onIOS) {
                    self.iosBannerMap[adUnitId] && self.iosBannerMap[adUnitId].hide();
                    self.iosBannerMap[adUnitId] = bannerAd;
                }
                self.mCurrentBannerAd = bannerAd;
                if (bannerAd && self.mIsShowBanner) {
                    bannerAd.show()
                        .then(() => {
                        console.log("banner ", bannerAd.adUnitId, " showing");
                        self.mIsBannerCreating = false;
                        if (Laya.Browser.onIOS) {
                            Laya.timer.once(200, self, function () {
                                console.log("---ios-Banner-onLoad-check--self.mIsShowBanner: ", self.mIsShowBanner);
                                if (!self.mIsShowBanner) {
                                    bannerAd.hide();
                                    self.hideBanner();
                                }
                            });
                            if (!self.mIsShowBanner) {
                                bannerAd.hide();
                                self.hideBanner();
                            }
                        }
                        else {
                            if (!self.mIsShowBanner) {
                                bannerAd.hide();
                                self.hideBanner();
                            }
                        }
                        console.log("-------------hideBanner at Banner.onload");
                    });
                    self.mBannerAdShowing = true;
                    self.mBannerShowTime = new Date().getTime();
                }
                else if (bannerAd) {
                    bannerAd.hide();
                    self.hideBanner();
                }
                bannerAd.offLoad(bannerOnload);
            });
            bannerAd.onError(function bannerOnError(data) {
                console.log("Error on CreateBanner: --> msg: ", data.errMsg, " code: ", data.errCode);
                self.mIsBannerCreating = false;
                bannerAd.offError(bannerOnError);
            });
        }
        showBanner(isForClick, isCreateNew) {
            if (this.mIsBannerCreating) {
                return;
            }
            this.hideBanner();
            if (this.mBannerIdArr && this.mBannerIdArr.length > 0) {
                this.mIsShowBanner = true;
                if (isForClick) {
                    if (this.isFirstTimeForClick) {
                        this.isFirstTimeForClick = false;
                        this.currentBanerIndexForClick = Math.floor(Math.random() * this.mBannerIdArr.length);
                    }
                    console.log("WrongClick currentBanerIndex: --> ", this.currentBanerIndexForClick);
                    this.createBannerAd(this.mBannerIdArr[this.currentBanerIndexForClick]);
                    if (--this.currentBanerIndexForClick < 0) {
                        this.currentBanerIndexForClick = this.mBannerIdArr.length - 1;
                    }
                }
                else {
                    console.log("currentBanerIndex: --> ", this.currentBannerIndex);
                    this.createBannerAd(this.mBannerIdArr[this.currentBannerIndex]);
                    this.currentBannerIndex = (this.currentBannerIndex + 1) % this.mBannerIdArr.length;
                }
            }
        }
        hideBanner(adUnitId) {
            this.mIsShowBanner = false;
            if (this.mCurrentBannerAd) {
                this.mCurrentBannerAd.hide();
            }
            for (let i in this.iosBannerMap) {
                this.iosBannerMap[i].hide();
            }
            this.mIsBannerCreating = false;
        }
        destroyBanner(adUnitId) {
        }
        createInterstitialAd(adUnitId, onClose) {
            var self = this;
            if (this.compareVersion(this.sdkVersion, "1.12.0") < 0) {
                console.log("sdkVersion is too low to createInterstitialAd");
            }
            else if (this.qq.createInterstitialAd) {
                if (!adUnitId) {
                    return;
                }
                let interAd = this.qq.createInterstitialAd({
                    adUnitId: adUnitId,
                });
                interAd.onLoad(function (callback) {
                });
                interAd.onError(function (data) {
                });
                interAd.onClose(function () {
                    if (onClose) {
                        onClose();
                    }
                    if (self.mCreateInterstitialAdIndex < self.mInterIdArr.length) {
                        self.createInterstitialAd(self.mInterIdArr[self.mCreateInterstitialAdIndex], () => {
                        });
                    }
                });
                this.mInterstitialAdMap[adUnitId] = interAd;
                this.mCreateInterstitialAdIndex++;
                return interAd;
            }
            else {
                return null;
            }
        }
        showInterstitialAd(adUnitId) {
            let interAd;
            if (!adUnitId) {
                let adLength = Object.keys(this.mInterstitialAdMap).length;
                if (adLength == 0) {
                    return;
                }
                if (this.mInterstitialAdIndex >= adLength) {
                    this.mInterstitialAdIndex = 0;
                }
                let index = 0;
                for (let key in this.mInterstitialAdMap) {
                    if (this.mInterstitialAdIndex == index) {
                        interAd = this.mInterstitialAdMap[key];
                        break;
                    }
                    index++;
                }
                this.mInterstitialAdIndex++;
            }
            else {
                interAd = this.mInterstitialAdMap[adUnitId];
            }
            if (interAd) {
                console.log("调用显示插屏广告interAd: --> ", interAd.adUnitId);
                interAd.show()
                    .catch((error) => {
                    console.log("showInterstitialAd error: --> ", error);
                });
            }
            else {
                console.log("未找到插屏广告");
            }
        }
        createAppBox(adUnitId, onClose) {
            let self = this;
        }
        showAppBox(fun) {
            let type = fun();
            if (this.compareVersion(this.sdkVersion, "1.7.1") < 0) {
                console.log("sdkVersion is too low to create AppBox");
            }
            else if (this.qq.createAppBox) {
                if (type) {
                    let realId = this.mAppBoxIdMap[type];
                    if (realId) {
                        let self = this;
                        this.mAppBox = this.qq.createAppBox({
                            adUnitId: realId
                        });
                        this.mAppBox.load()
                            .then(() => {
                            self.mAppBox && self.mAppBox.show();
                        });
                        this.mAppBox.onClose(() => {
                            self.mAppBox && self.mAppBox.destroy();
                        });
                    }
                }
            }
        }
        hideAppBox() {
            if (this.mAppBox) {
                this.mAppBox.destroy();
                this.mAppBox = null;
            }
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
        }
        hideNativeBanner() {
        }
        navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion) {
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        recursionLoadSubpackage(index, nameArr, callback) {
            var self = this;
            console.log("加载第" + index + "个分包");
            if (index == nameArr.length) {
                callback();
            }
            else {
                this.qq.loadSubpackage({
                    name: nameArr[index],
                    success: function (res) {
                        console.log("第", index, "个分包加载完成");
                        self.recursionLoadSubpackage(++index, nameArr, callback);
                    },
                    fail: function (res) {
                        callback(-1);
                    }
                });
            }
        }
        exitGame() {
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        showMoreGamesModal() {
        }
        aldSendEvent(eventType, eventId, extra) {
            SyyxSubUtils.getInstance().aldSendEvent(eventType, eventId, extra);
        }
        getUserInfo() {
            return null;
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        getCloseDelayTime() {
            return QQConfig.DELAY_SHOW_CLOSE;
        }
        showFloatView(floatView) {
        }
        requestSubscribeMessage(success, fail, initiatively) {
            if (this.appPlatform != "qq") {
                return;
            }
            console.log("--------requestSubscribeMessage");
            var self = this;
            var isSubscribe = false;
            if (!initiatively) {
                var subscreTime = Laya.LocalStorage.getItem("subscre_time");
                let defaultTodaysubChance = {
                    time: new Date().getTime(),
                    chance: 2
                };
                let todaysubChance;
                let str = Laya.LocalStorage.getItem("todaysubChance");
                if (str) {
                    todaysubChance = JSON.parse(str);
                    let currentTime = new Date();
                    let timeSaved = new Date(todaysubChance.time);
                    if (currentTime.getFullYear() != timeSaved.getFullYear() || currentTime.getMonth() != timeSaved.getMonth() || currentTime.getDate() != timeSaved.getDate()) {
                        todaysubChance = defaultTodaysubChance;
                    }
                }
                else {
                    todaysubChance = defaultTodaysubChance;
                }
                if (todaysubChance.chance > 0) {
                    --todaysubChance.chance;
                    Laya.LocalStorage.setItem("todaysubChance", JSON.stringify(todaysubChance));
                }
                else {
                    return;
                }
                var obj = {};
                if (!subscreTime) {
                    isSubscribe = false;
                }
                else {
                    var currentTime = new Date();
                    obj = JSON.parse(subscreTime);
                    var time = new Date(obj.time);
                    if (currentTime.getFullYear() != time.getFullYear() || currentTime.getMonth() != time.getMonth() || currentTime.getDate() != time.getDate()) {
                        isSubscribe = false;
                    }
                    else {
                        isSubscribe = true;
                    }
                }
            }
            if (!isSubscribe) {
                this.qq.subscribeAppMsg({
                    tmplIds: QQConfig.SUBSCRIBE_ID_ARR,
                    subscribe: true,
                    success(res) {
                        console.log("----subscribeAppMsg----success", res);
                        if (res) {
                            let success = false;
                            for (let i in QQConfig.SUBSCRIBE_ID_ARR) {
                                if (res[QQConfig.SUBSCRIBE_ID_ARR[i]] == "accept") {
                                    success = true;
                                    break;
                                }
                            }
                            if (success) {
                                self.mJjSdk.subscribe(QQConfig.SUBSCRIBE_ID_ARR, function () {
                                    obj.time = new Date().getTime();
                                    Laya.LocalStorage.setItem("subscre_time", JSON.stringify(obj));
                                });
                            }
                        }
                    },
                    fail(res) {
                    }
                });
            }
        }
        showLatticeAd() { }
        hideLatticeAd() { }
        addColorSign(success, fail, complete) {
            let self = this;
            if (UserGD.appPlatform != "qq" || !this.qq.isColorSignExistSync) {
                return;
            }
            if (!this.qq.isColorSignExistSync() && !this.mIsShowingColorSign) {
                this.mIsShowingColorSign = true;
                this.qq.addColorSign({
                    success() {
                        success && success();
                    },
                    fail() {
                        fail && fail();
                    },
                    complete() {
                        complete && complete();
                        self.mIsShowingColorSign = false;
                    }
                });
            }
        }
        createBlockAd(adUnitId, style, size, orientation) {
            if (!adUnitId) {
                return;
            }
            if (this.compareVersion(this.getSystemInfoSync().SDKVersion, "1.15.0") >= 0) {
                let self = this;
                let tempStyle = {
                    left: 20,
                    top: 20
                };
                let tempSize = 4;
                let tempOrientation = "landscape";
                style = style ? style : tempStyle;
                if (Laya.Browser.onIOS) {
                    let systemInfo = self.getSystemInfoSync();
                    let screenWidth = systemInfo.screenWidth;
                    let screenHeight = systemInfo.screenHeight;
                    let rateX = screenWidth / Laya.stage.width;
                    let rateY = screenHeight / Laya.stage.height;
                    let widthPerGrid = (UserGD.isIphoneX ? 118 : 118) * rateX;
                    let heightPerGrid = (UserGD.isIphoneX ? 146 : 146) * rateY;
                    let isLandScape = (orientation == "landscape");
                    let width = isLandScape ? (widthPerGrid * size) : widthPerGrid;
                    let height = isLandScape ? heightPerGrid : (heightPerGrid * size);
                    let realSize = {
                        width: width,
                        height: height
                    };
                    if (style.centerX != undefined) {
                        tempStyle.left = (screenWidth - realSize.width) / 2 + style.centerX;
                    }
                    else if (style.left != undefined) {
                        tempStyle.left = style.left * rateX;
                    }
                    else if (style.right != undefined) {
                        tempStyle.left = screenWidth - realSize.width - (style.right * rateX);
                    }
                    if (style.centerY != undefined) {
                        tempStyle.top = (screenHeight - realSize.height) / 2 + style.centerY;
                    }
                    else if (style.top != undefined) {
                        tempStyle.top = style.top * rateY;
                    }
                    else if (style.bottom != undefined) {
                        tempStyle.top = screenHeight - realSize.height - (style.bottom * rateY);
                    }
                }
                tempSize = size ? size : tempSize;
                tempOrientation = orientation ? orientation : tempOrientation;
                let blockAd = this.qq.createBlockAd({
                    adUnitId: adUnitId,
                    style: tempStyle,
                    size: tempSize,
                    orientation: tempOrientation
                });
                blockAd.onLoad(function () {
                    self.mBlockAdMap[adUnitId] = blockAd;
                    if (blockAd && self.mIsShowBlock) {
                        blockAd.show();
                        self.mIsShowBanner = false;
                    }
                    else {
                        blockAd.hide();
                    }
                });
                blockAd.onResize(realSize => {
                    let systemInfo = self.getSystemInfoSync();
                    let screenWidth = systemInfo.screenWidth;
                    let screenHeight = systemInfo.screenHeight;
                    let rateX = screenWidth / Laya.stage.width;
                    let rateY = screenHeight / Laya.stage.height;
                    if (style.centerX != undefined) {
                        blockAd.style.left = (screenWidth - realSize.width) / 2 + style.centerX;
                    }
                    else if (style.left != undefined) {
                        blockAd.style.left = style.left * rateX;
                    }
                    else if (style.right != undefined) {
                        blockAd.style.left = screenWidth - realSize.width - (style.right * rateX);
                    }
                    if (style.centerY != undefined) {
                        blockAd.style.top = (screenHeight - realSize.height) / 2 + style.centerY;
                    }
                    else if (style.top != undefined) {
                        blockAd.style.top = style.top * rateY;
                    }
                    else if (style.bottom != undefined) {
                        blockAd.style.top = screenHeight - realSize.height - (style.bottom * rateY);
                    }
                    let wrongClick = Laya.stage.getChildByName(SelfGameConfig.NAME_WRONGCLICK_DIALOG);
                    if (wrongClick) {
                    }
                });
                blockAd.onError(data => {
                    console.log("blockAd err -- ", adUnitId, " detail: ", data);
                });
            }
            else {
                console.log("CreateblockAd error: SDKversion not high enough for blockAd ==============");
            }
        }
        showBlockAd(adUnitId) {
            this.hideBlockAd();
            if (adUnitId) {
                let adId = this.blockIdMap[adUnitId];
                let blockAd;
                if (adId) {
                    blockAd = this.mBlockAdMap[adId];
                }
                if (blockAd) {
                    blockAd.show();
                    this.mIsShowBlock = true;
                }
            }
        }
        hideBlockAd(adUnitId) {
            if (adUnitId) {
                let adId = this.blockIdMap[adUnitId];
                let blockAd;
                if (adId) {
                    blockAd = this.mBlockAdMap[this.blockIdMap[adUnitId]];
                }
                if (blockAd) {
                    blockAd.hide();
                }
            }
            else {
                for (let key in this.mBlockAdMap) {
                    let blockAd = this.mBlockAdMap[key];
                    blockAd.hide();
                }
            }
            this.mIsShowBlock = false;
        }
        setBannerPos(pos) {
        }
        preloadNativeInnerInterstitial() {
        }
        checkInnerInterstitialNative() {
            return false;
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return false;
        }
        hideInnerInterstitialNative() {
        }
        clickNativeAd() {
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
        }
        isSupportGamesModal() {
            return false;
        }
        showGameBannerBox() {
        }
        hideGameBannerBox() {
        }
        setOnClickInnerInterstitialBtn(callback) {
        }
        setBannerHeight() {
        }
    }

    class PoolManager {
        constructor() {
        }
        static recover(sign, item) {
            if (!this.poolNameObj[sign]) {
                this.poolNameObj[sign] = sign;
            }
            if (item) {
                item.active = false;
            }
            Laya.Pool.recover(sign, item);
        }
        static getItem(sign) {
            var item = Laya.Pool.getItem(sign);
            if (item) {
                item.active = true;
            }
            return item;
        }
        static clearAll() {
            for (var key in this.poolNameObj) {
                Laya.Pool.clearBySign(key);
            }
            this.poolNameObj = {};
        }
    }
    PoolManager.poolNameObj = {};

    class Globals {
        static resetData() {
            this.currentSceneInfo = null;
            PoolManager.clearAll();
        }
    }
    Globals.levelConfig = new Array();
    Globals.maxLevel = 1;
    Globals.isTest = false;
    Globals.bg3dConfig = [
        {
            bg: "bg3d/bg1.png",
            fog: new Laya.Vector3(137 / 255, 230 / 255, 1)
        },
        {
            bg: "bg3d/bg2.png",
            fog: new Laya.Vector3(255 / 255, 160 / 255, 136 / 255)
        }
    ];
    Globals.defaultColorConfig = new ColorConfig({
        main: [97, 137, 176, 255],
        fresnel: [111, 150, 188, 255]
    });
    Globals.roleColorConfig = [
        new ColorConfig({
            main: [239, 63, 38, 255],
            fresnel: [255, 159, 57, 255],
            ui: "ef3f26"
        }),
        new ColorConfig({
            main: [0, 37, 210, 255],
            fresnel: [18, 226, 255, 255],
            ui: "0a00fd"
        })
    ];
    Globals.currentRolesConfigNum = 0;
    Globals.isResLoadedAfterShow = false;
    Globals.animLabelIndexNow = 0;

    class HatProgressInfo {
        constructor(length) {
            this.indexUsingNow = 0;
            this.indexTryingNow = 0;
            this.levelProgress = {};
            this.tryOnProgress = {};
            this.unlockStatus = [true];
            for (let i = 1; i < length; i++) {
                this.unlockStatus.push(false);
            }
        }
    }

    class HatManager {
        constructor() {
            this.DATA_HAT_PROGRESS = "hat_progress";
            this.ROLE_VISUAL_STATUS_TYPE = 2;
        }
        static getInstance() {
            if (!this.instance) {
                this.instance = new HatManager();
            }
            return this.instance;
        }
        init(config) {
            this.config = config;
            this.indexForOnline = new Array();
            this.indexForLevelUp = new Array();
            this.indexForKeyOpen = new Array();
            this.indexForTryOn = new Array();
            for (let i in this.config) {
                if (this.config[i].onlineUnlock) {
                    this.indexForOnline.push(this.config[i].id);
                }
                else if (this.config[i].levelUnlock) {
                    this.indexForLevelUp.push(this.config[i].id);
                }
                else if (this.config[i].keyOpenUnlock) {
                    this.indexForKeyOpen.push(this.config[i].id);
                }
                else if (this.config[i].tryOnUnlock) {
                    this.indexForTryOn.push(this.config[i].id);
                }
            }
            this.getProgress();
        }
        getProgress() {
            this.progress = LocalStorageUtils.getJson(this.DATA_HAT_PROGRESS, null);
            if (!this.progress) {
                this.progress = new HatProgressInfo(this.config.length);
            }
            if (this.progress.indexTryingNow > 0) {
                this.progress.indexTryingNow = 0;
            }
        }
        setProgress() {
            LocalStorageUtils.setJson(this.DATA_HAT_PROGRESS, this.progress);
        }
        unlock(index, use) {
            this.progress.unlockStatus[index] = true;
            if (use) {
                this.progress.indexUsingNow = index;
                this.progress.indexTryingNow = 0;
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
            }
            this.setProgress();
        }
        tryOn(index) {
            if (this.progress.tryOnProgress["" + index]) {
                this.progress.tryOnProgress["" + index] += 1;
                if (this.progress.tryOnProgress["" + index] == HatManager.TRY_ON_TIMES_NEED) {
                    this.unlock(index, true);
                }
                else {
                    this.progress.indexTryingNow = index;
                    this.setProgress();
                    Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
                }
            }
            else {
                this.progress.tryOnProgress["" + index] = 1;
                this.progress.indexTryingNow = index;
                this.setProgress();
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
            }
        }
        tryOver() {
            if (this.progress.indexTryingNow > 0) {
                this.progress.indexTryingNow = 0;
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
                this.setProgress();
            }
        }
        getIndexUsing() {
            if (this.progress.indexTryingNow > 0) {
                return this.progress.indexTryingNow;
            }
            else {
                return this.progress.indexUsingNow;
            }
        }
        change(index) {
            if (this.progress.unlockStatus[index]) {
                this.progress.indexUsingNow = index;
                this.progress.indexTryingNow = 0;
                this.setProgress();
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.ROLE_VISUAL_STATUS_TYPE);
            }
        }
        resetStatus() {
            this.progress.indexTryingNow = 0;
            this.progress.indexUsingNow = 0;
            this.setProgress();
        }
        getLockedArray(type) {
            let arrReturn = new Array();
            let arrTarget;
            switch (type) {
                case HatManager.TYPE.type_key: {
                    arrTarget = this.indexForKeyOpen;
                    break;
                }
                case HatManager.TYPE.type_level: {
                    arrTarget = this.indexForLevelUp;
                    break;
                }
                case HatManager.TYPE.type_online: {
                    arrTarget = this.indexForOnline;
                    break;
                }
                case HatManager.TYPE.type_try: {
                    arrTarget = this.indexForTryOn;
                    break;
                }
                default: {
                    console.log("类型错误");
                    return null;
                }
            }
            for (let i in arrTarget) {
                if (!this.progress.unlockStatus[arrTarget[i]]) {
                    arrReturn.push(arrTarget[i]);
                }
            }
            return arrReturn;
        }
        getTryOnProgress(index) {
            if (!this.progress.tryOnProgress["" + index]) {
                return 0;
            }
            else {
                return this.progress.tryOnProgress["" + index];
            }
        }
    }
    HatManager.LEVEL_PROGRESS_NEED = 100;
    HatManager.TRY_ON_TIMES_NEED = 3;
    HatManager.CURRENCY_NEED = 7000;
    HatManager.TYPE = {
        type_online: 0,
        type_level: 1,
        type_key: 2,
        type_try: 3
    };

    class DataManager {
        static getCoinNum() {
            return LocalStorageUtils.getInt(this.DATA_COIN_NUM, 0);
        }
        static changeCoinNum(value) {
            LocalStorageUtils.setInt(this.DATA_COIN_NUM, this.getCoinNum() + value);
        }
        static getCurrentLevel() {
            return LocalStorageUtils.getInt(this.DATA_CURRENT_LEVEL, 0);
        }
        static getTotalLevel() {
            return LocalStorageUtils.getInt(this.DATA_TOTAL_LEVEL, 0);
        }
        static addCurrentLevel() {
            let nextLevel;
            let totalLevel = (this.getTotalLevel() + 1);
            if (totalLevel >= Globals.maxLevel) {
                nextLevel = 2 + (totalLevel - 2) % (Globals.maxLevel - 2);
            }
            else {
                nextLevel = totalLevel;
            }
            LocalStorageUtils.setInt(this.DATA_CURRENT_LEVEL, nextLevel);
            LocalStorageUtils.setInt(this.DATA_TOTAL_LEVEL, totalLevel);
        }
        static isVibrate() {
            return LocalStorageUtils.getBoolean(SelfGameConfig.DATA_SETTING_VIBRATE, true);
        }
        static setVibrate(b) {
            SdkCenter.getInstannce().setVibrate(b);
            LocalStorageUtils.setBoolean(SelfGameConfig.DATA_SETTING_VIBRATE, b);
        }
        static isSound() {
            return LocalStorageUtils.getBoolean(SelfGameConfig.DATA_SETTING_SOUND, true);
        }
        static setSound(b) {
            LocalStorageUtils.setBoolean(SelfGameConfig.DATA_SETTING_SOUND, b);
        }
        static isBgm() {
            return LocalStorageUtils.getBoolean("setting_bgm", true);
        }
        static setBgm(b) {
            LocalStorageUtils.setBoolean("setting_bgm", b);
        }
        static isWhiteScene() {
            return LocalStorageUtils.getBoolean("setting_white_scene", false);
        }
        static setWhiteScene(b) {
            LocalStorageUtils.setBoolean("setting_white_scene", b);
        }
        static checkValue(value, defaultValue) {
            if (!value || value == "" || value == "null" || value == "undefined") {
                return defaultValue;
            }
            else {
                return value;
            }
        }
        static checkInt(value) {
            if (value == undefined || value == null || value == "" || value == "null" || value == "undefined") {
                return 0;
            }
            else {
                let val = parseInt(value);
                if (isNaN(val) == true) {
                    return 0;
                }
                else {
                    return val;
                }
            }
        }
        static shuffle(arr, returnNew) {
            var temArr;
            if (arr) {
                if (returnNew) {
                    temArr = JSON.parse(JSON.stringify(arr));
                }
                else {
                    temArr = arr;
                }
                for (var j = 0, x, i = temArr.length; i >= 1; j = parseInt(Math.random() * i + "")) {
                    x = temArr[--i];
                    temArr[i] = temArr[j];
                    temArr[j] = x;
                }
                return temArr;
            }
        }
        static numToFStr(num) {
            let e;
            let i;
            return num >= Math.pow(1e3, 12) ? (i = num / Math.pow(1e3, 12),
                e = Math.floor(10 * i) / 10 + "AH") : num >= Math.pow(1e3, 11) ? (i = num / Math.pow(1e3, 11),
                e = Math.floor(10 * i) / 10 + "AG") : num >= Math.pow(1e3, 10) ? (i = num / Math.pow(1e3, 10),
                e = Math.floor(10 * i) / 10 + "AF") : num >= Math.pow(1e3, 9) ? (i = num / Math.pow(1e3, 9),
                e = Math.floor(10 * i) / 10 + "AE") : num >= Math.pow(1e3, 8) ? (i = num / Math.pow(1e3, 8),
                e = Math.floor(10 * i) / 10 + "AD") : num >= Math.pow(1e3, 7) ? (i = num / Math.pow(1e3, 7),
                e = Math.floor(10 * i) / 10 + "AC") : num >= Math.pow(1e3, 6) ? (i = num / Math.pow(1e3, 6),
                e = Math.floor(10 * i) / 10 + "AB") : num >= Math.pow(1e3, 5) ? (i = num / Math.pow(1e3, 5),
                e = Math.floor(10 * i) / 10 + "AA") : num >= Math.pow(1e3, 4) ? (i = num / Math.pow(1e3, 4),
                e = Math.floor(10 * i) / 10 + "T") : num >= Math.pow(1e3, 3) ? (i = num / Math.pow(1e3, 3),
                e = Math.floor(10 * i) / 10 + "B") : num >= Math.pow(1e3, 2) ? (i = num / Math.pow(1e3, 2),
                e = Math.floor(10 * i) / 10 + "M") : num >= 1e3 ? (i = num / 1e3,
                e = Math.floor(10 * i) / 10 + "K") : e = Math.floor(num), e;
        }
        static loadJson(name, callback, repeatCount) {
            var self = this;
            Laya.loader.load("res2d/config/" + name + ".json", Laya.Handler.create(this, function () {
                let obj = Laya.loader.getRes("res2d/config/" + name + ".json");
                if (!obj) {
                    let count = repeatCount ? repeatCount : 1;
                    if (count > self.MAX_RELOAD_JSON) {
                        SdkCenter.getInstannce().showToast("资源加载失败，请重启游戏");
                        return;
                    }
                    Laya.timer.once(1000, self, function () {
                        self.loadJson(name, callback, ++count);
                    });
                    return;
                }
                if (callback) {
                    callback(obj);
                }
            }), null, Laya.Loader.JSON);
        }
        static getEnergyNum() {
            return LocalStorageUtils.getInt("DATA_ENERGY", 0);
        }
        static setEnergyNum(num) {
            LocalStorageUtils.setInt("DATA_ENERGY", num);
        }
        static changeEnergyNum(num) {
            let numLast = this.getEnergyNum();
            let numNow = numLast + num;
            this.setEnergyNum((numNow > 99) ? 99 : numNow);
        }
        static getIfOriginEnergyGot() {
            return LocalStorageUtils.getBoolean("DATA_ORIGIN_ENERGY_GOT", false);
        }
        static setOriginEnergyGot() {
            LocalStorageUtils.setBoolean("DATA_ORIGIN_ENERGY_GOT", true);
        }
        static getAddToDeskTopTimes() {
            return LocalStorageUtils.getInt("DATA_ADD_TO_DESKTOP_TIMES", 0);
        }
        static changeAddToDeskTopTimes(change) {
            LocalStorageUtils.setInt("DATA_ADD_TO_DESKTOP_TIMES", this.getAddToDeskTopTimes() + change);
        }
        static getSpeedLevel() {
            return LocalStorageUtils.getInt("DATA_SPEED_LEVEL", 1);
        }
        static addSpeedLevel(level) {
            let num = this.getSpeedLevel();
            num += level;
            if (num > 100) {
                num = 100;
            }
            LocalStorageUtils.setInt("DATA_SPEED_LEVEL", num);
        }
        static getPowerLevel() {
            return LocalStorageUtils.getInt("DATA_POWER_LEVEL", 1);
        }
        static addPowerLevel(level) {
            let num = this.getPowerLevel();
            num += level;
            if (num > 100) {
                num = 100;
            }
            LocalStorageUtils.setInt("DATA_POWER_LEVEL", num);
        }
        static getSkinOnlineUnlockStatus() {
            let data = LocalStorageUtils.getJson(this.DATA_SKIN_ONLINE_UNLOCK_STATUS, null);
            let needNew = false;
            if (data) {
                let dateToday = new Date();
                if (!(data.date.year == dateToday.getFullYear() && data.date.month == dateToday.getMonth() && data.date.day == dateToday.getDate())) {
                    if (!data.unlocked) {
                        data.date = {
                            year: dateToday.getFullYear(),
                            month: dateToday.getMonth(),
                            day: dateToday.getDate()
                        };
                    }
                    else {
                        if (data.skinIndexTommorrow > 0) {
                            let isReal = false;
                            let arr = SkinManager.getInstance().getLockedArray(SkinManager.TYPE.type_online);
                            for (let i in arr) {
                                if (data.skinIndexTommorrow == arr[i]) {
                                    isReal = true;
                                    break;
                                }
                            }
                            if (isReal) {
                                let nextSkin = -1;
                                let nextHat = -1;
                                if (arr.length > 1) {
                                    arr = Utils.shuffleArr(arr);
                                    for (let i in arr) {
                                        if (data.skinIndexTommorrow != arr[i]) {
                                            nextSkin = arr[i];
                                            break;
                                        }
                                    }
                                }
                                if (nextSkin < 0) {
                                    let newArr = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_online);
                                    newArr = Utils.shuffleArr(newArr);
                                    for (let i in newArr) {
                                        nextHat = newArr[i];
                                        break;
                                    }
                                }
                                let newData = {
                                    skinIndex: data.skinIndexTommorrow,
                                    hatIndex: -1,
                                    skinIndexTommorrow: nextSkin,
                                    hatIndexTommorrow: nextHat,
                                    date: {
                                        year: dateToday.getFullYear(),
                                        month: dateToday.getMonth(),
                                        day: dateToday.getDate()
                                    },
                                    unlocked: false
                                };
                                data = newData;
                            }
                            else {
                                needNew = true;
                            }
                        }
                        else if (data.hatIndexTommorrow) {
                            let isReal = false;
                            let arr = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_online);
                            for (let i in arr) {
                                if (data.hatIndexTommorrow == arr[i]) {
                                    isReal = true;
                                    break;
                                }
                            }
                            if (isReal) {
                                let nextHat = -1;
                                if (arr.length > 1) {
                                    arr = Utils.shuffleArr(arr);
                                    for (let i in arr) {
                                        if (data.hatIndexTommorrow != arr[i]) {
                                            nextHat = arr[i];
                                            break;
                                        }
                                    }
                                }
                                let newData = {
                                    skinIndex: -1,
                                    hatIndex: data.hatIndexTommorrow,
                                    skinIndexTommorrow: -1,
                                    hatIndexTommorrow: nextHat,
                                    date: {
                                        year: dateToday.getFullYear(),
                                        month: dateToday.getMonth(),
                                        day: dateToday.getDate()
                                    },
                                    unlocked: false
                                };
                                data = newData;
                            }
                            else {
                                needNew = true;
                            }
                        }
                        else {
                            needNew = true;
                        }
                    }
                }
            }
            else {
                needNew = true;
            }
            if (needNew) {
                let skinIndex = -1;
                let hatIndex = -1;
                let skinIndexTommorrow = -1;
                let hatIndexTommorrow = -1;
                let arrSkin = SkinManager.getInstance().getLockedArray(SkinManager.TYPE.type_online);
                if (arrSkin.length > 0) {
                    arrSkin = Utils.shuffleArr(arrSkin);
                    skinIndex = arrSkin[0];
                    if (arrSkin.length > 1) {
                        skinIndexTommorrow = arrSkin[1];
                    }
                }
                let arrHat = HatManager.getInstance().getLockedArray(SkinManager.TYPE.type_online);
                if (arrHat.length > 0) {
                    arrHat = Utils.shuffleArr(arrHat);
                    if (skinIndex < 0) {
                        hatIndex = arrHat[0];
                        if (arrHat.length > 1) {
                            hatIndexTommorrow = arrHat[1];
                        }
                    }
                    else {
                        hatIndexTommorrow = arrHat[0];
                    }
                }
                let date = new Date();
                let defaultData = {
                    skinIndex: skinIndex,
                    hatIndex: hatIndex,
                    skinIndexTommorrow: skinIndexTommorrow,
                    hatIndexTommorrow: hatIndexTommorrow,
                    date: {
                        year: date.getFullYear(),
                        month: date.getMonth(),
                        day: date.getDate()
                    },
                    unlocked: false
                };
                data = defaultData;
            }
            Globals.skinOnlineUnlockStatus = data;
            this.setSkinOnlineUnlockStatus();
        }
        static setSkinOnlineUnlockStatus(setUnlock) {
            if (setUnlock) {
                Globals.skinOnlineUnlockStatus.unlocked = true;
                if (Globals.skinOnlineUnlockStatus.skinIndex > 0) {
                    SkinManager.getInstance().unlock(Globals.skinOnlineUnlockStatus.skinIndex);
                }
                else if (Globals.skinOnlineUnlockStatus.hatIndex > 0) {
                    HatManager.getInstance().unlock(Globals.skinOnlineUnlockStatus.hatIndex);
                }
            }
            LocalStorageUtils.setJson(this.DATA_SKIN_ONLINE_UNLOCK_STATUS, Globals.skinOnlineUnlockStatus);
        }
        static getKeyNum() {
            let keyNum = LocalStorageUtils.getInt("DATA_KEY_NUM", 0);
            return keyNum > 3 ? 3 : keyNum;
        }
        static changeKeyNum(change) {
            let num = this.getKeyNum() + change;
            LocalStorageUtils.setInt("DATA_KEY_NUM", num < 0 ? 0 : num);
        }
        static checkIsNewPlayer() {
            let played = LocalStorageUtils.getBoolean("data_played", false);
            LocalStorageUtils.getBoolean("data_played", true);
            return !played;
        }
    }
    DataManager.MAX_RELOAD_JSON = 5;
    DataManager.DATA_CURRENT_LEVEL = "current_level";
    DataManager.DATA_TOTAL_LEVEL = "total_level";
    DataManager.DATA_COIN_NUM = "coin_num";
    DataManager.DATA_SKIN_ONLINE_UNLOCK_STATUS = "skin_online_unlock_status";

    class IggSdkUtils {
        constructor() {
            this.GC = Laya.Browser.window.GC;
            this.loadInterst = false;
            this.loadReward = false;
            this.isShowAds = false;
        }
        login() { }
        init(params, callback) {
            callback();
            var self = this;
            if (this.GC) {
                this.GC.init({
                    gameId: "100793",
                    token: "100008%3AN2RiNjU2YjUzZmVlNmVjZGRmNjJiZjZlOWM1YmIzMGQ2YzlhODU5NWY3MmE5OGM3Y2JlOTNkMWUwMmQwYzUzZQ%3D%3D%3AeyAiQ1BJZCI6ICIxNDQiLCAiR2FtZUlkIjogMCwgIkV4cGlyZVRpbWUiOiA0Mjk0OTY3Mjk1IH0%3D",
                    debug: false,
                }).then(() => {
                    console.log("===igg初始化成功");
                    setTimeout(() => {
                        self.GC.loadAd({
                            unitId: '144-2-472764901479239680'
                        }).then(adCallbackResult => {
                            console.log("====Interst preload====");
                            self.loadInterst = true;
                        });
                        self.GC.loadAd({
                            unitId: '144-4-472764988544602112'
                        }).then(adCallbackResult => {
                            console.log("====reward preload====");
                            self.loadReward = true;
                        });
                    }, 6000);
                }).catch(err => {
                    console.error(err);
                });
            }
        }
        setLoadingProgress(progress) {
        }
        setBannerPos(pos) {
        }
        preloadNativeInnerInterstitial() {
        }
        hideInnerInterstitialNative() {
        }
        clickNativeAd() {
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
        }
        hideAppBox() {
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
        }
        isSupportGamesModal() {
            return false;
        }
        showGameBannerBox() {
        }
        setOnClickInnerInterstitialBtn(callback) {
        }
        setBannerHeight() {
        }
        hideGameBannerBox() {
        }
        checkInnerInterstitialNative() {
            return false;
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return false;
        }
        loadSubpackage(nameArr, success, fail) {
            success();
        }
        vibrateShort(success, fail, complete) {
            if (this.GC) {
                if (this.GC.canIUse('vibrateShort')) {
                    this.GC.vibrateShort()
                        .then(() => {
                    })
                        .catch(err => {
                        console.error(err);
                    });
                }
            }
        }
        vibrateLong(success, fail, complete) {
            if (this.GC) {
                if (this.GC.canIUse('vibrateLong')) {
                    this.GC.vibrateLong()
                        .then(() => {
                    })
                        .catch(err => {
                        console.error(err);
                    });
                }
            }
        }
        onShow(callback) {
        }
        onHide(callback) {
        }
        showToast(title, icon, img) {
        }
        hideToast() {
        }
        showLoading(title) {
        }
        hideLoading() {
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            onTap(null);
        }
        postMessage(message) {
        }
        showModal(modalInfo) {
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
        }
        loadIGGReward() {
            this.GC.loadAd({
                unitId: '144-4-472764988544602112'
            }).then(adCallbackResult => {
                this.loadReward = true;
            });
        }
        loadIGGIniterst() {
            this.GC.loadAd({
                unitId: '144-2-472764901479239680'
            }).then(adCallbackResult => {
                this.loadInterst = true;
            });
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel) {
            if (!this.GC) {
                return;
            }
            if (DataManager.getCurrentLevel() <= 2) {
                onSuccess();
                return;
            }
            var self = this;
            if (this.isShowAds) {
                return;
            }
            this.isShowAds = true;
            setTimeout(() => {
                self.isShowAds = false;
            }, 1500);
            AudioManager.stopBgm();
            if (this.loadReward) {
                this.GC.showAd({
                    unitId: '144-4-472764988544602112'
                }).then(adCallbackResult => {
                    console.log("====rewwar show====");
                    if (onSuccess) {
                        onSuccess();
                    }
                    AudioManager.playBgm();
                    this.loadReward = false;
                }).catch(err => {
                    AudioManager.playBgm();
                    this.loadReward = false;
                });
            }
            else {
                this.GC.loadAd({
                    unitId: '144-4-472764988544602112'
                }).then(adCallbackResult => {
                    console.log("====rewwar load 2====");
                    self.GC.showAd({
                        unitId: '144-4-472764988544602112'
                    }).then(adCallbackResult => {
                        if (onSuccess) {
                            onSuccess();
                        }
                        AudioManager.playBgm();
                        self.loadReward = false;
                        console.log("====rewwar show2 2====");
                        self.loadIGGReward();
                    }).catch(err => {
                        AudioManager.playBgm();
                        console.log(err.data);
                    });
                });
            }
        }
        isShowingRewardedVideoAd() {
            return false;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
        }
        getSystemInfoSync() {
            let systemInfo = new SystemInfo();
            systemInfo.windowHeight = Laya.stage.height;
            systemInfo.windowWidth = Laya.stage.width;
            systemInfo.screenWidth = Laya.stage.width;
            systemInfo.screenHeight = Laya.stage.height;
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
        }
        showBanner(adUnitId) {
        }
        hideBanner(adUnitId) {
        }
        destroyBanner(adUnitId) {
        }
        createInterstitialAd(adUnitId, onClose) {
            return null;
        }
        showInterstitialAd(adUnitId) {
            if (!this.GC) {
                return;
            }
            var self = this;
            if (this.isShowAds) {
                return;
            }
            this.isShowAds = true;
            setTimeout(() => {
                self.isShowAds = false;
            }, 1500);
            AudioManager.stopBgm();
            if (this.loadInterst) {
                this.GC.showAd({
                    unitId: '144-2-472764901479239680'
                }).then(adCallbackResult => {
                    console.log("====interst show====");
                    self.loadInterst = false;
                    AudioManager.playBgm();
                }).catch(err => {
                    AudioManager.playBgm();
                    self.loadInterst = false;
                });
            }
            else {
                this.GC.loadAd({
                    unitId: '144-2-472764901479239680'
                }).then(adCallbackResult => {
                    console.log("====interst load 2====");
                    self.GC.showAd({
                        unitId: '144-2-472764901479239680'
                    }).then(adCallbackResult => {
                        self.loadInterst = false;
                        console.log("====interst show2 2====");
                        self.loadIGGIniterst();
                        AudioManager.playBgm();
                    }).catch(err => {
                        AudioManager.playBgm();
                        console.log(err.data);
                    });
                }).catch(err => {
                    AudioManager.playBgm();
                    self.loadInterst = false;
                });
            }
        }
        navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion) {
            if (success) {
                success();
            }
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
        }
        hideNativeBanner() {
        }
        exitGame() {
        }
        showAppBox(onClose) {
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        showMoreGamesModal() {
        }
        aldSendEvent(name, keyValue) {
        }
        getUserInfo() {
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        getCloseDelayTime() {
            return 0;
        }
        requestSubscribeMessage(success, fail, initiatively) {
        }
        showLatticeAd() {
        }
        hideLatticeAd() {
        }
        addColorSign(success, fail, complete) {
        }
        createBlockAd(adUnitId, style, size, orientation) { }
        showBlockAd(adUnitId) { }
        hideBlockAd(adUnitId) { }
    }

    class FbSdkUtils {
        constructor() {
            this.FBInstant = Laya.Browser.window.FBInstant;
            this.loadInterst = false;
            this.loadReward = false;
            this.isShowAds = false;
            this.progress = 0;
        }
        login() { }
        funProgress() {
            if (this.progress <= 10) {
                this.FBInstant.setLoadingProgress((this.progress * 10));
                this.progress++;
                Laya.timer.once(200, this, function s() {
                    this.funProgress();
                });
            }
            else {
                this.progress++;
                this.FBInstant.startGameAsync().then(function () {
                });
            }
        }
        init(params, callback) {
            var self = this;
            callback();
            this._refushInterst = Date.now();
            this._refushBanner = Date.now();
        }
        setLoadingProgress(progress) {
        }
        setBannerPos(pos) {
        }
        preloadNativeInnerInterstitial() {
        }
        hideInnerInterstitialNative() {
        }
        clickNativeAd() {
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
        }
        hideAppBox() {
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
        }
        isSupportGamesModal() {
            return false;
        }
        showGameBannerBox() {
        }
        setOnClickInnerInterstitialBtn(callback) {
        }
        setBannerHeight() {
        }
        hideGameBannerBox() {
        }
        checkInnerInterstitialNative() {
            return false;
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return false;
        }
        loadSubpackage(nameArr, success, fail) {
            success();
        }
        vibrateShort(success, fail, complete) {
        }
        vibrateLong(success, fail, complete) {
        }
        onShow(callback) {
        }
        onHide(callback) {
        }
        showToast(title, icon, img) {
        }
        hideToast() {
        }
        showLoading(title) {
        }
        hideLoading() {
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            onTap(null);
        }
        postMessage(message) {
        }
        showModal(modalInfo) {
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
        }
        loadIGGReward() {
        }
        loadIGGIniterst() {
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel) {
            console.log("=====fb showRewardedVideoAd");
            var self = this;
            if (this.isShowAds) {
                return;
            }
            this.isShowAds = true;
            setTimeout(() => {
                self.isShowAds = false;
            }, 1500);
            AudioManager.stopBgm();
            var ad = null;
            

            this.FBInstant.getRewardedVideoAsync('654462512303331_664134041336178').then(function (rewardedVideo) {
                console.log("显示RewardedVideoAd__fb_load");
                ad = rewardedVideo;
                return ad.loadAsync();
            }).then(function () {
                console.log("显示RewardedVideoAd__fb_show");
                return ad.showAsync();
            }).then(function () {
                console.log("显示RewardedVideoAd__fb_back");
                onSuccess();
            });
            
            onSuccess();
            return;
        }
        isShowingRewardedVideoAd() {
            return false;
        }
        showShareMenu(withShareTicket, success, fail, complete) {
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
        }
        getSystemInfoSync() {
            let systemInfo = new SystemInfo();
            systemInfo.windowHeight = Laya.stage.height;
            systemInfo.windowWidth = Laya.stage.width;
            systemInfo.screenWidth = Laya.stage.width;
            systemInfo.screenHeight = Laya.stage.height;
            return systemInfo;
        }
        createBannerAd(adUnitId, style, adIntervals) {
        }
        showBanner(adUnitId) {
            console.log("==showBanner=");
            if (Date.now() - this._refushBanner >= 30000) {
                console.log("====not show=in 30s");
                this._refushBanner = Date.now();
                Laya.Browser.window.FBInstant.loadBannerAdAsync('654462512303331_664168357999413').then(() => {
                    console.log('success');
                });
            }
        }
        hideBanner(adUnitId) {
        }
        destroyBanner(adUnitId) {
        }
        createInterstitialAd(adUnitId, onClose) {
            return null;
        }
        showInterstitialAd(adUnitId) {
            if(Date.now() - this._refushInterst > 30000){
                this._refushInterst = Date.now();
                console.log("显示showInsertAd__fb");
                var self = this;
                if (this.isShowAds) { return }
                this.isShowAds = true;
                setTimeout(() => {
                    self.isShowAds = false;
                }, 1500);
                AudioManager.stopBgm();
                var preloadedInterstitial = null;
                this.FBInstant.getInterstitialAdAsync(
                    "654462512303331_664168454666070"
                ).then(function (interstitial) {
                    console.log("显示showInsertAd__fb_load");
                    preloadedInterstitial = interstitial
                    return interstitial.loadAsync();
                }).then(function (interstitial) {
                    console.log("显示showInsertAd__fb_show");
                    preloadedInterstitial.showAsync();
                }).catch(function (e) {
                });
            }
        }
        navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion) {
            if (success) {
                success();
            }
        }
        showFavoriteGuide() {
        }
        startVideoRecorder() {
        }
        stopVideoRecorder(callback) {
        }
        onAntiAddiction(callback) {
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
        }
        createNativeAd(adUnitId) {
        }
        showNativeAd(posX, posY, isWrongClick) {
            return null;
        }
        hideNativeAd() {
        }
        createNativeBanner(adUnitId, node) {
        }
        showNativeBanner(node) {
        }
        hideNativeBanner() {
        }
        exitGame() {
        }
        showAppBox(onClose) {
        }
        createMoreGamesButton() {
        }
        showMoreGamesButton() {
        }
        hideMoreGamesButton() {
        }
        showMoreGamesModal() {
        }
        aldSendEvent(name, keyValue) {
        }
        getUserInfo() {
        }
        getRole(params, callback) {
        }
        updateRole(data, callback) {
        }
        getRank(num, callback) {
        }
        createDrawAd() {
        }
        showDrawAd(b) {
        }
        getCloseDelayTime() {
            return 0;
        }
        requestSubscribeMessage(success, fail, initiatively) {
        }
        showLatticeAd() {
        }
        hideLatticeAd() {
        }
        addColorSign(success, fail, complete) {
        }
        createBlockAd(adUnitId, style, size, orientation) { }
        showBlockAd(adUnitId) { }
        hideBlockAd(adUnitId) { }
    }

    class SdkCenter {
        constructor() {
            this.mIsCpSdk = false;
            this.mIsVibrate = true;
        }
        static getInstannce() {
            if (this.mInstance == null) {
                this.mInstance = new SdkCenter();
            }
            return this.mInstance;
        }
        init(params, callback) {
            if (this.isLw()) {
                console.log("Lw创建");
                this.mSdk = new LwSdkUtils();
            }
            else if (this.isWx()) {
                console.log("Weixin创建");
                this.mSdk = new WxSdkUtils();
            }
            else if (this.isIGG()) {
                this.mSdk = new IggSdkUtils();
            }
            else if (this.isFB()) {
                this.mSdk = new FbSdkUtils();
            }
            else if (this.isSyyx()) {
                console.log("第三方创建");
                this.mIsCpSdk = true;
                this.mSdk = new SyyxSdkUtils();
            }
            else if (this.isQQ()) {
                console.log("手Q创建");
                this.mSdk = new QQSdkUtils();
            }
            else if (this.isAndroid()) {
                console.log("手Q创建");
                this.mSdk = new CommonSdkUtils();
            }
            else {
                console.log("Web 创建");
                this.mSdk = new CommonSdkUtils();
            }
            this.mSdk.init(params, callback);
        }
        isFB() {
            return true;
        }
        isIGG() {
            return false;
        }
        setLoadingProgress(progress) {
            this.mSdk.setLoadingProgress(progress);
        }
        loadSubpackage(nameArr, success, fail) {
            this.mSdk.loadSubpackage(nameArr, success, fail);
        }
        vibrateShort(success, fail, complete) {
            if (this.mIsVibrate) {
                this.mSdk.vibrateShort(success, fail, complete);
            }
        }
        vibrateLong(success, fail, complete) {
            if (this.mIsVibrate) {
                this.mSdk.vibrateLong(success, fail, complete);
            }
        }
        setVibrate(b) {
            this.mIsVibrate = b;
        }
        onShow(callback) {
            this.mSdk.onShow(callback);
        }
        onHide(callback) {
            this.mSdk.onHide(callback);
        }
        showToast(title, icon, img) {
            console.log(" showToast---->  ", title);
            this.mSdk.showToast(title, icon, img);
        }
        hideToast() {
            this.mSdk.hideToast();
        }
        showLoading(title) {
            this.mSdk.showLoading(title);
        }
        hideLoading() {
            this.mSdk.hideLoading();
        }
        createUserInfoButton(onTap, type, text, image, style, withCredentials, lang) {
            this.mSdk.createUserInfoButton(onTap, type, text, image, style, withCredentials, lang);
        }
        postMessage(message) {
            this.mSdk.postMessage(message);
        }
        showModal(modalInfo) {
            this.mSdk.showModal(modalInfo);
        }
        createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError) {
            this.mSdk.createRewardedVideoAd(adUnitId, onSuccess, onCancel, onError);
        }
        showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel, extraData) {
            this.mSdk.showRewardedVideoAd(adUnitId, onSuccess, onError, onCancel);
        }
        isShowingRewardedVideoAd() {
            return this.mSdk.isShowingRewardedVideoAd();
        }
        showShareMenu(withShareTicket, success, fail, complete) {
            this.mSdk.showShareMenu(withShareTicket, success, fail, complete);
        }
        onShareAppMessage(title, imageUrl, query, imageUrlId) {
            this.mSdk.onShareAppMessage(title, imageUrl, query, imageUrlId);
        }
        shareAppMessage(title, imageUrl, query, imageUrlId) {
            this.mSdk.shareAppMessage(title, imageUrl, query, imageUrlId);
        }
        getSystemInfoSync() {
            return this.mSdk.getSystemInfoSync();
        }
        createBannerAd(adUnitId, style, adIntervals) {
            return this.mSdk.createBannerAd(adUnitId, style, adIntervals);
        }
        showBanner(adUnitId, isCreateNew) {
            this.mSdk.showBanner(adUnitId, isCreateNew);
        }
        hideBanner(adUnitId) {
            this.mSdk.hideBanner(adUnitId);
        }
        destroyBanner(adUnitId) {
            this.mSdk.destroyBanner();
        }
        setBannerPos(pos) {
            this.mSdk.setBannerPos(pos);
        }
        createInterstitialAd(adUnitId, onClose) {
            this.mSdk.createInterstitialAd(adUnitId, onClose);
        }
        showInterstitialAd(adUnitId, onShowCallback, onCloseCallback, onErrorCallback, isMask) {
            this.mSdk.showInterstitialAd(adUnitId, onShowCallback, onCloseCallback, onErrorCallback, isMask);
        }
        preloadNativeInnerInterstitial() {
            this.mSdk.preloadNativeInnerInterstitial();
        }
        checkInnerInterstitialNative() {
            return this.mSdk.checkInnerInterstitialNative();
        }
        showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback) {
            return this.mSdk.showInnerInterstitialNative(parent, clickCallback, showCallback, hideCallback);
        }
        hideInnerInterstitialNative() {
            this.mSdk.hideInnerInterstitialNative();
        }
        clickNativeAd() {
            this.mSdk.clickNativeAd();
        }
        createNativeAd(adUnitId) {
            this.mSdk.createNativeAd(adUnitId);
        }
        showNativeAd(posX, posY, isWrongClick) {
            return this.mSdk.showNativeAd(posX, posY, isWrongClick);
        }
        hideNativeAd() {
            this.mSdk.hideNativeAd();
        }
        createNativeBanner(adUnitId, node) {
            return this.mSdk.createNativeBanner(adUnitId, node);
        }
        showNativeBanner(node) {
            this.mSdk.showNativeBanner(node);
        }
        hideNativeBanner() {
            this.mSdk.hideNativeBanner();
        }
        addIconToLauncher(onSuccess, onFail, onComplete) {
            this.mSdk.addIconToLauncher(onSuccess, onFail, onComplete);
        }
        checkIconOnLauncher(onSuccess, onFail, onComplete) {
            this.mSdk.checkIconOnLauncher(onSuccess, onFail, onComplete);
        }
        navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion) {
            this.mSdk.navigateToMiniProgram(appId, success, fail, complete, path, extraData, envVersion);
        }
        showAppBox(onClose) {
            this.mSdk.showAppBox(onClose);
        }
        hideAppBox() {
            this.mSdk.hideAppBox();
        }
        showFavoriteGuide(callback) {
            this.mSdk.showFavoriteGuide(callback);
        }
        startVideoRecorder() {
            this.mSdk.startVideoRecorder();
        }
        stopVideoRecorder(callback) {
            this.mSdk.stopVideoRecorder(callback);
        }
        onAntiAddiction(callback) {
            this.mSdk.onAntiAddiction(callback);
        }
        shareVideo(videoPath, success, fail, complete, title, query) {
            this.mSdk.shareVideo(videoPath, success, fail, complete, query, title);
        }
        aldSendEvent(eventType, eventId, extra) {
            this.mSdk.aldSendEvent(eventType, eventId, extra);
        }
        exitGame() {
            this.mSdk.exitGame();
        }
        createMoreGamesButton(style) {
            this.mSdk.createMoreGamesButton(style);
        }
        showMoreGamesButton() {
            this.mSdk.showMoreGamesButton();
        }
        hideMoreGamesButton() {
            this.mSdk.hideMoreGamesButton();
        }
        isSupportGamesModal() {
            return this.mSdk.isSupportGamesModal();
        }
        showMoreGamesModal() {
            this.mSdk.showMoreGamesModal();
        }
        showGameBannerBox() {
            this.mSdk.showGameBannerBox();
        }
        hideGameBannerBox() {
            this.mSdk.hideGameBannerBox();
        }
        getUserInfo() {
            return this.mSdk.getUserInfo();
        }
        getRole(params, callback) {
            this.mSdk.getRole(params, callback);
        }
        updateRole(data, callback) {
            this.mSdk.updateRole(data, callback);
        }
        getRank(num, callback) {
            this.mSdk.getRank(num, callback);
        }
        createDrawAd() {
            return this.mSdk.createDrawAd();
        }
        showDrawAd(b) {
            this.mSdk.showDrawAd(b);
        }
        getCloseDelayTime() {
            return this.mSdk.getCloseDelayTime();
        }
        showFloatView(floatView) {
        }
        login(suc, fail) {
            this.mSdk.login(suc, fail);
        }
        addColorSign(success, fail, complete) {
            this.mSdk.addColorSign(success, fail, complete);
        }
        showBlockAd(any) {
            this.mSdk.showBlockAd(any);
        }
        hideBlockAd(any) {
            this.mSdk.hideBlockAd(any);
        }
        getSdk() {
            return this.mSdk;
        }
        isIphoneX() {
            var width = Laya.Browser.width;
            var height = Laya.Browser.height;
            var ratio = width > height ? (width / height) : (height / width);
            var isIphoneX = ratio > 1.95 ? true : false;
            return isIphoneX;
        }
        isPC() {
            return Laya.Browser.onPC;
        }
        isWx() {
            if (this.isLw()) {
                return false;
            }
            if (Laya.Browser.onWeiXin && Laya.Browser.onMiniGame
                && typeof (Laya.Browser.window.wx) != "undefined"
                && typeof (Laya.Browser.window.tt) == "undefined"
                && typeof (Laya.Browser.window.qq) == "undefined") {
                return true;
            }
            else {
                return false;
            }
        }
        isBd() {
            if (Laya.Browser.onBDMiniGame && typeof (Laya.Browser.window.swan) != "undefined") {
                return true;
            }
            else {
                return false;
            }
        }
        isTT() {
            if (typeof (Laya.Browser.window.tt) != "undefined") {
                return true;
            }
            else {
                return false;
            }
        }
        isOppo() {
            if (typeof (Laya.Browser.window.qg) != "undefined" && Laya.Browser.onQGMiniGame) {
                return true;
            }
            else {
                return false;
            }
            return true;
        }
        isVivo() {
            if (typeof (Laya.Browser.window.qg) != "undefined" && Laya.Browser.onVVMiniGame) {
                return true;
            }
            else {
                return false;
            }
            return true;
        }
        isQQ() {
            if (typeof (Laya.Browser.window.qq) != "undefined" && Laya.Browser.onQQMiniGame) {
                return true;
            }
            else {
                return false;
            }
        }
        is4399() {
            if (typeof (Laya.Browser.window.h5api) != "undefined" && Laya.Browser.window.h5api) {
                return true;
            }
            else {
                return false;
            }
        }
        isCpSdk() {
            return this.mIsCpSdk;
        }
        isSyyx() {
            if (this.isOppo() || this.isVivo()) {
                return true;
            }
            return false;
            return true;
        }
        isLw() {
            try {
                lwsdk;
                return true;
            }
            catch (e) {
                return false;
            }
        }
        isAndroid() {
            return false;
        }
        getClientScale() {
            var scale = Laya.stage.width / this.getSystemInfoSync().screenWidth;
            if (this.isWx()) {
                scale /= 2;
            }
            return scale;
        }
        reportMonitor(name, value) {
            if (typeof (Laya.Browser.window.qg) != "undefined" && Laya.Browser.onQGMiniGame) {
                let ver = SdkCenter.getInstannce().getSystemInfoSync().version;
                if (ver >= "1060") {
                    Laya.Browser.window.qg.reportMonitor('game_scene', 0);
                }
            }
        }
        requestSubscribeMessage(success, fail) {
            this.mSdk.requestSubscribeMessage(success, fail);
        }
        showLatticeAd() {
            this.mSdk.showLatticeAd();
        }
        hideLatticeAd() {
            this.mSdk.hideLatticeAd();
        }
        setOnClickInnerInterstitialBtn(callback) {
            this.mSdk.setOnClickInnerInterstitialBtn(callback);
        }
        setBannerHeight() {
            this.mSdk.setBannerHeight();
        }
    }
    SdkCenter.mInstance = null;

    class EffectUtils {
        static multiVibrate(times) {
            SdkCenter.getInstannce().vibrateShort();
            let timeLeft = times ? (times - 1) : 2;
            Laya.timer.loop(35, EffectUtils, function loopVibrate() {
                if ((timeLeft--) > 0) {
                    SdkCenter.getInstannce().vibrateShort();
                }
                else {
                    Laya.timer.clear(EffectUtils, loopVibrate);
                }
            });
        }
        static vibrateShort() {
            SdkCenter.getInstannce().vibrateShort();
        }
        static vibrateLong() {
            if (Laya.Browser.onIOS && UserGD.isIphoneX) {
                SdkCenter.getInstannce().vibrateShort();
            }
            else {
                SdkCenter.getInstannce().vibrateLong();
            }
        }
        static shaderLogToJson(arr, scene, cam, offsetX, other) {
            Laya.Shader3D.debugMode = true;
            for (let i = 0; i < arr.length; i++) {
                let model = Laya.loader.getRes(arr[i]).clone();
                let pos = cam.transform.position.clone();
                offsetX && (pos.x += offsetX);
                model.transform.position = pos;
                scene.addChild(model);
            }
            for (let i = 0; i < other.length; i++) {
                let model = Laya.loader.getRes(other[i]).clone();
                let pos = cam.transform.position.clone();
                offsetX && (pos.x += offsetX);
                model.transform.position = pos;
                scene.addChild(model);
            }
            Laya.stage.on(Laya.Event.MOUSE_DOWN, this, function () {
                let shaderObj = {};
                let arr;
                for (let i = 0; i < Laya.Shader3D.debugShaderVariantCollection.variantCount; i++) {
                    let shadervariant = Laya.Shader3D.debugShaderVariantCollection.getByIndex(i);
                    let shaderName = shadervariant.shader.name;
                    if (!shaderObj[shaderName])
                        shaderObj[shaderName] = [];
                    arr = shaderObj[shaderName];
                    let obj = {};
                    obj.defineNames = shadervariant.defineNames;
                    obj.passIndex = shadervariant.passIndex;
                    obj.subShaderIndex = shadervariant.subShaderIndex;
                    arr.push(obj);
                }
                console.log("shader编译信息", JSON.stringify(shaderObj));
            });
        }
        static logShaderVar() {
            let shaderObj = {};
            let arr;
            for (let i = 0; i < Laya.Shader3D.debugShaderVariantCollection.variantCount; i++) {
                let shadervariant = Laya.Shader3D.debugShaderVariantCollection.getByIndex(i);
                let shaderName = shadervariant.shader.name;
                if (!shaderObj[shaderName])
                    shaderObj[shaderName] = [];
                arr = shaderObj[shaderName];
                let obj = {};
                obj.defineNames = shadervariant.defineNames;
                obj.passIndex = shadervariant.passIndex;
                obj.subShaderIndex = shadervariant.subShaderIndex;
                arr.push(obj);
            }
            console.log("shader编译信息", JSON.stringify(shaderObj));
        }
        static initShader(shaderObj) {
            for (let key in shaderObj) {
                let arr = shaderObj[key];
                for (let index = 0; index < arr.length; index++) {
                    let obj = arr[index];
                    Laya.Shader3D.compileShaderByDefineNames(key, obj.subShaderIndex, obj.passIndex, obj.defineNames);
                }
            }
        }
    }

    class FullAd extends ui.sdk.FullAdUI {
        constructor(isSuccess, callback, awakeCallback) {
            super();
            this.mData = [];
            this.mDataTop = [];
            this.scrollDistance = 1;
            this.scrollDistanceTop = 1;
            this.maxIndex = 0;
            this.cellsNum = 0;
            this.canScroll = true;
            this.cellsLinesInView = 0;
            this.zOrder = 22;
            this.name = "FullAd";
            if (isSuccess) {
                this.isSuccess = isSuccess;
            }
            if (callback) {
                this.callback = callback;
            }
            if (awakeCallback) {
                awakeCallback();
            }
            console.log("FullAd");
        }
        onAwake() {
            this.initData();
            this.initView();
            this.eventRegister();
        }
        initView() {
            this.height = Laya.stage.height;
            this.width = Laya.stage.width;
            this.listAd.vScrollBarSkin = "";
            this.listAd.array = this.mData;
            this.listAd.renderHandler = new Laya.Handler(this, this.updateItem);
            this.maxIndex = this.mData.length;
            this.cellsNum = this.listAd.cells.length;
            this.scrollListDraw();
            this.listTop.hScrollBarSkin = "";
            this.listTop.array = this.mDataTop;
            this.listTop.renderHandler = new Laya.Handler(this, this.updateItemTop);
            this.listTop.scrollBar.mouseWheelEnable = false;
            this.listTop.scrollBar.touchScrollEnable = false;
            this.scrollListDrawTop();
            PulCenter.hideDoubleAd();
            SdkCenter.getInstannce().hideBanner();
            if (PulCenter.checkLwCondition("swipe")) {
                UserGD.canShowBanner = false;
                Laya.timer.once(LwConfig.lwCustomConfig[0] * 1000, this, () => {
                    UserGD.canShowBanner = true;
                    SdkCenter.getInstannce().showBanner("fullAd");
                    Laya.timer.once(2000, this, () => {
                        SdkCenter.getInstannce().hideBanner();
                        UserGD.canShowBanner = false;
                    });
                });
            }
            else {
                UserGD.canShowBanner = true;
                SdkCenter.getInstannce().showBanner("fullAd");
                this.btnRandomPlay.skin = this.btnContinue.skin;
                this.btnContinue.visible = false;
            }
            if (UiUtils.isAllScreen()) {
            }
            else {
                this.listAd.height = 820;
            }
            this.cellsLinesInView = Math.floor(this.listAd.height / (this.listAd.cells[0].height + this.listAd.repeatY));
        }
        initData() {
            var data = PulCenter.getWxLwInferenceData("fullAd");
            for (var i = 0; i < data.length; i++) {
                this.mData[i] = data[i];
                this.mDataTop[i] = data[i];
            }
            this.mData = Utils.shuffleArr(this.mData);
            this.mDataTop = Utils.shuffleArr(this.mDataTop);
            this.isIconVisible = PulCenter.checkDoubleAd();
        }
        eventRegister() {
            var self = this;
            var time;
            if (PulCenter.checkLwCondition("swipe")) {
                time = LwConfig.lwCustomConfig[0] * 1000 + 2000;
            }
            else {
                time = 1;
            }
            Laya.timer.once(time, this, () => {
                this.btnContinue.on(Laya.Event.CLICK, this, this.eventClose);
            });
            if (PulCenter.checkLwCondition("swipe")) {
                this.btnRandomPlay.on(Laya.Event.CLICK, this, this.randomToPlay);
            }
            else {
                this.btnRandomPlay.on(Laya.Event.CLICK, this, this.eventClose);
            }
            this.listAd.on(Laya.Event.MOUSE_DOWN, this, () => {
                self.canScroll = false;
            });
            this.listAd.on(Laya.Event.MOUSE_UP, this, () => {
                self.canScroll = true;
                self.scrollListDraw();
            });
        }
        updateItem(cell, index) {
            var self = this;
            var dataSource = cell.dataSource;
            var icon = cell.getChildByName("icon");
            var name = cell.getChildByName("name");
            icon.skin = dataSource.icon ? dataSource.icon : "";
            icon.visible = true;
            name.text = dataSource.name ? dataSource.name : "";
            if (dataSource.name.length >= 8) {
                name.fontSize = 23;
            }
            else {
                name.fontSize = 28;
            }
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                SdkCenter.getInstannce().navigateToMiniProgram(dataSource, function s() {
                }, function f() {
                }, function c() {
                });
            });
        }
        scrollListDraw() {
            var self = this;
            if (this.canScroll) {
                Laya.timer.once(2000, this, function s() {
                    self.eventScrollListDraw();
                });
            }
        }
        eventScrollListDraw() {
            var self = this;
            var baseSpeed = 2000;
            var scrollSpeed = 0;
            var horizontalNum = 3;
            var curCell = this.listAd.cells[0];
            var curIndex = 0;
            for (let i = 0; i < this.listAd.array.length; i++) {
                if (curCell.dataSource == this.listAd.array[i]) {
                    curIndex = i;
                    break;
                }
            }
            if (this.scrollDistance > 0) {
                var remainder = this.maxIndex % horizontalNum;
                scrollSpeed = baseSpeed * (this.maxIndex - ((this.cellsLinesInView - 1) * horizontalNum + remainder) + 1 - curIndex);
                this.listAd.tweenTo(this.maxIndex - ((this.cellsLinesInView - 1) * horizontalNum + remainder) + 1, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
            else if (this.scrollDistance < 0) {
                scrollSpeed = baseSpeed * curIndex;
                this.listAd.tweenTo(0, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
        }
        reScroll() {
            this.scrollDistance = this.scrollDistance == 1 ? -1 : 1;
            this.scrollListDraw();
        }
        updateItemTop(cell, index) {
            var self = this;
            var dataSource = cell.dataSource;
            var icon = cell.getChildByName("icon");
            icon.skin = dataSource.icon ? dataSource.icon : "";
            icon.visible = true;
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                SdkCenter.getInstannce().navigateToMiniProgram(dataSource, function s() {
                }, function f() {
                }, function c() {
                });
            });
        }
        scrollListDrawTop() {
            var self = this;
            if (this.canScroll) {
                Laya.timer.once(2000, this, function s() {
                    self.eventScrollListDrawTop();
                });
            }
        }
        eventScrollListDrawTop() {
            var self = this;
            var scrollSpeed = 44 * 1000;
            if (this.scrollDistance > 0) {
                this.listTop.tweenTo(this.maxIndex - 6, scrollSpeed, Laya.Handler.create(self, self.reScrollTop));
            }
            else if (this.scrollDistance < 0) {
                this.listTop.tweenTo(0, scrollSpeed, Laya.Handler.create(self, self.reScrollTop));
            }
        }
        reScrollTop() {
            this.scrollDistanceTop = this.scrollDistanceTop == 1 ? -1 : 1;
            this.scrollListDrawTop();
        }
        randomToPlay() {
            var self = this;
            var random = Math.floor(Math.random() * this.mData.length);
            var data = this.mData[random];
            SdkCenter.getInstannce().navigateToMiniProgram(data, function s() {
            }, function f() {
            }, function c() {
            });
        }
        removeAllEvent() {
            this.listAd.offAll();
            this.offAll();
            Laya.timer.clearAll(this);
        }
        eventClose() {
            if (this.callback) {
                this.callback();
            }
            console.log("原抖动icon是否显示", this.isIconVisible);
            if (this.isIconVisible) {
                PulCenter.showDoubleAd();
            }
            UserGD.canShowBanner = true;
            this.removeAllEvent();
            this.removeSelf();
        }
    }

    class DoubleAd extends ui.sdk.DoubleAdUI {
        constructor() {
            super();
            this.mData1 = [];
            this.mData2 = [];
            this.mUsingData1 = [];
            this.mUsingData2 = [];
            this.isClicked = false;
            console.log("初始化");
            this.zOrder = 15;
        }
        onAwake() {
            if (this.awakeCallback) {
                this.awakeCallback();
            }
            console.log("创建两列抖动icon互推");
            this.initView();
            this.initData();
            this.initAd();
            this.registerEvent();
        }
        initView() {
            var self = this;
            if (UiUtils.isAllScreen()) {
                this.adContent.centerY = -250;
            }
            else {
                this.adContent.centerY = -250;
            }
            Laya.timer.loop(3000, this, () => {
                for (var i = 0; i < this.listAdR.cells.length; i++) {
                    var child = this.listAdR.cells[i];
                    self.shakeIcon(child);
                    self.scaelIcon(child);
                }
                for (var i = 0; i < this.listAdL.cells.length; i++) {
                    var child = self.listAdL.cells[i];
                    self.shakeIcon(child);
                    self.scaelIcon(child);
                }
            }, null, false);
        }
        initData() {
            var temp = PulCenter.getWxLwInferenceData("icon");
            temp = Utils$1.WxLwSortArr(temp);
            for (var i = 0; i < temp.length; i++) {
                if (i % 2 != 0) {
                    this.mData1.push(temp[i]);
                }
                else {
                    this.mData2.push(temp[i]);
                }
            }
        }
        initAd() {
            var self = this;
            console.log("初始化AD列表");
            this.refreshList();
            this.listAdL.array = this.mUsingData1;
            this.listAdR.array = this.mUsingData2;
            this.listAdL.renderHandler = new Laya.Handler(this, this.updateItem);
            this.listAdR.renderHandler = new Laya.Handler(this, this.updateItem);
            Laya.timer.loop(3000, this, () => {
                self.refreshList();
            });
            console.log("初始化AD列表完成");
        }
        initCallback(awakeCallback, callback) {
            this.awakeCallback = awakeCallback;
            this.callback = callback;
        }
        changeDoubleAdCenterY(num) {
            this.adContent.centerY = num;
        }
        registerEvent() {
        }
        refreshList() {
            this.mUsingData1 = [];
            this.mUsingData2 = [];
            for (var i = 0; i < this.mData1.length; i++) {
                this.mUsingData1.push(JSON.parse(JSON.stringify(this.mData1[i])));
                this.mUsingData2.push(JSON.parse(JSON.stringify(this.mData2[i])));
            }
            this.mUsingData1 = Utils.shuffleArr(this.mUsingData1);
            this.mUsingData2 = Utils.shuffleArr(this.mUsingData2);
            var data1 = [];
            var data2 = [];
            var temp = [];
            for (var i = 0; i < 1; i++) {
                data1.push(this.mUsingData1[i]);
                temp.push(this.mUsingData1[(i + 4) % this.mUsingData1.length]);
            }
            for (var j = 0; j < temp.length; j++) {
                for (var k = 0; k < this.mUsingData2.length; k++) {
                    if (temp[j].appid == this.mUsingData2[k].appid) {
                        data2.push(this.mUsingData2[k]);
                    }
                }
            }
            this.mUsingData1 = data1;
            this.mUsingData2 = data2;
            this.listAdL.array = this.mUsingData1;
            this.listAdR.array = this.mUsingData2;
            this.listAdL.refresh();
            this.listAdR.refresh();
        }
        updateItem(cell, index) {
            var self = this;
            var dataSource = cell.dataSource;
            var icon = cell.getChildByName("icon");
            icon.skin = dataSource.icon ? dataSource.icon : "";
            icon.visible = true;
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                if (!self.isClicked) {
                    self.isClicked = true;
                    PulCenter.pauseGame();
                    SdkCenter.getInstannce().navigateToMiniProgram(dataSource, function s() {
                        self.isClicked = false;
                    }, function f() {
                        var funcClear;
                        if (PulCenter.checkLwCondition("fullAd")) {
                            Laya.stage.addChild(new FullAd(null, self.callback, funcClear));
                        }
                        self.isClicked = false;
                    }, function c() {
                        self.isClicked = false;
                    });
                }
            });
        }
        shakeIcon(icon) {
            Laya.Tween.to(icon, {
                rotation: 10
            }, 250, Laya.Ease.linearInOut, Laya.Handler.create(this, () => {
                Laya.Tween.to(icon, {
                    rotation: -10
                }, 250, Laya.Ease.linearInOut, Laya.Handler.create(this, () => {
                    Laya.Tween.to(icon, {
                        rotation: 10
                    }, 250, Laya.Ease.linearInOut, Laya.Handler.create(this, () => {
                        Laya.Tween.to(icon, {
                            rotation: 0
                        }, 250);
                    }));
                }));
            }));
        }
        scaelIcon(icon) {
            Laya.Tween.to(icon, {
                scaleX: 1.1,
                scaleY: 1.1
            }, 250, Laya.Ease.linearInOut, Laya.Handler.create(this, () => {
                Laya.Tween.to(icon, {
                    scaleX: 1,
                    scaleY: 1
                }, 250, Laya.Ease.linearInOut, null, 750);
            }));
        }
        showView() {
            console.log("显示界面");
            this.visible = true;
        }
        hideView() {
            console.log("隐藏界面");
            this.visible = false;
        }
    }

    class FullAdSimple extends ui.sdk.FullAdSimpleUI {
        constructor(isSuccess, callback) {
            super();
            this.mData = [];
            this.scrollDistance = 1;
            this.maxIndex = 0;
            this.cellsNum = 0;
            this.canScroll = true;
            this.cellsLinesInView = 0;
            this.name = "FullAdSimple";
            this.zOrder = 21;
            if (callback) {
                this.callback = callback;
            }
            console.log("FullAdSimple");
        }
        onAwake() {
            this.initData();
            this.initView();
            this.eventRegister();
        }
        initView() {
            var self = this;
            this.height = Laya.stage.height;
            this.width = Laya.stage.width;
            this.listAd.vScrollBarSkin = "";
            this.listAd.array = this.mData;
            this.listAd.renderHandler = new Laya.Handler(this, this.updateItem);
            this.maxIndex = this.mData.length;
            this.cellsNum = this.listAd.cells.length;
            this.scrollListDraw();
            PulCenter.hideDoubleAd();
            SdkCenter.getInstannce().hideBanner();
            if (PulCenter.checkLwCondition("swipe")) {
                UserGD.canShowBanner = false;
                Laya.timer.once(LwConfig.lwCustomConfig[0] * 1000, this, () => {
                    UserGD.canShowBanner = true;
                    SdkCenter.getInstannce().showBanner("fullAdSimple");
                    Laya.timer.once(LwConfig.lwCustomConfig[1] * 1000, this, () => {
                        Laya.Tween.to(self.btnContinue, { bottom: 400 }, 500);
                    });
                });
            }
            else {
                UserGD.canShowBanner = true;
                SdkCenter.getInstannce().showBanner("fullAdSimple");
                self.btnContinue.bottom = 400;
            }
            if (UiUtils.isAllScreen()) {
                this.listAd.height = 1196;
            }
            else {
                this.listAd.top = 20;
            }
            this.cellsLinesInView = Math.floor(this.listAd.height / (this.listAd.cells[0].height + this.listAd.repeatY));
        }
        initData() {
            var data = PulCenter.getWxLwInferenceData("fullAdSimple");
            for (var i = 0; i < data.length; i++) {
                this.mData[i] = data[i];
            }
            this.mData = Utils.shuffleArr(this.mData);
            console.log(this.mData);
            this.isIconVisible = PulCenter.checkDoubleAd();
        }
        eventRegister() {
            var self = this;
            var time;
            if (PulCenter.checkLwCondition("swipe")) {
                time = LwConfig.lwCustomConfig[0] * 1000 + LwConfig.lwCustomConfig[1] * 1000 + 500;
            }
            else {
                time = 1;
            }
            Laya.timer.once(time, this, () => {
                this.btnContinue.on(Laya.Event.CLICK, this, this.eventClose);
            });
            this.listAd.on(Laya.Event.MOUSE_DOWN, this, () => {
                self.canScroll = false;
            });
            this.listAd.on(Laya.Event.MOUSE_UP, this, () => {
                self.canScroll = true;
                self.scrollListDraw();
            });
        }
        updateItem(cell, index) {
            var self = this;
            var dataSource = cell.dataSource;
            var icon = cell.getChildByName("icon");
            var name = cell.getChildByName("name");
            icon.skin = dataSource.icon ? dataSource.icon : "";
            icon.visible = true;
            name.text = dataSource.name ? dataSource.name : "";
            if (dataSource.name.length >= 8) {
                name.fontSize = 23;
            }
            else {
                name.fontSize = 28;
            }
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                SdkCenter.getInstannce().navigateToMiniProgram(dataSource, function s() {
                }, function f() {
                }, function c() {
                });
            });
        }
        scrollListDraw() {
            var self = this;
            if (this.canScroll) {
                Laya.timer.once(2000, this, function s() {
                    self.eventScrollListDraw();
                });
            }
        }
        eventScrollListDraw() {
            var self = this;
            var baseSpeed = 2000;
            var scrollSpeed = 0;
            var horizontalNum = 3;
            var curCell = this.listAd.cells[0];
            var curIndex = 0;
            for (let i = 0; i < this.listAd.array.length; i++) {
                if (curCell.dataSource == this.listAd.array[i]) {
                    curIndex = i;
                    break;
                }
            }
            if (this.scrollDistance > 0) {
                var remainder = this.maxIndex % horizontalNum;
                scrollSpeed = baseSpeed * (this.maxIndex - ((this.cellsLinesInView - 1) * horizontalNum + remainder) + 1 - curIndex);
                this.listAd.tweenTo(this.maxIndex - ((this.cellsLinesInView - 1) * horizontalNum + remainder) + 1, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
            else if (this.scrollDistance < 0) {
                scrollSpeed = baseSpeed * curIndex;
                this.listAd.tweenTo(0, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
        }
        reScroll() {
            this.scrollDistance = this.scrollDistance == 1 ? -1 : 1;
            this.scrollListDraw();
        }
        removeAllEvent() {
            this.btnContinue.offAll();
            this.listAd.offAll();
            this.offAll();
            Laya.timer.clearAll(this);
        }
        eventClose() {
            if (this.callback) {
                this.callback();
            }
            if (this.isIconVisible) {
                PulCenter.showDoubleAd();
            }
            this.removeAllEvent();
            Laya.timer.once(100, this, () => {
                this.removeSelf();
            });
        }
    }

    class BottomAd extends ui.sdk.BottomAdUI {
        constructor() {
            super();
            this.mData = [];
            this.scrollDistance = 1;
            this.maxIndex = 0;
            this.canScroll = true;
            this.inited = false;
            this.initCount = 0;
            this.name = "BottomAd";
            this.zOrder = 23;
        }
        onAwake() {
            if (PulCenter.checkLwCondition("inference")) {
                this.initData();
            }
            this.initView();
            this.eventRegister();
            console.log("初始化好友热玩");
        }
        initView() {
            this.width = Laya.stage.width;
            this.bottom = 50;
            this.visible = false;
            this.listAd.hScrollBarSkin = "";
            this.initComplete();
        }
        initData() {
            var data = PulCenter.getWxLwInferenceData("bottomAd");
            if (!data) {
                data = [];
            }
            for (var i = 0; i < data.length; i++) {
                this.mData[i] = data[i];
            }
            this.mData = Utils.shuffleArr(this.mData);
            if (this.listAd) {
                this.listAd.array = this.mData;
                this.listAd.renderHandler = new Laya.Handler(this, this.updateItem);
                this.listAd.refresh();
                this.maxIndex = this.mData.length;
                this.initComplete();
                this.scrollListDraw();
            }
        }
        eventRegister() {
            var self = this;
            this.listAd.on(Laya.Event.MOUSE_DOWN, this, () => {
                self.canScroll = false;
            });
            this.listAd.on(Laya.Event.MOUSE_UP, this, () => {
                self.canScroll = true;
                self.scrollListDraw();
            });
        }
        initComplete() {
            this.initCount++;
            if (this.initCount >= 2) {
                this.inited = true;
            }
        }
        refreshList() {
            this.mData = Utils.shuffleArr(this.mData);
            this.listAd.refresh();
        }
        updateItem(cell, index) {
            var dataSource = cell.dataSource;
            var icon = cell.getChildByName("icon");
            icon.skin = dataSource.icon ? dataSource.icon : "";
            icon.visible = true;
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                SdkCenter.getInstannce().navigateToMiniProgram(dataSource, function s() {
                }, function f() {
                }, function c() {
                });
            });
        }
        scrollListDraw() {
            var self = this;
            if (this.canScroll) {
                Laya.timer.once(2000, this, self.eventScrollListDraw);
            }
        }
        eventScrollListDraw() {
            var self = this;
            var baseSpeed = 2000;
            var scrollSpeed = 0;
            var curCell = this.listAd.cells[0];
            var curIndex = 0;
            for (let i = 0; i < this.listAd.array.length; i++) {
                if (curCell.dataSource == this.listAd.array[i]) {
                    curIndex = i;
                    break;
                }
            }
            if (this.scrollDistance > 0) {
                scrollSpeed = baseSpeed * (this.maxIndex - 5 - curIndex) * 2;
                this.listAd.tweenTo(this.maxIndex - 5, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
            else if (this.scrollDistance < 0) {
                scrollSpeed = baseSpeed * (curIndex - 5) * 2;
                this.listAd.tweenTo(0, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
        }
        reScroll() {
            this.scrollDistance = this.scrollDistance == 1 ? -1 : 1;
            this.scrollListDraw();
        }
        removeAllEvent() {
            Laya.timer.clear(this, this.eventScrollListDraw);
        }
        showView() {
            if (this.visible == false) {
                console.log("展示好友热玩");
                if (this.listAd) {
                    this.refreshList();
                }
                if (this.mData.length <= 0 && PulCenter.checkLwCondition("inference")) {
                    this.initData();
                    this.scrollListDraw();
                }
                if (this.mData.length > 0) {
                    this.visible = true;
                }
            }
        }
        hideView() {
            console.log("隐藏好友热玩");
            this.removeAllEvent();
            if (this.mData.length > 0 && this.listAd) {
                this.listAd.tweenTo(0, 10);
            }
            this.visible = false;
        }
        getVisible() {
            return this.visible;
        }
        getInited() {
            return this.inited;
        }
    }

    var PulCenter;
    (function (PulCenter) {
        function shuffleTop(arr) {
            var temArr = [];
            var temArrTop = [];
            if (arr) {
                for (let index = 0; index < arr.length; index++) {
                    const element = arr[index];
                    if (element && element.istop) {
                        if (element.istop == "yes") {
                            temArrTop.push(element);
                        }
                        else {
                            temArr.push(element);
                        }
                    }
                }
            }
            if (temArrTop && temArrTop.length > 0) {
                for (let index = 0; index < temArr.length; index++) {
                    const element = temArr[index];
                    temArrTop.push(element);
                }
                return temArrTop;
            }
            else {
                return temArr;
            }
        }
        PulCenter.shuffleTop = shuffleTop;
        let cantShowBannerDialogs = [
            SelfGameConfig.NAME_SHOP_DIALOG,
            SelfGameConfig.NAME_WRONGCLICK_DIALOG,
        ];
        function checkCanShowBanner(nodeName) {
            UserGD.canShowBanner = true;
            let repeatIndex = -1;
            if (nodeName) {
                for (let i = 0; i < cantShowBannerDialogs.length; i++) {
                    if (nodeName == cantShowBannerDialogs[i]) {
                        repeatIndex = i;
                        break;
                    }
                }
            }
            for (let i = 0; i < cantShowBannerDialogs.length; i++) {
                if (i != repeatIndex && Laya.stage.getChildByName(cantShowBannerDialogs[i])) {
                    UserGD.canShowBanner = false;
                    break;
                }
            }
            if (!UserGD.canShowBanner) {
                SdkCenter.getInstannce().hideBanner();
            }
            console.log("PulCenter.checkCanShowBanner -> ", UserGD.canShowBanner);
        }
        PulCenter.checkCanShowBanner = checkCanShowBanner;
        function mergeFunction(functionA, functionB, caller, args) {
            if (!functionA || !functionB)
                return;
            var merge = functionB;
            functionB = (function () {
                merge.call(caller, args);
                functionA.call(PulCenter);
            });
            return functionB;
        }
        PulCenter.mergeFunction = mergeFunction;
        function clickEvent(img, caller, listener, args, noAni, noClickSound) {
            if (img) {
                if (!noAni) {
                    clickAni(img);
                }
                let callback = mergeFunction(function () {
                    if (!noClickSound) {
                        AudioManager.playClick();
                        EffectUtils.vibrateShort();
                    }
                }, listener, caller, args);
                img.offAll(Laya.Event.CLICK);
                img.on(Laya.Event.CLICK, caller, callback, args);
            }
        }
        PulCenter.clickEvent = clickEvent;
        function clickAni(img) {
            var self = this;
            img.anchorX = 0.5;
            img.anchorY = 0.5;
            img.offAll(Laya.Event.MOUSE_DOWN);
            img.offAll(Laya.Event.MOUSE_UP);
            img.on(Laya.Event.MOUSE_DOWN, this, function mouseDown() {
                Laya.Tween.to(img, { scaleX: 1.1, scaleY: 1.1 }, 20, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                    setTimeout(() => {
                        Laya.Tween.to(img, { scaleX: 1, scaleY: 1 }, 20, Laya.Ease.linearIn);
                    }, 500);
                }));
            });
            img.on(Laya.Event.MOUSE_UP, this, function mouseUp() {
                Laya.Tween.to(img, { scaleX: 1, scaleY: 1 }, 20, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                }));
            });
        }
        PulCenter.clickAni = clickAni;
        function delayResponseWithCallBack(node, delayTime, showDiff, caller, callBack, lastBottom, tweenBottom) {
            if (SdkCenter.getInstannce().isWx() && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.isOfficial && UserGD.openClickAd ||
                SdkCenter.getInstannce().isQQ() && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.isOfficial && UserGD.openUnionAd && UserGD.openRisk ||
                SdkCenter.getInstannce().isTT() && UserGD.isOfficial && UserGD.openClickAd) {
                UserGD.canShowBanner = false;
                Laya.Tween.clearAll(node);
                node.offAll();
                node.visible = true;
                node.alpha = 0.8;
                node.bottom = lastBottom ? lastBottom : -150;
                Laya.timer.once(delayTime - showDiff, PulCenter, () => {
                    if (caller && caller.visible) {
                        UserGD.canShowBanner = true;
                    }
                });
                Laya.timer.once(delayTime, PulCenter, () => {
                    callBack(caller, node);
                });
                UiUtils.scaleNode(node);
                Laya.Tween.to(node, { bottom: tweenBottom ? tweenBottom : 8, alpha: 1 }, 200, Laya.Ease.linearIn, Laya.Handler.create(this, function () {
                    Laya.Tween.clearAll(node);
                }), delayTime, true, true);
            }
            else {
                node.offAll();
                node.visible = false;
                node.bottom = tweenBottom ? tweenBottom : 8;
                UserGD.canShowBanner = true;
                callBack(caller, node);
                Laya.timer.once(delayTime, caller, () => {
                    node.visible = true;
                });
            }
        }
        PulCenter.delayResponseWithCallBack = delayResponseWithCallBack;
        function getUserInfo() {
            return SdkCenter.getInstannce().getUserInfo();
        }
        PulCenter.getUserInfo = getUserInfo;
        function showToast(title, icon, img) {
            SdkCenter.getInstannce().showToast(title ? title : '成功', icon ? icon : 'success', img ? img : "");
        }
        PulCenter.showToast = showToast;
        function hideToast() {
            SdkCenter.getInstannce().hideToast();
        }
        PulCenter.hideToast = hideToast;
        function submitData(data, success, fail, complete) {
            SdkCenter.getInstannce().postMessage(data);
        }
        PulCenter.submitData = submitData;
        function isIphoneX() {
            var width = Laya.Browser.width;
            var height = Laya.Browser.height;
            var ratio = width > height ? (width / height) : (height / width);
            var isIphoneX = ratio > 1.95 ? true : false;
            return isIphoneX;
        }
        PulCenter.isIphoneX = isIphoneX;
        var wxDefaultSceneArr = [1007, 1011, 1013, 1044, 1047, 1049];
        var qqDefaultSceneArr = [1005, 2005, 2077];
        function checkScene(lauchSyn, sceneId, sceneArrIn) {
            if (lauchSyn) {
                let sceneArr;
                if (sceneArrIn) {
                    sceneArr = sceneArrIn;
                }
                else if (SdkCenter.getInstannce().isWx()) {
                    sceneArr = wxDefaultSceneArr;
                }
                else if (SdkCenter.getInstannce().isQQ()) {
                    sceneArr = qqDefaultSceneArr;
                }
                else {
                    sceneArr = new Array();
                }
                var sceneID = lauchSyn.scene;
                UserGD.showExtension = true;
                for (let i = 0; i < sceneArr.length; i++) {
                    const ele = sceneArr[i];
                    if (sceneID == ele) {
                        UserGD.showExtension = false;
                        break;
                    }
                }
            }
        }
        PulCenter.checkScene = checkScene;
        function onHide() {
        }
        PulCenter.onHide = onHide;
        function onShow() {
        }
        PulCenter.onShow = onShow;
        function saveDataLastTime(key, date) {
            var dataDate = { "year": "", "month": "", "day": "" };
            dataDate.year = date.getFullYear();
            dataDate.month = date.getMonth();
            dataDate.day = date.getDate();
            Laya.LocalStorage.setItem(key + "_Time", JSON.stringify(dataDate));
        }
        PulCenter.saveDataLastTime = saveDataLastTime;
        function getDataLastTime(key) {
            var lastShareTime = Laya.LocalStorage.getItem(key + "_Time");
            if (lastShareTime) {
                return JSON.parse(lastShareTime);
            }
            else {
                return {
                    year: 2000,
                    month: 1,
                    day: 1
                };
            }
        }
        PulCenter.getDataLastTime = getDataLastTime;
        function saveData(key, value) {
            Laya.LocalStorage.setItem(key, value);
        }
        PulCenter.saveData = saveData;
        function getDataByDefault(key, defaultValue) {
            if (key == null || key == "") {
                return;
            }
            var lastData = Laya.LocalStorage.getItem(key);
            if (lastData != "undefined" && lastData != null && lastData != "") {
                return lastData;
            }
            else {
                return defaultValue;
            }
        }
        PulCenter.getDataByDefault = getDataByDefault;
        function getDataByDay(key, defaultValue) {
            var lastData = Laya.LocalStorage.getItem(key);
            var curData;
            var currentTime = new Date();
            if (lastData != "undefined") {
                var lastTime = getDataLastTime(key);
                var currentTime = new Date();
                if (lastTime.year < currentTime.getFullYear() ||
                    lastTime.month < currentTime.getMonth() ||
                    lastTime.day < currentTime.getDate()) {
                    curData = defaultValue == undefined ? null : defaultValue;
                }
                else {
                    curData = lastData;
                }
            }
            else {
                curData = defaultValue == undefined ? null : defaultValue;
            }
            return curData;
        }
        PulCenter.getDataByDay = getDataByDay;
        function saveDataByDay(key, data) {
            Laya.LocalStorage.setItem(key, data);
            saveDataLastTime(key, new Date());
        }
        PulCenter.saveDataByDay = saveDataByDay;
        function navigateToOtherGame(data, callback, fail, type) {
        }
        PulCenter.navigateToOtherGame = navigateToOtherGame;
        function vibrateShort() {
            SdkCenter.getInstannce().vibrateShort();
        }
        PulCenter.vibrateShort = vibrateShort;
        function vibrateLong() {
            SdkCenter.getInstannce().vibrateLong();
        }
        PulCenter.vibrateLong = vibrateLong;
        function pauseGame() {
            Utils.dispatchEvent(SelfGameConfig.EVENT_PAUSE_GAME, "");
            console.log("暂停");
        }
        PulCenter.pauseGame = pauseGame;
        function resumeGame() {
            Utils.dispatchEvent(SelfGameConfig.EVENT_RESUME_GAME, "");
            console.log("开始");
        }
        PulCenter.resumeGame = resumeGame;
        function showNavAdList() {
        }
        PulCenter.showNavAdList = showNavAdList;
        function checkHideSkinIntros() {
            UserGD.onlineSkinIntro && (UserGD.onlineSkinIntro.visible = false);
            (UserGD.levelSkinIntro && (UserGD.levelSkinIntro.visible = false));
        }
        PulCenter.checkHideSkinIntros = checkHideSkinIntros;
        function checkShowSkinIntros() {
            UserGD.onlineSkinIntro && UserGD.onlineSkinIntro.poped && (UserGD.onlineSkinIntro.visible = true);
            UserGD.onlineSkinIntro ? 0 : (UserGD.levelSkinIntro && (UserGD.levelSkinIntro.visible = true));
        }
        PulCenter.checkShowSkinIntros = checkShowSkinIntros;
        function getIfGotColorSign() {
            let context = Laya.Browser.window.qq;
            if (context) {
                return context.isColorSignExistSync ? context.isColorSignExistSync() : true;
            }
            else {
                return true;
            }
        }
        PulCenter.getIfGotColorSign = getIfGotColorSign;
        let qqOpenDataContext = null;
        var qqContext = Laya.Browser.window.qq;
        function getQqOpenDataContext() {
            qqOpenDataContext = qqContext.getOpenDataContext();
            qqOpenDataContext.postMessage({
                type: "normal",
                data: "这是消息, 嘿嘿~"
            });
        }
        PulCenter.getQqOpenDataContext = getQqOpenDataContext;
        function submitScoreToQQCload(level) {
            if (SdkCenter.getInstannce().isQQ() && qqOpenDataContext) {
                qqOpenDataContext.postMessage({
                    type: "submitScore",
                    data: level
                });
            }
        }
        PulCenter.submitScoreToQQCload = submitScoreToQQCload;
        function createMoreGamesButton() {
            if (SdkCenter.getInstannce().isTT()) {
                PulCenter.btnMoreGame = Laya.Browser.window.tt.createMoreGamesButton({
                    type: "image",
                    image: "main_game/main_view_dialog/img_nav_ad_intro.png",
                    style: {
                        left: 10,
                        top: 526.5,
                        width: 147,
                        height: 157,
                        lineHeight: 40,
                        backgroundColor: "#ffffff",
                        textColor: "#ffffff",
                        textAlign: "center",
                        fontSize: 16,
                        borderRadius: 4,
                        borderWidth: 0,
                        borderColor: "#ff0000",
                    },
                    appLaunchOptions: [],
                    onNavigateToMiniGameBox(res) {
                        console.log("跳转到小游戏盒子", res);
                    },
                });
                this.btnMoreGame.onTap(() => {
                    console.log("点击更多游戏");
                });
            }
        }
        PulCenter.createMoreGamesButton = createMoreGamesButton;
        function createMoreGamesButton2() {
            if (SdkCenter.getInstannce().isTT()) {
                PulCenter.btnMoreGame2 = Laya.Browser.window.tt.createMoreGamesButton({
                    type: "image",
                    image: "main_game/game_result_dialog/img_btn_more_game.png",
                    style: {
                        left: Laya.stage.width - 20 - 132,
                        top: 704,
                        width: 132,
                        height: 130,
                        lineHeight: 40,
                        backgroundColor: "#ffffff",
                        textColor: "#ffffff",
                        textAlign: "center",
                        fontSize: 16,
                        borderRadius: 4,
                        borderWidth: 0,
                        borderColor: "#ff0000",
                    },
                    appLaunchOptions: [],
                    onNavigateToMiniGameBox(res) {
                        console.log("跳转到小游戏盒子", res);
                    },
                });
                this.btnMoreGame.onTap(() => {
                    console.log("点击更多游戏");
                });
            }
        }
        PulCenter.createMoreGamesButton2 = createMoreGamesButton2;
        PulCenter.EVENT_HALL = 0;
        PulCenter.EVENT_CHAPTER = 1;
        PulCenter.EVENT_SETTLEMENT = 2;
        PulCenter.EVENT_ID_DESKTOP_CLICK = 10020;
        PulCenter.EVENT_ID_CLICK_NATIVE_AD = 10021;
        PulCenter.EVENT_TYPE_LOAD_STUFF = 10023;
        function checkLwCondition(name) {
            var b;
            var sdk = SdkCenter.getInstannce().getSdk();
            if (sdk.sdkInitOk) {
                switch (name) {
                    case "inference":
                        b = sdk.buttonCondition("RTCR-MLKG");
                        break;
                    case "video":
                        b = sdk.buttonCondition("RTCR-SPKG");
                        break;
                    case "swipe":
                        b = sdk.buttonCondition("RTCR-WDKG");
                        break;
                    case "wrongClick":
                        b = sdk.buttonCondition("RTCR-DHLD");
                        break;
                    case "videoForce":
                        b = sdk.buttonCondition("RTCR-QLSP");
                        break;
                    case "firstFullAd":
                        b = sdk.buttonCondition("RTCR-SPRMTJ");
                        break;
                    case "firstFullAdSimple":
                        b = sdk.buttonCondition("RTCR-SPLD");
                        break;
                    case "firstHot":
                        b = sdk.buttonCondition("RTCR-SPBK");
                        break;
                    case "fullAd":
                        b = sdk.buttonCondition("RTCR-RMTJ");
                        break;
                    case "result":
                        b = sdk.buttonCondition("RTCR-JSYM");
                        break;
                    case "fullAdSimple":
                        b = sdk.buttonCondition("RTCR-LLDC");
                        break;
                    case "hot":
                        b = sdk.buttonCondition("RTCR-BKTC");
                        break;
                    case "icon":
                        b = sdk.buttonCondition("RTCR-DDDC");
                        break;
                    case "surprise":
                        b = sdk.buttonCondition("RTCR-CNXH");
                        break;
                    case "bottom":
                        b = sdk.buttonCondition("RTCR-GDT");
                        break;
                    case "banner":
                        b = sdk.buttonCondition("RTCR-YXKG");
                        break;
                    case "doubleReceive":
                        b = sdk.buttonCondition("RTCR-FBJL");
                        break;
                    case "levelUp":
                        b = sdk.buttonCondition("RTCR-SJJN");
                        break;
                    case "skip":
                        b = sdk.buttonCondition("RTCR-TGGQ");
                        break;
                    case "effect":
                        b = sdk.buttonCondition("RTCR-TXKG");
                        break;
                    case "videoMark":
                        b = sdk.buttonCondition("RTCR-SPBS");
                        break;
                    case "skillMark":
                        b = sdk.buttonCondition("RTCR-JNSJ");
                        break;
                }
            }
            else {
                b = false;
            }
            console.log("控制开关", name, b);
            return b;
        }
        PulCenter.checkLwCondition = checkLwCondition;
        function getWxLwInferenceData(scene) {
            var data;
            var sdk = SdkCenter.getInstannce().getSdk();
            switch (scene) {
                case "hot":
                    data = sdk.getAdDataToShow("RTCR-BKTC");
                    break;
                case "icon":
                    data = sdk.getAdDataToShow("RTCR-DDDC");
                    break;
                case "bottomAd":
                    data = sdk.getAdDataToShow("RTCR-GDT");
                    break;
                case "fullAd":
                    data = sdk.getAdDataToShow("RTCR-RMTJ");
                    break;
                case "result":
                    data = sdk.getAdDataToShow("RTCR-JSYM");
                    break;
                case "fullAdSimple":
                    data = sdk.getAdDataToShow("RTCR-LLDC");
                    break;
            }
            console.log("获取数据", data);
            if (data) {
                return data.data;
            }
            else {
                return [];
            }
        }
        PulCenter.getWxLwInferenceData = getWxLwInferenceData;
        function showRewardedVideo(scene, onSuccess, onError, onCancel) {
            var data;
            var sdk = SdkCenter.getInstannce().getSdk();
            switch (scene) {
                case "force":
                    data = "RTCR-QLSP";
                    break;
                case "double":
                    data = "RTCR-FBJL";
                    break;
                case "levelUp":
                    data = "RTCR-SJJN";
                    break;
                case "skip":
                    data = "RTCR-TGGQ";
                    break;
            }
            sdk.showRewardedVideoAd(data, onSuccess, onError, onCancel);
        }
        PulCenter.showRewardedVideo = showRewardedVideo;
        function createDoubleAd() {
            if (!PulCenter.doubleAd) {
                PulCenter.doubleAd = Laya.stage.addChild(new DoubleAd());
                PulCenter.doubleAd.initCallback(null, () => {
                    if (UserGD.isGameing) {
                        if (checkLwCondition("banner")) {
                        }
                    }
                    else {
                    }
                    PulCenter.resumeGame();
                });
                hideDoubleAd();
            }
        }
        PulCenter.createDoubleAd = createDoubleAd;
        function checkDoubleAd() {
            if (PulCenter.doubleAd) {
                return PulCenter.doubleAd.visible;
            }
            return false;
        }
        PulCenter.checkDoubleAd = checkDoubleAd;
        function showDoubleAd() {
            if (PulCenter.doubleAd) {
                if (Laya.stage.getChildByName(SelfGameConfig.NAME_MAIN_VIEW_DIALOG) && UserGD.playCount > 0) {
                    PulCenter.doubleAd.showView();
                }
                else if (UserGD.playCount > 1) {
                    PulCenter.doubleAd.showView();
                }
            }
        }
        PulCenter.showDoubleAd = showDoubleAd;
        function hideDoubleAd() {
            if (PulCenter.doubleAd) {
                PulCenter.doubleAd.hideView();
            }
        }
        PulCenter.hideDoubleAd = hideDoubleAd;
        function createBottomAd() {
            if (!PulCenter.bottomAd) {
                PulCenter.bottomAd = Laya.stage.addChild(new BottomAd());
                hideBottomAd();
            }
        }
        PulCenter.createBottomAd = createBottomAd;
        function showBottomAd() {
            if (PulCenter.bottomAd) {
                if (checkFullAdInactive()) {
                    if (Laya.stage.getChildByName(SelfGameConfig.NAME_MAIN_VIEW_DIALOG) && UserGD.playCount > 0) {
                        PulCenter.bottomAd.showView();
                    }
                    else if (UserGD.playCount > 1) {
                        PulCenter.bottomAd.showView();
                    }
                }
            }
        }
        PulCenter.showBottomAd = showBottomAd;
        function hideBottomAd() {
            if (PulCenter.bottomAd) {
                PulCenter.bottomAd.hideView();
            }
        }
        PulCenter.hideBottomAd = hideBottomAd;
        function checkToShowInference(type = 0, callback) {
            let self = this;
            let func1 = () => {
                if (type == 0) {
                    if (checkLwCondition("inference") && checkLwCondition("firstFullAdSimple") && LwConfig.firstFullAdSimple) {
                        LwConfig.firstFullAdSimple = false;
                        Laya.stage.addChild(new FullAdSimple(null, callback));
                    }
                    else {
                        if (callback) {
                            callback();
                        }
                    }
                }
                else {
                    if (checkLwCondition("inference") && checkLwCondition("fullAdSimple")) {
                        Laya.stage.addChild(new FullAdSimple(null, callback));
                    }
                    else {
                        if (callback) {
                            callback();
                        }
                    }
                }
            };
            if (type == 0) {
                if (checkLwCondition("inference") && checkLwCondition("firstFullAd") && LwConfig.firstFullAd) {
                    LwConfig.firstFullAd = false;
                    Laya.stage.addChild(new FullAd(null, func1));
                }
                else if (checkLwCondition("inference") && checkLwCondition("firstFullAdSimple") && LwConfig.firstFullAdSimple) {
                    LwConfig.firstFullAdSimple = false;
                    Laya.stage.addChild(new FullAdSimple(null, callback));
                }
                else {
                    if (callback) {
                        callback();
                    }
                }
            }
            else {
                if (checkLwCondition("inference") && checkLwCondition("fullAd")) {
                    Laya.stage.addChild(new FullAd(null, func1));
                }
                else if (checkLwCondition("inference") && checkLwCondition("fullAdSimple")) {
                    Laya.stage.addChild(new FullAdSimple(null, callback));
                }
                else {
                    if (callback) {
                        callback();
                    }
                }
            }
        }
        PulCenter.checkToShowInference = checkToShowInference;
        function checkFullAdInactive() {
            let fullAd = Laya.stage.getChildByName("FullAd");
            let fullAdSimple = Laya.stage.getChildByName("FullAdSimple");
            if (fullAd || fullAdSimple) {
                return false;
            }
            return true;
        }
        PulCenter.checkFullAdInactive = checkFullAdInactive;
        function showCustomAd(dialog) {
            console.log("展示横排广告");
            let sdk = SdkCenter.getInstannce().getSdk();
            sdk.showCustomAd && sdk.showCustomAd(dialog);
        }
        PulCenter.showCustomAd = showCustomAd;
        function destroyCustomAd() {
            let sdk = SdkCenter.getInstannce().getSdk();
            sdk.destroyCustomAd && sdk.destroyCustomAd();
        }
        PulCenter.destroyCustomAd = destroyCustomAd;
    })(PulCenter || (PulCenter = {}));

    class LevelSkinIntro extends ui.dialogs.LevelSkinIntroUI {
        constructor() {
            super();
            this.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout(x, y, scale, alpha, shake) {
            if (!x && !y) {
                this.visible = false;
                let yNeed = UserGD.isIphoneX ? 210 : 190;
                if (SdkCenter.getInstannce().isSyyx()) {
                    yNeed = UserGD.isIphoneX ? 70 : 80;
                }
                yNeed *= UiUtils.getClientScale();
                if (UserGD.onlineSkinIntro) {
                    this.pos(Laya.stage.width - this.width / 2 - 10, Laya.stage.height - this.height - yNeed, true);
                }
                else {
                    this.pos(this.width / 2 + 10, Laya.stage.height - this.height - yNeed, true);
                }
                this.loopShake();
            }
            else {
                this.visible = true;
                if (scale) {
                    this.scale(scale, scale, true);
                }
                else {
                    this.scale(1, 1, true);
                }
                this.x = x;
                this.y = y;
                this.alpha = alpha ? alpha : 1;
                if (shake) {
                    this.loopShake();
                }
            }
        }
        refreshView() {
            let index = SkinManager.getInstance().progress.indexLevelUnlocking;
            if (index > 0) {
                this.imgItem.skin = "game/skins/skin_" + index + ".png";
                let progress = SkinManager.getInstance().getLevelProgress(index);
                this.lbProgress.text = progress + "%";
                if (progress == 100) {
                    this.lbProgress.color = "#ff0000";
                }
                else {
                    this.lbProgress.color = "#ffffff";
                }
            }
            else {
                this.eventClose();
            }
        }
        initView() {
            this.refreshView();
        }
        initListener() {
            let self = this;
            this.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                e.stopPropagation();
            });
            PulCenter.clickEvent(this, this, () => {
                self.stopLoopShake();
                UiUtils.showLayaToast(" 100% Can Get");
            }, null);
        }
        eventClose() {
            UserGD.levelSkinIntro = null;
            this.onDisable();
            this.removeSelf();
        }
        shake() {
            UiUtils.rotateNodeInter(this);
        }
        stopLoopShake() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            this.rotation = 0;
            this.scale(1, 1, true);
        }
        loopShake() {
            this.stopLoopShake();
            let self = this;
            this.shake();
            Laya.timer.once(1000, this, () => {
                self.shake();
            });
            Laya.timer.once(2000, this, () => {
                self.shake();
            });
            Laya.timer.once(3000, this, () => {
                self.shake();
            });
            Laya.timer.loop(10000, this, () => {
                self.shake();
                Laya.timer.once(1000, self, () => {
                    self.shake();
                });
                Laya.timer.once(2000, self, () => {
                    self.shake();
                });
                Laya.timer.once(3000, self, () => {
                    self.shake();
                });
            });
        }
    }

    class JoyStickCtrl {
        static onFingerPress() {
            if (!UserGD.touchBlock) {
                UserGD.touchOn = true;
            }
        }
        static onFingerMove() {
            if (UserGD.touchOn) {
                this.mouseMoving = true;
            }
        }
        static onFingerRelease() {
            this.mouseMoving = false;
            UserGD.touchOn = false;
        }
        static setTouchBlock(value) {
            UserGD.touchBlock = value;
        }
    }
    JoyStickCtrl.mouseMoving = false;

    class BoxCoin extends ui.dialogs.BoxCoinUI {
        constructor() {
            super();
            this.widthOrigin = 300;
            this.widthBg = 173;
            this.widthPerLetter = 15;
            this.lbTextMinLength = 5;
            this.moveTargetX = 33;
            this.moveTargetY = 34;
            this.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
            this.name = "BoxCoin";
        }
        refreshView() {
            if (this.inited) {
                this.initData();
                this.initView();
            }
        }
        onAwake() {
            this.initLayout();
            this.initData();
            this.initView();
            this.initEventHandler();
            this.inited = true;
            this.imgSound.on(Laya.Event.CLICK, this, (e) => {
                AudioManager.soundSwitch();
                this.imgSound.skin = AudioManager.isSound() ? "game/bgOpenSound.png" : "game/bgCloseSound.png";
            });
        }
        initLayout() {
            if (UserGD.isIphoneX) {
                this.left = 30;
                this.top = 80 * UiUtils.getClientScale();
            }
            else {
                this.left = 30;
                this.top = 30;
            }
        }
        initData() {
            this.coinNumNow = DataManager.getCoinNum();
        }
        refreshLayout() {
            let length = this.lbNum.text.length;
            if (length > this.lbTextMinLength) {
                this.width = this.widthOrigin + this.widthPerLetter * (length - this.lbTextMinLength);
                this.imgBg.width = this.widthBg + this.widthPerLetter * (length - this.lbTextMinLength);
            }
            else {
                this.width = this.widthOrigin;
                this.imgBg.width = this.widthBg;
            }
        }
        initView() {
            this.lbNum.text = this.coinNumNow.toString();
            this.refreshLayout();
            this.imgBtnAdd.visible = false;
            this.imgSound.skin = AudioManager.isSound() ? "game/bgOpenSound.png" : "game/bgCloseSound.png";
        }
        refreshWithFakeNum(gemNum) {
            this.lbNum.text = gemNum.toString();
            this.refreshLayout();
        }
        addNumWithoutAni(addNum) {
            UiUtils.showLayaToast("Congratulations Get：" + addNum + "Coin");
            DataManager.changeCoinNum(addNum);
            this.initData();
            this.initView();
        }
        showAddOneCoin(pos) {
            let self = this;
            DataManager.changeCoinNum(1);
            let coin = new Laya.Image("game/ic_gold.png");
            Laya.stage.addChild(coin);
            coin.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
            coin.anchorX = 0.5;
            coin.anchorY = 0.5;
            if (pos) {
                coin.pos(pos[0], pos[1]);
            }
            else {
                coin.pos(Laya.stage.width / 2, Laya.stage.height * 2 / 3);
            }
            Laya.Tween.to(coin, {
                x: this.left + this.moveTargetX,
                y: this.top + this.moveTargetY
            }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, (gem) => {
                gem.visible = false;
                gem.destroy(true);
                self.initData();
                self.initView();
                AudioManager.playUiCoin();
            }, [coin]));
        }
        loopAniCoin(coinArray) {
            let self = this;
            let targetX = this.left + this.moveTargetX;
            let targetY = this.top + this.moveTargetY;
            let i = 0;
            Laya.timer.loop(10, this, function loopAddDiamondAni() {
                if (i < coinArray.length && coinArray[i]) {
                    Laya.Tween.to(coinArray[i], {
                        x: targetX,
                        y: targetY
                    }, 300, Laya.Ease.linearIn, Laya.Handler.create(self, (img) => {
                        img.visible = false;
                        img.destroy(true);
                        AudioManager.playUiCoin();
                    }, [coinArray[i]]));
                    i++;
                }
                else {
                    Laya.timer.clear(self, loopAddDiamondAni);
                }
            });
        }
        startLoopRefreshLabels(addNum, loopNum) {
            if (this.loopRefreshLabels) {
                Laya.timer.clear(this, this.loopRefreshLabels);
                this.loopRefreshLabels = null;
                this.initData();
                this.initView();
            }
            let totalTime = 300 + loopNum * 10;
            let newLoopNum = Math.floor(totalTime / 100);
            let numPerLoop = Math.floor(addNum / newLoopNum);
            let self = this;
            let i = 0;
            this.loopRefreshLabels = () => {
                EffectUtils.vibrateShort();
                if (++i < newLoopNum) {
                    self.refreshWithFakeNum(self.coinNumNow + numPerLoop * i);
                }
                else {
                    self.initData();
                    self.initView();
                    UiUtils.showLayaToast("Congratulations Get：" + addNum + "Coin");
                    if (self.loopRefreshLabels) {
                        Laya.timer.clear(self, self.loopRefreshLabels);
                    }
                    Laya.timer.once(1000, this, () => {
                        UiUtils.closeDialog(SelfGameConfig.NAME_GET_REWARD_VIEW_DIALOG);
                        if (self.addCoinCallback) {
                            self.addCoinCallback();
                            self.addCoinCallback = null;
                        }
                    });
                }
            };
            Laya.timer.loop(100, this, this.loopRefreshLabels);
        }
        showAddCoins(addNum, pos, callback) {
            this.addCoinCallback = callback;
            let self = this;
            DataManager.changeCoinNum(addNum);
            let loopNum = Math.floor(addNum / 3);
            loopNum = loopNum > 50 ? 50 : loopNum;
            let gemArray = new Array();
            let originPos = pos ? pos : [Laya.stage.width / 2, Laya.stage.height / 2];
            for (let i = 0; i < loopNum; i++) {
                let gem = new Laya.Image("game/ic_gold.png");
                gem.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
                gem.anchorX = 0.5;
                gem.anchorY = 0.5;
                Laya.stage.addChild(gem);
                gem.pos(originPos[0], originPos[1]);
                let length = Math.random() * 150;
                let angle = Math.random() * 2 * Math.PI;
                Laya.Tween.to(gem, {
                    x: originPos[0] + length * Math.cos(angle),
                    y: originPos[1] + length * Math.sin(angle)
                }, 200);
                gemArray.push(gem);
            }
            Laya.timer.once(300, this, () => {
                self.loopAniCoin(gemArray);
                self.startLoopRefreshLabels(addNum, loopNum);
            });
        }
        initEventHandler() {
        }
    }

    class EnergyDialog extends ui.dialogs.EnergyDialogUI {
        constructor() {
            super();
            this.addToDeskTopNum = 3;
            this.addToDeskTopTimeLimit = 1;
            this.name = SelfGameConfig.NAME_ENERGY_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
            this.gemNumNeed = UserGD.energyConfig[2];
            this.videoGetNum = UserGD.energyConfig[3];
            this.videoAbortGemNum = UserGD.energyConfig[4];
            this.navGetNum = UserGD.energyConfig[5];
            ++UserGD.openEnergyDialogCount;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            if (SdkCenter.getInstannce().isOppo()) {
                if (!UiUtils.isAllScreen()) {
                    this.content.bottom += 100;
                }
            }
            this.mainFrame.x = Laya.stage.width / 2;
            this.bg.x = Laya.stage.width / 2;
            if (UserGD.isIphoneX) {
                this.boxBtnClose.centerY = -400;
            }
        }
        initBoxBtnGemBuy() {
            this.lbBoxBtnGemBuy.text = "" + this.gemNumNeed;
        }
        initBoxBtnVideoGet() {
            this.lbNumBtnVIdeoGet.text = "+" + this.videoGetNum;
            if (SdkCenter.getInstannce().isWx()) {
                if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch) {
                    this.icBtnVideoGet.visible = false;
                }
                else {
                    this.icBtnVideoGet.visible = true;
                }
            }
            else if (SdkCenter.getInstannce().isSyyx()) {
                this.icBtnVideoGet.skin = "game/ic_video3.png";
            }
            else if (SdkCenter.getInstannce().isTT()) {
                if (UserGD.isOfficial && UserGD.openShipin) {
                    this.icBtnVideoGet.visible = false;
                }
                else {
                    this.icBtnVideoGet.visible = true;
                }
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch) {
                    this.icBtnVideoGet.visible = false;
                }
                else {
                    this.icBtnVideoGet.visible = true;
                }
            }
            else {
            }
        }
        initBoxBtnAddToDeskTop() {
            this.lbNumBtnDesktop.text = "+" + this.addToDeskTopNum;
            this.lbAddDesktopTimeLimit.text = "(限" + this.addToDeskTopTimeLimit + "次)";
        }
        navGet(navAd) {
            let self = this;
            SdkCenter.getInstannce().navigateToMiniProgram(navAd, () => {
                self.getEnergy(self.navGetNum);
                self.initBoxBtnNav();
            }, () => {
            });
        }
        initBoxBtnNav() {
            UiUtils.clearFrameAnimProcess(this.imgBtnNav);
            if (UserGD.openUnionAd && UserGD.navAdNotJumpedArray.length > 0) {
                this.lbNumBtnNav.text = "+" + this.navGetNum;
                let navAd = UserGD.navAdNotJumpedArray[Math.floor(Math.random() * UserGD.navAdNotJumpedArray.length)];
                UiUtils.checkFrameAnimProcess(this.imgBtnNav, navAd);
                let self = this;
                PulCenter.clickEvent(this.boxBtnNavGet, this, () => {
                    self.navGet(navAd);
                }, null);
            }
            else {
                this.boxBtnNavGet.visible = false;
                this.boxBtnVideoGet.centerX = 0;
            }
        }
        initView() {
            this.showBanner();
            this.lbTip.text = "Tips: " + UserGD.energyConfig[1] + "s Get One Phy";
            this.initBoxBtnGemBuy();
            this.initBoxBtnVideoGet();
            if (SdkCenter.getInstannce().isWx()) {
                this.boxBtnDesktop.visible = false;
                this.boxBtnNavGet.visible = true;
                this.initBoxBtnNav();
                if (this.boxBtnNavGet.visible) {
                    if (UserGD.openEnergyDialogCount % 2 == 0) {
                        UiUtils.scaleNode(this.boxBtnNavGet);
                    }
                    else {
                        UiUtils.scaleNode(this.boxBtnVideoGet);
                    }
                }
                else {
                    UiUtils.scaleNode(this.boxBtnVideoGet);
                }
                return;
            }
            else if (SdkCenter.getInstannce().isSyyx()) {
                this.boxBtnDesktop.visible = false;
                this.boxBtnNavGet.visible = false;
                this.boxBtnVideoGet.centerX = 0;
            }
            else if (SdkCenter.getInstannce().isTT()) {
                this.boxBtnDesktop.visible = false;
                this.boxBtnNavGet.visible = true;
                this.initBoxBtnNav();
                if (this.boxBtnNavGet.visible) {
                    if (UserGD.openEnergyDialogCount % 2 == 0) {
                        UiUtils.scaleNode(this.boxBtnNavGet);
                    }
                    else {
                        UiUtils.scaleNode(this.boxBtnVideoGet);
                    }
                }
                else {
                    UiUtils.scaleNode(this.boxBtnVideoGet);
                }
                return;
            }
            else {
                this.boxBtnDesktop.visible = false;
                this.boxBtnNavGet.visible = false;
                this.boxBtnVideoGet.centerX = 0;
            }
        }
        showBanner() {
            if (SdkCenter.getInstannce().isTT()) {
                UserGD.canShowBanner = true;
                UserGD.showBannerNow = true;
                SdkCenter.getInstannce().showBanner();
            }
        }
        eventClose() {
            this.onDisable();
            this.removeSelf();
        }
        getEnergy(num) {
            Globals.boxEnergy.showAddEnergy(num);
        }
        checkIfEnergyFull() {
            let bool = !(DataManager.getEnergyNum() < 99);
            if (bool) {
            }
            return bool;
        }
        gemBuyEnergy() {
            if (this.checkIfEnergyFull()) {
                return;
            }
            if (DataManager.getCoinNum() < this.gemNumNeed) {
            }
            else {
                DataManager.changeCoinNum(-this.gemNumNeed);
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_SKILL_BTN, true);
                Globals.boxCoin.refreshView();
                this.getEnergy(1);
            }
        }
        videoGetEnergy() {
            if (this.checkIfEnergyFull()) {
                return;
            }
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "sdtl" : null, () => {
                self.getEnergy(self.videoGetNum);
            }, () => {
            }, () => {
                self.getEnergy(self.videoAbortGemNum);
            });
        }
        addToDeskTop() {
            if (this.checkIfEnergyFull()) {
                return;
            }
        }
        initListener() {
            let self = this;
            this.on(Laya.Event.CLICK, this, (e) => {
                e.stopPropagation();
            });
            PulCenter.clickEvent(this.boxBtnClose, this, () => {
                self.eventClose();
            }, null);
            PulCenter.clickEvent(this.boxBtnGemBuy, this, () => {
                self.gemBuyEnergy();
            }, null);
            PulCenter.clickEvent(this.boxBtnVideoGet, this, () => {
                self.videoGetEnergy();
            }, null);
            PulCenter.clickEvent(this.boxBtnDesktop, this, () => {
                self.addToDeskTop();
            }, null);
        }
    }

    class BoxEnergy extends ui.dialogs.BoxEnergyUI {
        constructor() {
            super();
            this.widthOrigin = 193;
            this.widthBg = 173;
            this.widthPerLetter = 15;
            this.moveTargetX = 33;
            this.moveTargetY = 34;
            this.energyClockRunning = false;
            this.lbTextMinLength = 5;
            this.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
            this.name = "BoxEnergy";
        }
        refreshView() {
            if (this.inited) {
                this.initData();
                this.initView();
            }
        }
        onAwake() {
            this.initLayout();
            this.initData();
            this.initView();
            this.initListener();
            this.initEventHandler();
            this.initClock();
            this.inited = true;
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            if (UserGD.isIphoneX) {
                this.left = 30;
                this.top = 140 * UiUtils.getClientScale();
            }
            else {
                this.left = 30;
                this.top = 110;
            }
        }
        initData() {
            if (!DataManager.getIfOriginEnergyGot() && UserGD.openPower) {
                UiUtils.showLayaToast("get " + UserGD.energyConfig[0] + "");
                DataManager.changeEnergyNum(UserGD.energyConfig[0]);
                DataManager.setOriginEnergyGot();
            }
            this.energyNumNow = DataManager.getEnergyNum();
        }
        refreshLayout() {
            let length = this.lbNum.text.length;
            if (length > this.lbTextMinLength) {
                this.width = this.widthOrigin + this.widthPerLetter * (length - this.lbTextMinLength);
                this.imgBg.width = this.widthBg + this.widthPerLetter * (length - this.lbTextMinLength);
            }
            else {
                this.width = this.widthOrigin;
                this.imgBg.width = this.widthBg;
            }
        }
        initView() {
            this.lbNum.text = this.energyNumNow.toString();
            this.refreshLayout();
        }
        refreshWithFakeNum(energyNum) {
            this.lbNum.text = energyNum.toString();
            this.refreshLayout();
        }
        addNumWithoutAni(addNum) {
            UiUtils.showLayaToast("Congratulations Get：" + addNum + "");
            DataManager.changeEnergyNum(addNum);
            this.initData();
            this.initView();
        }
        loopAniEnergy(energyArray) {
            let self = this;
            let targetX = this.left + this.moveTargetX;
            let targetY = this.top + this.moveTargetY;
            let i = 0;
            Laya.timer.loop(10, this, function loopAddEnergyAni() {
                if (i < energyArray.length && energyArray[i]) {
                    Laya.Tween.to(energyArray[i], {
                        x: targetX,
                        y: targetY
                    }, 300, Laya.Ease.linearIn, Laya.Handler.create(self, (img) => {
                        img.visible = false;
                        img.destroy(true);
                        AudioManager.playGetEnergy();
                    }, [energyArray[i]]));
                    i++;
                }
                else {
                    Laya.timer.clear(self, loopAddEnergyAni);
                }
            });
        }
        startLoopRefreshLabels(addNum, loopNum) {
            if (this.loopRefreshLabels) {
                Laya.timer.clear(this, this.loopRefreshLabels);
                this.loopRefreshLabels = null;
                this.initData();
                this.initView();
            }
            let totalTime = 300 + loopNum * 10;
            let newLoopNum = Math.floor(totalTime / 100);
            let numPerLoop = Math.floor(addNum / newLoopNum);
            let self = this;
            let i = 0;
            this.loopRefreshLabels = () => {
                EffectUtils.vibrateShort();
                if (++i < newLoopNum) {
                    self.refreshWithFakeNum(self.energyNumNow + numPerLoop * i);
                }
                else {
                    self.initData();
                    self.initView();
                    UiUtils.showLayaToast("Congratulations Get：" + addNum + "");
                    if (self.loopRefreshLabels) {
                        Laya.timer.clear(self, self.loopRefreshLabels);
                    }
                }
            };
            Laya.timer.loop(100, this, this.loopRefreshLabels);
        }
        showAddEnergy(addNum, pos) {
            let self = this;
            DataManager.changeEnergyNum(addNum);
            let loopNum = addNum;
            loopNum = loopNum > 50 ? 50 : loopNum;
            let energyArray = new Array();
            let originPos = pos ? pos : [Laya.stage.width / 2, Laya.stage.height / 2];
            for (let i = 0; i < loopNum; i++) {
                let energy = new Laya.Image("game/ic_power.png");
                energy.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
                energy.anchorX = 0.5;
                energy.anchorY = 0.5;
                Laya.stage.addChild(energy);
                energy.pos(originPos[0], originPos[1]);
                let length = Math.random() * 150;
                let angle = Math.random() * 2 * Math.PI;
                Laya.Tween.to(energy, {
                    x: originPos[0] + length * Math.cos(angle),
                    y: originPos[1] + length * Math.sin(angle)
                }, 200);
                energyArray.push(energy);
            }
            Laya.timer.once(300, this, () => {
                self.loopAniEnergy(energyArray);
                self.startLoopRefreshLabels(addNum, loopNum);
            });
        }
        eventAddEnergy() {
            if (!Laya.stage.getChildByName(SelfGameConfig.NAME_ENERGY_DIALOG)) {
                Laya.stage.addChild(new EnergyDialog());
            }
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this, this, () => {
                self.eventAddEnergy();
            }, null, true, false);
        }
        initEventHandler() {
        }
        clockPerLoop() {
            if (--this.energyAutoRegenTimeLeft <= 0) {
                this.stopClock();
                this.showAddEnergy(1);
                this.initClock();
            }
        }
        startClock() {
            this.energyClockRunning = true;
            this.energyAutoRegenTimeLeft = UserGD.energyConfig[1];
            Laya.timer.loop(1000, this, this.clockPerLoop);
        }
        stopClock() {
            this.energyClockRunning = false;
            Laya.timer.clear(this, this.clockPerLoop);
        }
        initClock() {
            if (!this.visible || !UserGD.openPower) {
                return;
            }
            if (DataManager.getEnergyNum() < 5) {
                if (!this.energyClockRunning) {
                    this.startClock();
                }
            }
            else {
                this.stopClock();
            }
        }
        eventRemove() {
            this.onDisable();
            this.removeSelf();
        }
    }

    class GameViewDialog extends ui.dialogs.GameViewDialogUI {
        constructor() {
            super();
            this.name = SelfGameConfig.NAME_GAME_VIEW_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
        }
        eventClose() {
            if (SdkCenter.getInstannce().isLw()) {
                PulCenter.hideDoubleAd();
            }
            this.onDisable();
            SdkCenter.getInstannce().hideBlockAd("gq");
            this.removeSelf();
        }
        onAwake() {
            this.initLayout();
            this.initData();
            this.initView();
            this.initListener();
            this.initEventHandler();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            if (UserGD.isIphoneX) {
                this.mNodeTop.top += 50 * UiUtils.getClientScale();
            }
            this.boxKey.top = Globals.boxCoin.top + 50 * UiUtils.getClientScale();
            let alphaNeed = 0.8;
            if (UserGD.onlineSkinIntro) {
                let yNeed = UserGD.isIphoneX ? 800 : 600;
                yNeed *= UiUtils.getClientScale();
                UserGD.onlineSkinIntro.initLayout(UserGD.onlineSkinIntro.width / 2 + 20, Laya.stage.height - UserGD.onlineSkinIntro.height - yNeed, null, alphaNeed);
                if (UserGD.levelSkinIntro) {
                    UserGD.levelSkinIntro.initLayout(Laya.stage.width - UserGD.levelSkinIntro.width / 2 - 20, Laya.stage.height - UserGD.levelSkinIntro.height - yNeed, null, alphaNeed);
                    UserGD.levelSkinIntro.visible = false;
                }
            }
            else if (UserGD.levelSkinIntro) {
                let yNeed = UserGD.isIphoneX ? 800 : 600;
                yNeed *= UiUtils.getClientScale();
                UserGD.levelSkinIntro.initLayout(UserGD.levelSkinIntro.width / 2 + 20, Laya.stage.height - UserGD.levelSkinIntro.height - yNeed, null, alphaNeed);
            }
        }
        initData() {
            this.animFactorys = new Array();
            for (let i = 1; i < 5; i++) {
                let templet = new Laya.Templet();
                templet.loadAni("res2d/emoji/nianyeren_biaoqing_" + i + ".sk");
                this.animFactorys.push(templet);
            }
            this.animLabelFactorys = new Array();
            for (let i = 1; i < 6; i++) {
                let templet = new Laya.Templet();
                templet.loadAni("spine/ruantangren_zi_0" + i + ".sk");
                this.animLabelFactorys.push(templet);
            }
        }
        initBoxKey() {
            let keyNumNow = DataManager.getKeyNum();
            for (let i = 0; i < this.boxKey.numChildren; i++) {
                let child = this.boxKey.getChildAt(i);
                if (i < keyNumNow) {
                    child.skin = "game/img_fg_key.png";
                }
                else {
                    child.skin = "game/img_bg_key.png";
                }
            }
        }
        initView() {
            var self = this;
            this.lbLevelNow.text = "" + (DataManager.getTotalLevel() + 1);
            Laya.timer.frameLoop(6, this, function () {
                self.mMaskProgress.graphics.clear();
                self.mMaskProgress.graphics.drawRect(0, 0, self.mMaskProgress.width * Globals.roundProgress, self.mMaskProgress.height, "#ff0000");
            });
            if (UserGD.playCount < 2) {
                UserGD.onlineSkinIntro && UserGD.onlineSkinIntro.popOut();
            }
            this.initBoxKey();
            this.initViewLw();
            if (!SdkCenter.getInstannce().isLw()) {
                SdkCenter.getInstannce().showBanner();
            }
            SdkCenter.getInstannce().showBlockAd("gq");
        }
        initViewLw() {
            if (SdkCenter.getInstannce().isLw()) {
                this.boxKey.visible = false;
                if (UserGD.onlineSkinIntro) {
                    UserGD.onlineSkinIntro.visible = false;
                }
                if (UserGD.levelSkinIntro) {
                    UserGD.levelSkinIntro.visible = false;
                }
                if (PulCenter.checkLwCondition("banner")) {
                    SdkCenter.getInstannce().showBanner();
                }
            }
        }
        initClickCallback(btn, callback) {
            PulCenter.clickEvent(btn, this, callback, null);
            btn.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                e.stopPropagation();
            });
        }
        onRestartGameClick() {
            this.eventClose();
            Utils.dispatchEvent(SelfGameConfig.EVENT_RESET_STAGE, false);
        }
        initListener() {
            let self = this;
            this.on(Laya.Event.MOUSE_DOWN, this, () => {
                JoyStickCtrl.onFingerPress();
            });
            this.on(Laya.Event.MOUSE_UP, this, () => {
                JoyStickCtrl.onFingerRelease();
            });
            this.on(Laya.Event.MOUSE_OUT, this, () => {
                JoyStickCtrl.onFingerRelease();
            });
            this.on(Laya.Event.MOUSE_MOVE, this, () => {
                JoyStickCtrl.onFingerMove();
            });
            this.initClickCallback(this.mBtnRestartGame, () => {
                self.onRestartGameClick();
            });
        }
        createEmoji(data) {
            let camera = data[0];
            let role = data[1];
            let rand = Utils.nextInt(0, 3);
            let emoji = this.animFactorys[rand].buildArmature(0);
            this.content.addChild(emoji);
            let vec4 = new Laya.Vector4();
            let pos = role.transform.position.clone();
            pos.y += 0.5;
            camera.viewport.project(pos, camera.projectionViewMatrix, vec4);
            emoji.pos(vec4.x / Laya.stage.clientScaleX, vec4.y / Laya.stage.clientScaleY);
            emoji.scale(0.4, 0.4, true);
            emoji.play(0, false);
            let frameCount = 180;
            let self = this;
            Laya.timer.frameLoop(1, this, function asd() {
                if ((--frameCount == 0) && emoji) {
                    Laya.timer.clear(self, asd);
                    emoji.visible = false;
                }
                else {
                    let vec4 = new Laya.Vector4();
                    let pos = role.transform.position.clone();
                    pos.y += 0.5;
                    camera.viewport.project(pos, camera.projectionViewMatrix, vec4);
                    emoji.pos(vec4.x / Laya.stage.clientScaleX, vec4.y / Laya.stage.clientScaleY);
                }
            });
            if (!this.animLabelShowed) {
                this.animLabelShowed = true;
                Laya.timer.once(3000, this, () => {
                    self.animLabelShowed = false;
                });
                let animLabel = this.animLabelFactorys[Globals.animLabelIndexNow].buildArmature(0);
                if (++Globals.animLabelIndexNow == 5) {
                    Globals.animLabelIndexNow = 0;
                }
                this.content.addChild(animLabel);
                animLabel.pos(Laya.stage.width / 2, Laya.stage.height * 2 / 5);
                animLabel.play(0, false);
                animLabel.zOrder = 1;
                Laya.timer.once(1000, this, () => {
                    animLabel.visible = false;
                });
            }
        }
        hideReset() {
            this.mBtnRestartGame.visible = false;
        }
        eventGetKey(x) {
            let self = this;
            let keyNumNow = DataManager.getKeyNum();
            this.boxKey.visible = true;
            let pos;
            let index;
            for (let i = 0; i < this.boxKey.numChildren; i++) {
                let child = this.boxKey.getChildAt(i);
                if (i < keyNumNow - 1) {
                    child.skin = "game/img_fg_key.png";
                }
                else {
                    if (i == keyNumNow - 1) {
                        index = i;
                        pos = [child.x, child.y];
                    }
                    child.skin = "game/img_bg_key.png";
                }
            }
            if (index == undefined) {
                return;
            }
            let key = new Laya.Image("game/img_fg_key.png");
            Laya.stage.addChild(key);
            key.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
            key.pos(x, Laya.stage.height * 2 / 3);
            let img = this.boxKey.getChildAt(index);
            Laya.Tween.to(key, {
                x: this.boxKey.x + img.x,
                y: this.boxKey.y + img.y
            }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, (key) => {
                img.skin = key.skin;
                key.visible = false;
                key.removeSelf();
            }, [key]));
            Laya.timer.once(1000, this, () => {
                self.eventClose();
            });
        }
        initEventHandler() {
            Utils.onEvent(this, SelfGameConfig.EVENT_CREATE_EMOJI, this.createEmoji);
            Utils.onEvent(this, SelfGameConfig.EVENT_GAME_OVER, this.hideReset);
            Utils.onEvent(this, SelfGameConfig.EVENT_GET_KEY, this.eventGetKey);
        }
    }

    class HotRecom extends ui.sdk.HotRecamUI {
        constructor(callback) {
            super();
            this.mData = [];
            this.scrollDistance = 1;
            this.maxIndex = 0;
            this.cellsNum = 0;
            this.canScroll = true;
            this.cellsLinesInView = 0;
            this.name = "hot";
            this.zOrder = 20;
            if (callback) {
                this.callback = callback;
            }
        }
        onAwake() {
            this.initData();
            this.initView();
            this.eventRegister();
        }
        initView() {
            var self = this;
            this.height = Laya.stage.height;
            this.width = Laya.stage.width;
            this.listAd.vScrollBarSkin = "";
            this.listAd.array = this.mData;
            this.listAd.renderHandler = new Laya.Handler(this, this.updateItem);
            this.maxIndex = this.mData.length;
            this.cellsNum = this.listAd.cells.length;
            this.scrollListDraw();
            this.btnClose.top = this.height * 0.7;
            if (UiUtils.isAllScreen()) {
                this.btnClose.top = this.height * 0.75;
            }
            else {
                this.bg.height = 720;
            }
            this.cellsLinesInView = Math.floor((this.bg.height - this.listAd.top) / (this.listAd.cells[0].height + this.listAd.repeatY));
            if (PulCenter.checkLwCondition("swipe")) {
                SdkCenter.getInstannce().hideBanner();
                UserGD.canShowBanner = false;
                Laya.timer.once(LwConfig.lwCustomConfig[0] * 1000, self, () => {
                    UserGD.canShowBanner = true;
                    SdkCenter.getInstannce().showBanner("hot");
                    Laya.timer.once(LwConfig.lwCustomConfig[1] * 1000, self, () => {
                        Laya.Tween.to(self.btnClose, { top: self.bg.height + 30 }, 1000);
                    });
                });
            }
            else {
                this.btnClose.top = this.bg.height + 30;
            }
        }
        initData() {
            var data = PulCenter.getWxLwInferenceData("hot");
            for (var i = 0; i < data.length; i++) {
                this.mData[i] = data[i];
            }
            this.mData = Utils.shuffleArr(this.mData);
            console.log(this.mData);
        }
        eventRegister() {
            var self = this;
            var time;
            if (PulCenter.checkLwCondition("swipe")) {
                time = LwConfig.lwCustomConfig[0] * 1000 + LwConfig.lwCustomConfig[1] * 1000 + 500;
            }
            else {
                time = 1;
            }
            Laya.timer.once(time, this, () => {
                this.btnClose.on(Laya.Event.CLICK, this, function () {
                    self.eventClose();
                });
            });
            this.listAd.on(Laya.Event.MOUSE_DOWN, this, () => {
                self.canScroll = false;
            });
            this.listAd.on(Laya.Event.MOUSE_UP, this, () => {
                self.canScroll = true;
                self.scrollListDraw();
            });
        }
        showBanner() {
            SdkCenter.getInstannce().showBanner("hot");
        }
        updateItem(cell, index) {
            var self = this;
            var dataSource = cell.dataSource;
            var icon = cell.getChildByName("icon");
            var name = cell.getChildByName("name");
            icon.skin = dataSource.icon ? dataSource.icon : "";
            icon.visible = true;
            name.text = dataSource.name ? dataSource.name : "";
            if (dataSource.name.length > 6) {
                name.fontSize = 23;
            }
            else {
                name.fontSize = 26;
            }
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                SdkCenter.getInstannce().navigateToMiniProgram(dataSource, function s() {
                }, function f() {
                }, function c() {
                    if (PulCenter.checkLwCondition("fullAd")) {
                        Laya.stage.addChild(new FullAd());
                    }
                });
            });
        }
        scrollListDraw() {
            var self = this;
            if (this.canScroll) {
                Laya.timer.once(2000, this, function s() {
                    self.eventScrollListDraw();
                });
            }
        }
        eventScrollListDraw() {
            var self = this;
            var baseSpeed = 2000;
            var scrollSpeed = 0;
            var horizontalNum = 3;
            var curCell = this.listAd.cells[0];
            var curIndex = 0;
            for (let i = 0; i < this.listAd.array.length; i++) {
                if (curCell.dataSource == this.listAd.array[i]) {
                    curIndex = i;
                    break;
                }
            }
            if (this.scrollDistance > 0) {
                var remainder = this.maxIndex % horizontalNum;
                scrollSpeed = baseSpeed * (this.maxIndex - ((this.cellsLinesInView - 1) * horizontalNum + remainder) + 1 - curIndex);
                this.listAd.tweenTo(this.maxIndex - ((this.cellsLinesInView - 1) * horizontalNum + remainder) + 1, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
            else if (this.scrollDistance < 0) {
                scrollSpeed = baseSpeed * curIndex;
                this.listAd.tweenTo(0, scrollSpeed, Laya.Handler.create(self, self.reScroll));
            }
        }
        reScroll() {
            this.scrollDistance = this.scrollDistance == 1 ? -1 : 1;
            this.scrollListDraw();
        }
        removeAllEvent() {
            this.btnClose.offAll();
            this.listAd.offAll();
            this.offAll();
            Laya.timer.clearAll(this);
        }
        eventClose() {
            if (this.callback) {
                this.callback();
            }
            UserGD.canShowBanner = true;
            this.removeAllEvent();
            this.removeSelf();
        }
    }

    class AnimatorStateScript extends Laya.AnimatorStateScript {
        constructor() {
            super(...arguments);
            this.isSkipEnd = false;
        }
        onStateEnter() {
            if (this.mEnterCallback) {
                this.mEnterCallback();
            }
        }
        onStateUpdate() {
        }
        onStateExit() {
            if (this.isSkipEnd) {
                this.isSkipEnd = false;
            }
            else if (this.mExitCallback) {
                this.mExitCallback();
            }
        }
        setCallback(enterCallback, updateCallback, exitCallback) {
            this.mEnterCallback = enterCallback;
            this.mUpdateCallback = updateCallback;
            this.mExitCallback = exitCallback;
        }
        setSkipEnd(value) {
            this.isSkipEnd = value;
        }
    }

    class AnimatorUtils {
        static getScriptAndSetCallbacks(animator, stateName, enterCall, updateCall, exitCall) {
            let script = animator.getControllerLayer().getAnimatorState(stateName).getScript(AnimatorStateScript);
            if (!script) {
                script = animator.getControllerLayer().getAnimatorState(stateName).addScript(AnimatorStateScript);
            }
            script.setCallback(enterCall, updateCall, exitCall);
        }
        static setSkipAnimEndCallback(animator, stateName, isSkip) {
            let animatorState = animator.getControllerLayer().getAnimatorState(stateName);
            let script = animatorState.getScript(AnimatorStateScript);
            if (script) {
                script.setSkipEnd(isSkip);
            }
        }
    }

    class Vector3Utils {
        static Vector2Distance(e, t) {
            var i = e.x - t.x, a = e.z - t.z, n = Math.pow(i, 2), s = Math.pow(a, 2);
            return Math.sqrt(n + s);
        }
        static Vector3Angle(e, t) {
            var i = Laya.Vector3.dot(e, t) / (Laya.Vector3.scalarLength(e) * Laya.Vector3.scalarLength(t));
            return 180 * Math.acos(i) / Math.PI;
        }
        static Vector22TargetAngle(selfNode, nodeTarget) {
            var currentDirction = new Laya.Vector3(0, 0, 0);
            var tempNodeTargetPosition = nodeTarget.clone();
            var tempSelfPosition = selfNode.transform.position.clone();
            tempSelfPosition = new Laya.Vector3(selfNode.transform.position.x, 0, selfNode.transform.position.z);
            Laya.Vector3.subtract(new Laya.Vector3(tempNodeTargetPosition.x, 0, tempNodeTargetPosition.z), tempSelfPosition, currentDirction);
            Laya.Vector3.normalize(currentDirction, currentDirction);
            var currentForward = new Laya.Vector3();
            selfNode.transform.getForward(currentForward);
            currentForward = new Laya.Vector3(currentForward.x, 0, currentForward.z);
            var angle = Vector3Utils.Vector3Angle(currentForward, currentDirction);
            console.log("---------currentDirction", currentDirction);
            console.log("---------currentForward", currentForward);
            if ((currentDirction.x < 0 && currentDirction.z < 0 && currentForward.x < 0 && currentForward.z > 0) ||
                (currentDirction.x < 0 && currentDirction.z < 0 && currentForward.x < 0 && currentForward.z < 0 && currentForward.z > -0.5) ||
                (currentDirction.x < 0 && currentDirction.z < 0 && currentForward.x > 0 && currentForward.z > 0 && currentForward.x > 0.5 && currentForward.z > 0.5) ||
                (currentDirction.x > 0 && currentDirction.z > 0 && currentForward.x > 0 && currentForward.z > 0 && currentForward.x > 0.5 && currentForward.z < 0.5) ||
                (currentDirction.x > 0 && currentDirction.z > 0 && currentForward.x < 0 && currentForward.z < 0 && currentForward.z < -0.5) ||
                (currentDirction.x > 0 && currentDirction.z > 0 && currentForward.x > 0 && currentForward.z < 0 && currentForward.x > 0.5 && currentForward.z < -0.5)) {
                angle = -angle;
            }
            return angle;
        }
        static getAngleBetweenVector3(vec1, vec2) {
            return Laya.Vector3.dot(vec1, vec2) / (Laya.Vector3.scalarLength(vec1) * Laya.Vector3.scalarLength(vec2));
        }
    }
    Vector3Utils.UP = new Laya.Vector3(0, 1, 0);
    Vector3Utils.DOWN = new Laya.Vector3(0, -1, 0);
    Vector3Utils.FORWARD = new Laya.Vector3(0, 0, 1);
    Vector3Utils.BACKWARD = new Laya.Vector3(0, 0, -1);
    Vector3Utils.LEFT = new Laya.Vector3(1, 0, 0);
    Vector3Utils.RIGHT = new Laya.Vector3(-1, 0, 0);
    Vector3Utils.ORIGIN = new Laya.Vector3(0, 0, 0);
    Vector3Utils.SCALE_TINY = new Laya.Vector3(0.1, 0.1, 0.1);
    Vector3Utils.SCALE_ORIGIN = new Laya.Vector3(1, 1, 1);
    Vector3Utils.SCALE_BIG = new Laya.Vector3(1.8, 1.8, 1.8);
    Vector3Utils.GRAVITY = new Laya.Vector3(0, -10, 0);

    class GradientMaterial extends Laya.Material {
        constructor() {
            super();
            this.setShaderName("GuodongShader");
        }
        get fresnelColor() {
            return this._shaderValues.getVector(GradientMaterial.FRESNELCOLOR);
        }
        set fresnelColor(e) {
            this._shaderValues.setVector(GradientMaterial.FRESNELCOLOR, e);
        }
        get intensity() {
            return this._shaderValues.getNumber(GradientMaterial.INTENSITY);
        }
        set intensity(e) {
            this._shaderValues.setNumber(GradientMaterial.INTENSITY, e);
        }
        get speed() {
            return this._shaderValues.getNumber(GradientMaterial.SPEED);
        }
        set speed(e) {
            this._shaderValues.setNumber(GradientMaterial.SPEED, e);
        }
        get size() {
            return this._shaderValues.getNumber(GradientMaterial.SIZE);
        }
        set size(e) {
            this._shaderValues.setNumber(GradientMaterial.SIZE, e);
        }
        get color0() {
            return this._shaderValues.getVector(GradientMaterial.COLOR0);
        }
        set color0(e) {
            this._shaderValues.setVector(GradientMaterial.COLOR0, e);
        }
        get color1() {
            return this._shaderValues.getVector(GradientMaterial.COLOR1);
        }
        set color1(e) {
            this._shaderValues.setVector(GradientMaterial.COLOR1, e);
        }
        get range1() {
            return this._shaderValues.getNumber(GradientMaterial.RANGE1);
        }
        set range1(e) {
            this._shaderValues.setNumber(GradientMaterial.RANGE1, e);
        }
        get position1() {
            return this._shaderValues.getVector3(GradientMaterial.POSITION1);
        }
        set position1(e) {
            this._shaderValues.setVector3(GradientMaterial.POSITION1, e);
        }
        get color2() {
            return this._shaderValues.getVector(GradientMaterial.COLOR2);
        }
        set color2(e) {
            this._shaderValues.setVector(GradientMaterial.COLOR2, e);
        }
        get range2() {
            return this._shaderValues.getNumber(GradientMaterial.RANGE2);
        }
        set range2(e) {
            this._shaderValues.setNumber(GradientMaterial.RANGE2, e);
        }
        get position2() {
            return this._shaderValues.getVector3(GradientMaterial.POSITION2);
        }
        set position2(e) {
            this._shaderValues.setVector3(GradientMaterial.POSITION2, e);
        }
        get color3() {
            return this._shaderValues.getVector(GradientMaterial.COLOR3);
        }
        set color3(e) {
            this._shaderValues.setVector(GradientMaterial.COLOR3, e);
        }
        get range3() {
            return this._shaderValues.getNumber(GradientMaterial.RANGE3);
        }
        set range3(e) {
            this._shaderValues.setNumber(GradientMaterial.RANGE3, e);
        }
        get position3() {
            return this._shaderValues.getVector3(GradientMaterial.POSITION3);
        }
        set position3(e) {
            this._shaderValues.setVector3(GradientMaterial.POSITION3, e);
        }
        static initShader() {
            let attributeMap = {
                a_Position: Laya.VertexMesh.MESH_POSITION0,
                a_Normal: Laya.VertexMesh.MESH_NORMAL0,
                a_BoneWeights: Laya.VertexMesh.MESH_BLENDWEIGHT0,
                a_BoneIndices: Laya.VertexMesh.MESH_BLENDINDICES0
            };
            let uniformMap = {
                u_Bones: Laya.Shader3D.PERIOD_CUSTOM,
                u_MvpMatrix: Laya.Shader3D.PERIOD_SPRITE,
                u_WorldMat: Laya.Shader3D.PERIOD_SPRITE,
                u_CameraPos: Laya.Shader3D.PERIOD_CAMERA,
                u_LightBuffer: Laya.Shader3D.PERIOD_SCENE,
                u_FresnelColor: Laya.Shader3D.PERIOD_MATERIAL,
                u_Color0: Laya.Shader3D.PERIOD_MATERIAL,
                u_Intensity: Laya.Shader3D.PERIOD_MATERIAL,
                u_Speed: Laya.Shader3D.PERIOD_MATERIAL,
                u_Size: Laya.Shader3D.PERIOD_MATERIAL,
                u_Color1: Laya.Shader3D.PERIOD_MATERIAL,
                u_Range1: Laya.Shader3D.PERIOD_MATERIAL,
                u_Position1: Laya.Shader3D.PERIOD_MATERIAL,
                u_Color2: Laya.Shader3D.PERIOD_MATERIAL,
                u_Range2: Laya.Shader3D.PERIOD_MATERIAL,
                u_Position2: Laya.Shader3D.PERIOD_MATERIAL,
                u_Color3: Laya.Shader3D.PERIOD_MATERIAL,
                u_Range3: Laya.Shader3D.PERIOD_MATERIAL,
                u_Position3: Laya.Shader3D.PERIOD_MATERIAL,
                u_Time: Laya.Shader3D.PERIOD_SCENE
            };
            let shader = Laya.Shader3D.add("GuodongShader");
            let subShader = new Laya.SubShader(attributeMap, uniformMap);
            shader.addSubShader(subShader);
            subShader.addShaderPass(`
                #include "Lighting.glsl";

                attribute vec4 a_Position;
                attribute vec3 a_Normal;
                attribute vec2 a_Texcoord0;

                uniform mat4 u_MvpMatrix;
                uniform mat4 u_WorldMat;
                uniform vec3 u_CameraPos;
                uniform float u_Time;
                uniform float u_Intensity;
                uniform float u_Speed;
                uniform float u_Size;
                uniform vec4 u_Color0;

                uniform vec4 u_Color1;
                uniform float u_Range1;
                uniform vec3 u_Position1;

                uniform vec4 u_Color2;
                uniform float u_Range2;
                uniform vec3 u_Position2;
                
                uniform vec4 u_Color3;
                uniform float u_Range3;
                uniform vec3 u_Position3;

                varying vec3 v_Normal;
                varying vec3 v_ViewDir;
                varying vec4 v_Color;

                //骨骼相关
                #ifdef BONE
                    attribute vec4 a_BoneIndices;
                    attribute vec4 a_BoneWeights;
                    const int c_MaxBoneCount = 24;
                    uniform mat4 u_Bones[c_MaxBoneCount];
                #endif
                //阴影
                // varying vec4 v_PositionW;

                #ifdef SIMPLEBONE
                #ifdef GPU_INSTANCE\r\n\t\t
                attribute vec4 a_SimpleTextureParams;
                #else
                uniform vec4 u_SimpleAnimatorParams;
                #endif
                uniform sampler2D u_SimpleAnimatorTexture;
                uniform float u_SimpleAnimatorTextureSize;
                #endif
                #ifdef SIMPLEBONE
                mat4 loadMatFromTexture(float FramePos,int boneIndices,float offset)\r\n
                {\r\n\t
                    vec2 uv;\r\n\tfloat PixelPos = FramePos+float(boneIndices)*4.0;\r\n\tfloat halfOffset = offset * 0.5;\r\n\t
                    float uvoffset = PixelPos/u_SimpleAnimatorTextureSize;\r\n\t
                    uv.y = floor(uvoffset)*offset+halfOffset;\r\n\tuv.x = mod(float(PixelPos),u_SimpleAnimatorTextureSize)*offset+halfOffset;\r\n\t
                    vec4 mat0row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\t
                    vec4 mat1row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\t
                    vec4 mat2row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\tuv.x+=offset;\r\n\t
                    vec4 mat3row = texture2D(u_SimpleAnimatorTexture,uv);\r\n\t
                    mat4 m =mat4(mat0row.x,mat0row.y,mat0row.z,mat0row.w,\r\n\t\t\t  mat1row.x,mat1row.y,mat1row.z,mat1row.w,
                        \r\n\t\t\t  mat2row.x,mat2row.y,mat2row.z,mat2row.w,\r\n\t\t\t
                        mat3row.x,mat3row.y,mat3row.z,mat3row.w);\r\n\treturn m;\r\n}
                        \r\n
                #endif

                void main()
                {
                    v_Color = u_Color0;

                    //骨骼相关
                    #ifdef BONE
                        // mat4 skinTransform=mat4(0.0);
                        // skinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;
                        // skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;
                        // skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;
                        // skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;

                        mat4 skinTransform;\r\n\t \t
                        #ifdef SIMPLEBONE\r\n\t\t\t
                        float currentPixelPos;\r\n\t\t\t
                        #ifdef GPU_INSTANCE\r\n\t\t\t\t
                        currentPixelPos = a_SimpleTextureParams.x+a_SimpleTextureParams.y;\r\n\t\t\t
                        #else\r\n\t\t\t\t
                        currentPixelPos = u_SimpleAnimatorParams.x+u_SimpleAnimatorParams.y;\r\n\t\t\t
                        #endif\r\n\t\t\t
                        float offset = 1.0/u_SimpleAnimatorTextureSize;\r\n\t\t\t
                        skinTransform =  loadMatFromTexture(currentPixelPos,int(a_BoneIndices.x),offset) * a_BoneWeights.x;\r\n\t\t\t
                        skinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.y),offset) * a_BoneWeights.y;\r\n\t\t\t
                        skinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.z),offset) * a_BoneWeights.z;\r\n\t\t\t
                        skinTransform += loadMatFromTexture(currentPixelPos,int(a_BoneIndices.w),offset) * a_BoneWeights.w;\r\n\t\t
                        #else\r\n\t\t\t
                        skinTransform =  u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\t\t
                        skinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\t\t
                        skinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\t\t
                        skinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\t
                        #endif\r\n\t\t
                        // position=skinTransform*a_Position;\r\n\t

                        //变色
                        float dx = 0.0;
                        float dy = 0.0;
                        float dz = 0.0;
                        float distance = 0.0;
                        if(u_Range1 > 0.0)
                        {
                            dx = a_Position.x - u_Position1.x;
                            dy = a_Position.y - u_Position1.y;
                            dz = a_Position.z - u_Position1.z;
                            distance = sqrt(dx * dx + dy * dy + dz * dz);
                            if(distance < u_Range1)
                                v_Color = u_Color1;
                        }
        
                        if(u_Range2 > 0.0)
                        {
                            dx = a_Position.x - u_Position2.x;
                            dy = a_Position.y - u_Position2.y;
                            dz = a_Position.z - u_Position2.z;
                            distance = sqrt(dx * dx + dy * dy + dz * dz);
                            if(distance < u_Range2)
                                v_Color = u_Color2;
                        }
        
                        if(u_Range3 > 0.0)
                        {
                            dx = a_Position.x - u_Position3.x;
                            dy = a_Position.y - u_Position3.y;
                            dz = a_Position.z - u_Position3.z;
                            distance = sqrt(dx * dx + dy * dy + dz * dz);
                            if(distance < u_Range3)
                                v_Color = u_Color3;
                        }

                        vec4 position = skinTransform * a_Position;
                        mat4 worldMat = u_WorldMat * skinTransform;
                        v_Normal = mat3(worldMat) * a_Normal;

                        vec3 WorldPosition = (worldMat * a_Position).xyz;   //物体空间转到世界空间
                        v_ViewDir = u_CameraPos - WorldPosition;    //相机视角

                        //阴影
                        // v_PositionW = u_WorldMat * position;

                        gl_Position = u_MvpMatrix * position;

                    #else
                        //不带骨骼的模型
                        mat3 worldMat = mat3(u_WorldMat);
                        v_Normal = worldMat * a_Normal;
                    
                        vec3 WorldPosition = (u_WorldMat * a_Position).xyz;   //物体空间转到世界空间
        
                        vec4 pos = a_Position;
                        pos.xyz = a_Position.xyz + v_Normal.xyz * sin(u_Time * u_Speed + a_Position.y * a_Position.x * a_Position.z * u_Size) * 0.01 * u_Intensity;
        
                        v_ViewDir = u_CameraPos - WorldPosition;    //相机视角

                        //阴影
                        // v_PositionW = u_WorldMat * a_Position;
        
                        gl_Position = u_MvpMatrix * pos;
                    #endif



                    gl_Position = remapGLPositionZ(gl_Position);

                } 
            `, `
                #ifdef FSHIGHPRECISION
                    precision highp float;
                #else
                    precision mediump float;
                #endif
                
                #include "Lighting.glsl";

                varying vec3 v_Normal;
                varying vec3 v_ViewDir;
                varying vec4 v_Color;

                uniform vec4 u_FresnelColor;
                uniform sampler2D u_LightBuffer;

                //阴影
                // #include "ShadoGradientMaterial.glsl";
                // varying vec4 v_PositionW;

                void main()
                {   
                    DirectionLight directionLight = getDirectionLight(u_LightBuffer,0);
                    vec3 lightVec = normalize(directionLight.direction);

                    vec3 ViewDir = normalize(v_ViewDir);
                    vec3 Normal = normalize(v_Normal);

                    float ln = max (0.0, dot (-lightVec,Normal));  
                    ln = ln*0.5 + 0.5; 
                    vec3 diffuseColor = vec3(ln, ln, ln);

                    vec3 specColor = vec3(1.0, 1.0, 1.0);
                    float specularIntensity = 1.0;
                    float gloss = 1.0;

                    //BlinnPhone计算公式
                    vec3 h = normalize(ViewDir - lightVec);
                    float nh = max (0.0, dot (h,Normal));
                    vec3 specular = specColor * pow (nh, specularIntensity * 512.0) * gloss;

                    //Fresnel
                    float ndv = 1.0 - dot(Normal, ViewDir);
                    float rim = pow(ndv, 2.0);
                    vec3 rimCol = rim * u_FresnelColor.rgb * 0.4;

                    float rim2 = pow(ndv, 0.5);
                    vec3 rimCol2 = rim2 * u_FresnelColor.rgb * 0.5;

                    vec4 final = vec4(specular + v_Color.rgb + rimCol + rimCol2, 1.0);

                    // vec4 final = vec4(Normal, 1.0);
                    // vec4 final = vec4(rim, rim, rim, 1.0);

                    //阴影
                    // vec4 shadowCoord = getShadowCoord(v_PositionW);
                    // float shadow = sampleShadowmap(shadowCoord);

                    // gl_FragColor = final * shadow;
                    gl_FragColor = final;
                }
            `);
        }
    }
    GradientMaterial.FRESNELCOLOR = Laya.Shader3D.propertyNameToID("u_FresnelColor");
    GradientMaterial.COLOR0 = Laya.Shader3D.propertyNameToID("u_Color0");
    GradientMaterial.INTENSITY = Laya.Shader3D.propertyNameToID("u_Intensity");
    GradientMaterial.SPEED = Laya.Shader3D.propertyNameToID("u_Speed");
    GradientMaterial.SIZE = Laya.Shader3D.propertyNameToID("u_Size");
    GradientMaterial.COLOR1 = Laya.Shader3D.propertyNameToID("u_Color1");
    GradientMaterial.RANGE1 = Laya.Shader3D.propertyNameToID("u_Range1");
    GradientMaterial.POSITION1 = Laya.Shader3D.propertyNameToID("u_Position1");
    GradientMaterial.COLOR2 = Laya.Shader3D.propertyNameToID("u_Color2");
    GradientMaterial.RANGE2 = Laya.Shader3D.propertyNameToID("u_Range2");
    GradientMaterial.POSITION2 = Laya.Shader3D.propertyNameToID("u_Position2");
    GradientMaterial.COLOR3 = Laya.Shader3D.propertyNameToID("u_Color3");
    GradientMaterial.RANGE3 = Laya.Shader3D.propertyNameToID("u_Range3");
    GradientMaterial.POSITION3 = Laya.Shader3D.propertyNameToID("u_Position3");

    class MachineInfo {
    }

    class ModelFactory {
        static loadMachineJson(index, machineConfig, callback) {
            var self = this;
            let prefix = "res2d/config/machine/MachineConfig";
            let nextStep = () => {
                if (machineConfig[1].id > 0) {
                    var obj = Laya.loader.getRes(prefix + machineConfig[1].id + ".json");
                    if (obj) {
                        if (callback) {
                            callback(index, obj, true);
                        }
                    }
                    else {
                        Laya.loader.load(prefix + machineConfig[1].id + ".json", Laya.Handler.create(this, (res) => {
                            obj = Laya.loader.getRes(prefix + machineConfig[1].id + ".json");
                            if (callback) {
                                callback(index, obj, true);
                            }
                        }));
                    }
                }
                else {
                    callback(index, null, true);
                }
            };
            if (machineConfig[0].id > 0) {
                var obj = Laya.loader.getRes(prefix + machineConfig[0].id + ".json");
                if (obj) {
                    if (callback) {
                        callback(index, obj, false);
                    }
                    nextStep();
                }
                else {
                    Laya.loader.load(prefix + machineConfig[0].id + ".json", Laya.Handler.create(this, (res) => {
                        obj = Laya.loader.getRes(prefix + machineConfig[0].id + ".json");
                        if (callback) {
                            callback(index, obj, false);
                        }
                        nextStep();
                    }));
                }
            }
            else {
                if (callback) {
                    callback(index, null, false);
                }
                nextStep();
            }
        }
        static getMachineNames() {
        }
        static createScene(sceneInfo, callback) {
            var self = this;
            if (!this.scene3d) {
                this.scene3d = new Laya.Scene3D();
                this.scene3d.ambientColor = new Laya.Vector3(225 / 255, 236 / 255, 1);
                this.scene3d.name = SelfGameConfig.NAME_SCENE_3D_SKY;
                Laya.stage.addChild(this.scene3d);
                this.scene3d.zOrder = SelfGameConfig.ZORDER_SCENE_3D;
                this.scene3d.enableFog = true;
                this.scene3d.fogColor = new Laya.Vector3(0.27, 0.78, 1);
                this.scene3d.fogStart = 2;
                this.scene3d.fogRange = 20;
                let water = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_WATER_SURFAVE + ".lh");
                this.scene3d.addChild(water);
            }
            let bg3dConfig = Globals.bg3dConfig[Math.floor(Math.random() * Globals.bg3dConfig.length)];
            ModelFactory.changeFogColor(bg3dConfig.fog);
            let imgBg = Laya.stage.getChildByName("bg3dImg");
            if (!imgBg) {
                imgBg = new Laya.Image(bg3dConfig.bg);
                imgBg.name = "bg3dImg";
                imgBg.size(Laya.stage.width * 1.2, Laya.stage.height * 1.2);
                imgBg.anchorX = 0.5;
                imgBg.anchorY = 0.5;
                Laya.stage.addChild(imgBg);
                imgBg.zOrder = SelfGameConfig.ZORDER_SCENE_3D - 1;
                imgBg.pos(Laya.stage.width / 2, Laya.stage.height / 2);
            }
            imgBg.skin = bg3dConfig.bg;
            let map = new Laya.Sprite3D("map");
            this.scene3d.addChild(map);
            map.transform.localPosition = new Laya.Vector3(0, 0, 0);
            sceneInfo.roadConfigArray.unshift(new RoadConfig({
                mach1: [0, 0, 0, 0, 0],
                mach2: [0, 0, 0, 0, 0],
                role: 0,
                coin: [0, 0]
            }));
            sceneInfo.roadConfigArray.push(new RoadConfig({
                mach1: [0, 0, 0, 0, 0],
                mach2: [0, 0, 0, 0, 0],
                role: 0,
                coin: [0, 0]
            }));
            let res3dArr = new Array();
            let requestJsonNum = 0;
            let requestJsonComplete = () => {
                ++requestJsonNum;
                if (requestJsonNum == sceneInfo.roadConfigArray.length) {
                    Laya.loader.create(res3dArr, Laya.Handler.create(null, (res) => { callback(map); }));
                }
            };
            for (let i = 0; i < sceneInfo.roadConfigArray.length; i++) {
                if (i == 0 && i == sceneInfo.roadConfigArray.length - 1) {
                    let machineInfo = Globals.currentSceneInfo.machineInfoArr[i];
                    machineInfo ? 0 : (machineInfo = new MachineInfo());
                    Globals.currentSceneInfo.machineInfoArr.push(machineInfo);
                    requestJsonComplete();
                    continue;
                }
                let machineInfo = Globals.currentSceneInfo.machineInfoArr[i];
                machineInfo ? 0 : (machineInfo = new MachineInfo());
                Globals.currentSceneInfo.machineInfoArr.push(machineInfo);
                machineInfo.index = i;
                if (!machineInfo.modelNames) {
                    machineInfo.modelNames = new Array();
                }
                let name = Globals.machineFileNames[sceneInfo.roadConfigArray[i].machineConfig[0].id];
                if (name && name.length > 0) {
                    machineInfo.modelNames.push("" + name);
                    res3dArr.push(SelfGameConfig.PATH_MAIN_SCENE_ROOT + name);
                }
                else {
                    machineInfo.modelNames.push(null);
                }
                let name2 = Globals.machineFileNames[sceneInfo.roadConfigArray[i].machineConfig[1].id];
                if (name2 && name2.length > 0) {
                    machineInfo.modelNames.push("" + name2);
                    res3dArr.push(SelfGameConfig.PATH_MAIN_SCENE_ROOT + name2);
                }
                else {
                    machineInfo.modelNames.push(null);
                }
                let nameRole = Globals.roleConfigArray[sceneInfo.roadConfigArray[i].roleConfig];
                if (nameRole && nameRole.length > 0) {
                    res3dArr.push(SelfGameConfig.PATH_MAIN_SCENE_ROOT + nameRole);
                }
                let coinName1 = Globals.coinConfigArray[Math.floor(sceneInfo.roadConfigArray[i].coinConfig[0] / 100)];
                if (coinName1 && coinName1.length > 0) {
                    res3dArr.push(SelfGameConfig.PATH_MAIN_SCENE_ROOT + coinName1);
                }
                let coinName2 = Globals.coinConfigArray[Math.floor(sceneInfo.roadConfigArray[i].coinConfig[1] / 100)];
                if (coinName2 && coinName2.length > 0) {
                    res3dArr.push(SelfGameConfig.PATH_MAIN_SCENE_ROOT + coinName2);
                }
                requestJsonComplete();
            }
        }
        static changeFogColor(color) {
            this.scene3d.fogColor = color.clone();
        }
        static createRoleModel(shopModel) {
            let role;
            if (shopModel) {
                role = Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SHOP_ROLE_PREFAB + ".lh").clone();
            }
            else {
                role = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROLE_PREFAB + ".lh").clone();
            }
            return role;
        }
        static createRole() {
            let role = PoolManager.getItem(SelfGameConfig.NAME_ROLE_PREFAB);
            if (!role) {
                role = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROLE_PREFAB + ".lh").clone();
            }
            let rootNode = new Laya.Sprite3D();
            let roleParent = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_JUMP_NODE_PREFAB + ".lh").clone();
            roleParent.name = SelfGameConfig.NAME_NODE_ROLE_PARENT;
            role.name = SelfGameConfig.NAME_NODE_ROLE;
            roleParent.addChild(role);
            rootNode.addChild(roleParent);
            role.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            role.transform.localPosition = Vector3Utils.ORIGIN.clone();
            return rootNode;
        }
        static createBossModel() {
            let boss;
            boss = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_BOSS_PREFAB + ".lh").clone();
            return boss;
        }
        static createRoad() {
            return Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_BASIC_ROAD_PREFAB + ".lh").clone();
        }
        static createStartPart() {
            return Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROAD_START_PREFAB + ".lh").clone();
        }
        static createEndPart() {
            return Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROAD_END_PREFAB + ".lh").clone();
        }
        static createMachine(machineName) {
            let machine = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + machineName);
            return machine.getChildByName("realRoot").clone();
        }
        static getRoleConfig(index) {
            return Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + Globals.roleConfigArray[index]);
        }
        static getCoinConfig(index) {
            return Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + Globals.coinConfigArray[index]);
        }
        static createCoin() {
            return Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_NODE_COIN_PREFAB + ".lh").clone();
        }
        static createExplosion() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_EXPLOSION_PREFAB + ".lh").clone();
        }
        static createCoinEffect() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_COIN_EFFECT_PREFAB + ".lh").clone();
        }
        static getGlove(isBoss) {
            return isBoss ?
                Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_BOSS_GLOVE_PREFAB + ".lh") :
                Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_ROLE_GLOVE_PREFAB + ".lh");
        }
        static createMultiModel() {
            let numberMulti = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MULTI_PREFAB + ".lh");
            return numberMulti.getChildAt(0).clone();
        }
        static getMultiMaterialX() {
            if (!this.matX) {
                let numberMulti = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MULTI_PREFAB + ".lh");
                this.matX = numberMulti.getChildAt(1).meshRenderer.material.clone();
                this.matX.lock = true;
            }
            return this.matX;
        }
        static getMultiMaterialPoint() {
            if (!this.matPoint) {
                let numberMulti = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MULTI_PREFAB + ".lh");
                this.matPoint = numberMulti.getChildAt(2).meshRenderer.material.clone();
                this.matPoint.lock = true;
            }
            return this.matPoint;
        }
        static getArrNum() {
            this.arrNum = new Array();
            let numberMulti = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MULTI_PREFAB + ".lh");
            for (let i = 0; i < numberMulti.getChildAt(4).numChildren; i++) {
                let material = numberMulti.getChildAt(4).getChildAt(i).meshRenderer.material.clone();
                material.lock = true;
                this.arrNum.push(material);
            }
        }
        static getMultiMaterialnum(num) {
            if (!this.arrNum) {
                this.getArrNum();
            }
            return this.arrNum[num];
        }
        static getArrColor() {
            this.arrColor = new Array();
            let numberMulti = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MULTI_PREFAB + ".lh");
            for (let i = 0; i < numberMulti.getChildAt(3).numChildren; i++) {
                let material = numberMulti.getChildAt(3).getChildAt(i).meshRenderer.material.clone();
                material.lock = true;
                this.arrColor.push(material);
            }
        }
        static getMultiMaterialColor(num) {
            if (!this.arrColor) {
                this.getArrColor();
            }
            return this.arrColor[num];
        }
        static createSmashCrash() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SMASH_CRASH_RPEAFAB + ".lh").clone();
        }
        static createGetHitEffect() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_GET_HIT_PREFAB + ".lh").clone();
        }
        static createBloodEffect(index) {
            let bloodRoot = Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_BLOOD_PREFAB + ".lh");
            return bloodRoot.getChildAt(index).clone();
        }
        static createAccelerateEffect() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_ACCELERATE_PREFAB + ".lh").clone();
        }
        static createAccelerateLines() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_ACCELERATE_LINES_PREFAB + ".lh").clone();
        }
        static createTransformEffect() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_TRANSFORM_PREFAB + ".lh").clone();
        }
        static createInfectEffect() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_INFECT_PREFAB + ".lh").clone();
        }
        static createFootprint() {
            let footprintRoot = Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_FOOTPRINT_PREFAB + ".lh");
            let rand = Math.floor(Math.random() * footprintRoot.numChildren);
            return footprintRoot.getChildAt(rand).clone();
        }
        static createCutAxisXY() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_CUT_AXIS_XY_PREFAB + ".lh").clone();
        }
        static createCutAxisYZ() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_CUT_AXIS_YZ_PREFAB + ".lh").clone();
        }
        static createCutAxisXZ() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_CUT_AXIS_XZ_PREFAB + ".lh").clone();
        }
        static createFireworks() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_FIREWORK_PREFAB + ".lh").clone();
        }
        static createWallBreakEffect() {
            return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_WALL_BREAK_PREFAB + ".lh").clone();
        }
        static getSkin(index, type) {
            if (index == 0) {
                console.log("创建套装失败，index为0");
                return null;
            }
            if (type == 0) {
                return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SKIN_SHOP_PREFAB + index + ".lh");
            }
            else {
                return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SKIN_ROAD_PREFAB + index + ".lh");
            }
        }
        static createHat(index, type) {
            if (index == 0) {
                console.log("创建帽子失败，index为0");
                return null;
            }
            if (type == 0) {
                return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_HAT_SHOP_PREFAB + index + ".lh").clone();
            }
            else {
                return Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_HAT_ROAD_PREFAB + index + ".lh").clone();
            }
        }
        static createBossHat() {
            let prefab = Laya.loader.getRes(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_BOSS_HAT_PREFAB + Globals.bossUsingHatIndex + ".lh");
            return (prefab ? prefab.clone() : null);
        }
    }
    ModelFactory.scene3d = null;

    class EffectManager {
        static shaderChange(fresnelColor, color0, intensity, size, speed, color1Config, color2Config, color3Config) {
            GradientMaterial.initShader();
            let material = new GradientMaterial();
            return material.renderQueue = 2001, material.fresnelColor = fresnelColor, material.color0 = color0, material.intensity = intensity,
                material.size = size, material.speed = speed,
                material.color1 = color1Config[0], material.range1 = color1Config[1], material.position1 = color1Config[2],
                material.color2 = color2Config[0], material.range2 = color2Config[1], material.position2 = color2Config[2],
                material.color3 = color3Config[0], material.range3 = color3Config[1], material.position3 = color3Config[2],
                material;
        }
        static init() {
            let color1Config = [new Laya.Vector4(1, 0, 0, 1), 0, new Laya.Vector3(0, -0.5, 0)];
            let color2Config = [new Laya.Vector4(0, 1, 0, 1), 0, new Laya.Vector3(-0.5, 0, 0)];
            let color3Config = [new Laya.Vector4(0, 0, 1, 1), 0, new Laya.Vector3(0, 0.5, 0)];
            this.selfMt = this.shaderChange(new Laya.Vector4(), new Laya.Vector4(), 0, 0, 0, color1Config, color2Config, color3Config);
            this.bossMt = this.shaderChange(new Laya.Vector4(), new Laya.Vector4(), 0, 0, 0, color1Config, color2Config, color3Config);
            this.shopMt = this.shaderChange(new Laya.Vector4(), new Laya.Vector4(), 0, 0, 0, color1Config, color2Config, color3Config);
            this.otherMt = this.shaderChange(Globals.defaultColorConfig.fresnelColor.clone(), Globals.defaultColorConfig.mainColor.clone(), 0, 0, 0, color1Config, color2Config, color3Config);
            this.trySkinMt = new Array();
            for (let i = 0; i < 4; i++) {
                let material = this.shaderChange(new Laya.Vector4(), new Laya.Vector4(), 0, 0, 0, color1Config, color2Config, color3Config);
                material.lock = true;
                this.trySkinMt.push(material);
            }
            this.selfMt.lock = true;
            this.bossMt.lock = true;
            this.shopMt.lock = true;
            this.otherMt.lock = true;
        }
        static refreshMaterial(render, type, index) {
            let material;
            switch (type) {
                case this.MaterialType.TYPE1: {
                    material = this.otherMt;
                    break;
                }
                case this.MaterialType.TYPE2: {
                    material = this.selfMt;
                    break;
                }
                case this.MaterialType.TYPE3: {
                    material = this.bossMt;
                    break;
                }
                case this.MaterialType.TYPE4: {
                    material = this.shopMt;
                    break;
                }
                case this.MaterialType.TYPE5: {
                    material = this.trySkinMt[index];
                    break;
                }
            }
            render.material = material;
        }
        static changeMaterialColor(fresnelColor, mainColor) {
            this.selfMt.fresnelColor = fresnelColor.clone();
            this.selfMt.color0 = mainColor.clone();
        }
        static changeBossMatColor(fresnelColor, mainColor) {
            this.bossMt.fresnelColor = fresnelColor.clone();
            this.bossMt.color0 = mainColor.clone();
        }
        static changeShopMatColor(fresnelColor, mainColor) {
            this.shopMt.fresnelColor = fresnelColor.clone();
            this.shopMt.color0 = mainColor.clone();
        }
        static changeTrySkinMtColor(index, fresnelColor, mainColor) {
            this.trySkinMt[index].fresnelColor = fresnelColor.clone();
            this.trySkinMt[index].color0 = mainColor.clone();
        }
        static replaceTrySkinMt(isLeft) {
            let temp;
            if (isLeft) {
                temp = this.trySkinMt[3];
                this.trySkinMt[3] = this.trySkinMt[0];
                this.trySkinMt[0] = this.trySkinMt[1];
                this.trySkinMt[1] = this.trySkinMt[2];
                this.trySkinMt[2] = temp;
            }
            else {
                temp = this.trySkinMt[3];
                this.trySkinMt[3] = this.trySkinMt[2];
                this.trySkinMt[2] = this.trySkinMt[1];
                this.trySkinMt[1] = this.trySkinMt[0];
                this.trySkinMt[0] = temp;
            }
        }
        static initEffectRoot(parentNode) {
            this.parentNode = parentNode;
            this.switchAge13 = (SdkCenter.getInstannce().isQQ() || SdkCenter.getInstannce().isWx()) && !UserGD.openSpecialEffect || SdkCenter.getInstannce().isLw() && !PulCenter.checkLwCondition("effect");
        }
        static prePlayEffects() {
            if (UserGD.playCount < 1) {
                let obj = {
                    "PARTICLESHURIKEN": [
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "STRETCHEDBILLBOARD",
                                "COLOROVERLIFETIME",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "SPHERHBILLBOARD",
                                "COLOROVERLIFETIME",
                                "SIZEOVERLIFETIMECURVE",
                                "TEXTURESHEETANIMATIONCURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "COLOROVERLIFETIME",
                                "SIZEOVERLIFETIMECURVE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "ROTATIONOVERLIFETIMERANDOMCONSTANTS",
                                "ROTATIONOVERLIFETIME",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "STRETCHEDBILLBOARD",
                                "ROTATIONOVERLIFETIMERANDOMCONSTANTS",
                                "SIZEOVERLIFETIMECURVE",
                                "ROTATIONOVERLIFETIME",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "SPHERHBILLBOARD",
                                "SIZEOVERLIFETIMECURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "HORIZONTALBILLBOARD",
                                "COLOROVERLIFETIME",
                                "SIZEOVERLIFETIMECURVE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "SPHERHBILLBOARD",
                                "SIZEOVERLIFETIMECURVE",
                                "TEXTURESHEETANIMATIONCURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "SIZEOVERLIFETIMECURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "RENDERMODE_MESH",
                                "COLOROVERLIFETIME",
                                "SIZEOVERLIFETIMECURVE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "ROTATIONOVERLIFETIMERANDOMCONSTANTS",
                                "SIZEOVERLIFETIMECURVE",
                                "ROTATIONOVERLIFETIME",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "SPHERHBILLBOARD",
                                "COLOROVERLIFETIME",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "COLOROVERLIFETIME",
                                "SIZEOVERLIFETIMECURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "STRETCHEDBILLBOARD",
                                "SIZEOVERLIFETIMECURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "SIZEOVERLIFETIMECURVE",
                                "TEXTURESHEETANIMATIONCURVE",
                                "SHAPE",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        },
                        {
                            "defineNames": [
                                "DIFFUSEMAP",
                                "FOG",
                                "ADDTIVEFOG",
                                "SPHERHBILLBOARD",
                                "COLOROVERLIFETIME",
                                "ROTATIONOVERLIFETIMERANDOMCONSTANTS",
                                "ROTATIONOVERLIFETIME",
                                "TINTCOLOR"
                            ],
                            "passIndex": 0,
                            "subShaderIndex": 0
                        }
                    ]
                };
                EffectUtils.initShader(obj);
            }
        }
        static clearAllEffects() {
            Laya.timer.clearAll(this);
            if (this.explosions) {
                for (let i in this.explosions) {
                    this.explosions[i] && this.explosions[i].destroy(true);
                }
                this.explosions = new Array();
            }
            if (this.coins) {
                for (let i in this.coins) {
                    this.coins[i] && this.coins[i].destroy(true);
                }
                this.coins = new Array();
            }
            if (this.smashs) {
                for (let i in this.smashs) {
                    this.smashs[i] && this.smashs[i].destroy(true);
                }
                this.smashs = new Array();
            }
            if (this.getHitEffects) {
                for (let i in this.getHitEffects) {
                    this.getHitEffects[i] && this.getHitEffects[i].destroy(true);
                }
                this.getHitEffects = new Array();
            }
            if (this.bloodEffects) {
                for (let i in this.bloodEffects) {
                    this.bloodEffects[i] && this.bloodEffects[i].destroy(true);
                }
                this.bloodEffects = new Array();
            }
            if (this.speedUpEffects) {
                for (let i in this.speedUpEffects) {
                    this.speedUpEffects[i] && this.speedUpEffects[i].destroy(true);
                }
                this.speedUpEffects = new Array();
            }
            if (this.transforms) {
                for (let i in this.transforms) {
                    this.transforms[i] && this.transforms[i].destroy(true);
                }
                this.transforms = new Array();
            }
            if (this.infectEffects) {
                for (let i in this.infectEffects) {
                    this.infectEffects[i] && this.infectEffects[i].destroy(true);
                }
                this.infectEffects = new Array();
            }
            if (this.footprints) {
                for (let i in this.footprints) {
                    this.footprints[i] && this.footprints[i].destroy(true);
                }
            }
            if (this.wallBreakEffects) {
                for (let i in this.wallBreakEffects) {
                    this.wallBreakEffects[i] && this.wallBreakEffects[i].destroy(true);
                }
            }
        }
        static createExplosion(pos, origin) {
            if (this.parentNode) {
                let explosion = ModelFactory.createExplosion();
                this.parentNode.addChild(explosion);
                explosion.transform.localPosition = pos.clone();
                explosion.transform.localRotationEulerY = 360 * Math.random();
                if (!this.explosions) {
                    this.explosions = new Array();
                }
                this.explosions.push(explosion);
                Laya.timer.once(3000, this, () => {
                    if (explosion) {
                        explosion.destroy(true);
                        explosion = null;
                    }
                });
                if (!origin) {
                    AudioManager.playExplosion();
                    EffectUtils.vibrateLong();
                }
            }
        }
        static createCoinEffect(pos, origin) {
            if (this.parentNode) {
                let coinEffect = ModelFactory.createCoinEffect();
                this.parentNode.addChild(coinEffect);
                coinEffect.transform.localPosition = pos.clone();
                coinEffect.transform.localRotationEulerY = 360 * Math.random();
                Laya.timer.once(3000, this, () => {
                    if (coinEffect) {
                        coinEffect.destroy(true);
                        coinEffect = null;
                    }
                });
                if (!origin) {
                    AudioManager.playGetCoin();
                    EffectUtils.vibrateShort();
                }
            }
        }
        static createSmashCrash(pos, origin) {
            if (this.parentNode) {
                if (this.switchAge13) {
                }
                else {
                    let smash = ModelFactory.createSmashCrash();
                    this.parentNode.addChild(smash);
                    smash.transform.localPosition = pos.clone();
                    smash.transform.localRotationEulerY = 360 * Math.random();
                    for (let i = 0; i < 4; i++) {
                        let child = smash.getChildAt(i);
                        child.meshRenderer.material = this.selfMt;
                    }
                    let child_4 = smash.getChildAt(4);
                    child_4.particleRenderer.material.color = this.selfMt.color0.clone();
                    if (!this.smashs) {
                        this.smashs = new Array();
                    }
                    this.smashs.push(smash);
                    Laya.timer.once(3000, this, () => {
                        if (smash) {
                            smash.destroy(true);
                            smash = null;
                        }
                    });
                }
                if (!origin) {
                    AudioManager.playHit();
                    EffectUtils.vibrateShort();
                }
            }
        }
        static createGetHitEffect(pos, origin) {
            if (this.parentNode) {
                let getHitEffect = ModelFactory.createGetHitEffect();
                this.parentNode.addChild(getHitEffect);
                getHitEffect.transform.localPosition = new Laya.Vector3(pos.x - 0.1, pos.y, pos.z);
                getHitEffect.transform.localRotationEulerY = 360 * Math.random();
                if (!this.getHitEffects) {
                    this.getHitEffects = new Array();
                }
                this.getHitEffects.push(getHitEffect);
                Laya.timer.once(3000, this, () => {
                    if (getHitEffect) {
                        getHitEffect.destroy(true);
                        getHitEffect = null;
                    }
                });
                if (!origin) {
                    AudioManager.playPunch();
                    EffectUtils.vibrateShort();
                }
            }
        }
        static createBloodEffect(pos, scale, isBoss) {
            if (this.parentNode) {
                if (this.switchAge13) {
                }
                else {
                    let blood;
                    if (isBoss) {
                        blood = ModelFactory.createBloodEffect(Globals.bossColorUsingIndex);
                    }
                    else {
                        blood = ModelFactory.createBloodEffect(Globals.colorUsingIndex);
                    }
                    this.parentNode.addChild(blood);
                    blood.transform.localPosition = pos.clone();
                    blood.transform.localRotationEulerY = 360 * Math.random();
                    if (scale) {
                        blood.transform.localScale = scale.clone();
                    }
                    if (!this.bloodEffects) {
                        this.bloodEffects = new Array();
                    }
                    this.bloodEffects.push(blood);
                    Laya.timer.once(3000, this, () => {
                        if (blood) {
                            blood.destroy(true);
                            blood = null;
                        }
                    });
                }
            }
        }
        static createAccecerateEffect(parent, origin) {
            let speedUp = ModelFactory.createAccelerateEffect();
            parent.addChild(speedUp);
            if (origin) {
                speedUp.transform.localPosition = new Laya.Vector3(0, 0, 400);
                speedUp.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            }
            else {
                speedUp.transform.localPosition = Vector3Utils.ORIGIN.clone();
                speedUp.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            }
            if (!this.speedUpEffects) {
                this.speedUpEffects = new Array();
            }
            this.speedUpEffects.push(speedUp);
            Laya.timer.once(3000, this, () => {
                if (speedUp) {
                    speedUp.destroy(true);
                    speedUp = null;
                }
            });
            if (!origin) {
                AudioManager.playSpeedUp();
                EffectUtils.vibrateShort();
            }
        }
        static createTransformEffect(pos, scale, origin) {
            if (this.parentNode) {
                let transformEffect = ModelFactory.createTransformEffect();
                this.parentNode.addChild(transformEffect);
                transformEffect.transform.localPosition = new Laya.Vector3(pos.x, 0, pos.z + 0.5);
                transformEffect.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                transformEffect.transform.localScale = new Laya.Vector3(scale * 2, scale * 2, scale * 2);
                if (!this.transforms) {
                    this.transforms = new Array();
                }
                this.transforms.push(transformEffect);
                Laya.timer.once(2000, this, () => {
                    if (transformEffect) {
                        transformEffect.destroy(true);
                        transformEffect = null;
                    }
                });
                if (!origin) {
                    AudioManager.playSmokeAtFinal();
                    EffectUtils.vibrateShort();
                }
            }
        }
        static createInfectEffect(parent, origin) {
            let infectEffect = ModelFactory.createInfectEffect();
            parent.addChild(infectEffect);
            if (origin) {
                infectEffect.transform.localPosition = new Laya.Vector3(0, 0, 400);
                infectEffect.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            }
            else {
                infectEffect.transform.localPosition = Vector3Utils.ORIGIN.clone();
                infectEffect.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            }
            if (!this.infectEffects) {
                this.infectEffects = new Array();
            }
            this.infectEffects.push(infectEffect);
            Laya.timer.once(2000, this, () => {
                if (infectEffect) {
                    infectEffect.destroy(true);
                    infectEffect = null;
                }
            });
            if (!origin) {
                AudioManager.playInfect();
                EffectUtils.vibrateShort();
            }
        }
        static createFootprint(pos) {
            if (this.parentNode) {
                let footprint = PoolManager.getItem(SelfGameConfig.NAME_NODE_FOOTPRINT_PREFAB);
                if (!footprint) {
                    footprint = ModelFactory.createFootprint();
                    if (!this.footprints) {
                        this.footprints = new Array();
                    }
                    this.footprints.push(footprint);
                }
                this.parentNode.addChild(footprint);
                footprint.transform.localPosition = new Laya.Vector3(pos.x, pos.y + 0.05, pos.z);
                footprint.transform.localRotationEulerY = 360 * Math.random();
                footprint.meshRenderer.material = this.selfMt;
                Laya.timer.once(1000, this, () => {
                    if (footprint) {
                        PoolManager.recover(SelfGameConfig.NAME_NODE_FOOTPRINT_PREFAB, footprint);
                    }
                });
            }
        }
        static createCutEffect(pos, scale, type, origin) {
            if (this.parentNode) {
                if (this.switchAge13) {
                }
                else {
                    let effect;
                    switch (type) {
                        case 0: {
                            effect = ModelFactory.createCutAxisXY();
                            break;
                        }
                        case 1: {
                            effect = ModelFactory.createCutAxisYZ();
                            break;
                        }
                        case 2: {
                            effect = ModelFactory.createCutAxisXZ();
                            break;
                        }
                    }
                    let child_1 = effect.getChildAt(2);
                    child_1.skinnedMeshRenderer.material = this.selfMt;
                    let child_2 = effect.getChildAt(3);
                    child_2.skinnedMeshRenderer.material = this.selfMt;
                    this.parentNode.addChild(effect);
                    effect.transform.localPosition = pos.clone();
                    effect.transform.localScale = scale.clone();
                    if (!this.cutEffects) {
                        this.cutEffects = new Array();
                    }
                    this.cutEffects.push(effect);
                    Laya.timer.once(3000, this, () => {
                        if (effect) {
                            effect.destroy(true);
                            effect = null;
                        }
                    });
                }
                if (!origin) {
                    AudioManager.playCut();
                    EffectUtils.vibrateShort();
                }
            }
        }
        static createWallBreakEffect(pos, origin) {
            if (this.parentNode) {
                let wallBreak = ModelFactory.createWallBreakEffect();
                this.parentNode.addChild(wallBreak);
                wallBreak.transform.localPosition = pos.clone();
                if (!this.wallBreakEffects) {
                    this.wallBreakEffects = new Array();
                }
                this.wallBreakEffects.push(wallBreak);
                Laya.timer.once(2000, this, () => {
                    if (wallBreak) {
                        wallBreak.destroy(true);
                        wallBreak = null;
                    }
                });
                if (!origin) {
                    AudioManager.playWallFall();
                }
            }
        }
    }
    EffectManager.MaterialType = {
        TYPE1: 0,
        TYPE2: 1,
        TYPE3: 2,
        TYPE4: 3,
        TYPE5: 4
    };
    EffectManager.switchAge13 = false;

    class RoleModelCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.skinIndex = 0;
            this.hatIndex = 0;
            this.roleType = 1;
        }
        setTriggerCallback(callback) {
            this.triggerCallback = callback;
        }
        refreshVisualStatus(skinIndex, hatIndex) {
            this.skinIndex = (skinIndex != undefined) ? skinIndex : SkinManager.getInstance().getIndexUsing();
            this.hatIndex = (hatIndex != undefined) ? hatIndex : HatManager.getInstance().getIndexUsing();
            if (this.inited) {
                this.checkChangeVisualStatus();
            }
        }
        setToShopRoleStatus() {
            this.roleType = 0;
        }
        getSkinIndex() {
            return this.skinIndex;
        }
        onTriggerEnter(other) {
            if (this.triggerCallback) {
                this.triggerCallback(other);
            }
        }
        onAwake() {
            this.nodeNeck = this.owner.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(1);
            this.nodeSpine = this.owner.getChildAt(1).getChildAt(0).getChildAt(2);
            this.nodeLeftForeArm = this.owner.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(0).getChildAt(0).getChildAt(0);
            this.nodeLeftLeg = this.owner.getChildAt(1).getChildAt(0).getChildAt(0).getChildAt(0);
            this.nodeRightLeg = this.owner.getChildAt(1).getChildAt(0).getChildAt(1).getChildAt(0);
            this.specialPant = this.owner.getChildAt(3);
            this.inited = true;
            this.checkChangeVisualStatus();
        }
        clearAttachments() {
            for (let i = 1; i < this.nodeNeck.numChildren; i++) {
                let child = this.nodeNeck.getChildAt(i);
                child && child.destroy(true);
            }
            for (let i = 3; i < this.nodeSpine.numChildren; i++) {
                let child = this.nodeSpine.getChildAt(i);
                child && child.destroy(true);
            }
            for (let i = 1; i < this.nodeLeftForeArm.numChildren; i++) {
                let child = this.nodeLeftForeArm.getChildAt(i);
                child && child.destroy(true);
            }
            for (let i = 1; i < this.nodeLeftLeg.numChildren; i++) {
                let child = this.nodeLeftLeg.getChildAt(i);
                child && child.destroy(true);
            }
            for (let i = 1; i < this.nodeRightLeg.numChildren; i++) {
                let child = this.nodeRightLeg.getChildAt(i);
                child && child.destroy(true);
            }
        }
        checkChangeVisualStatus() {
            this.clearAttachments();
            if (this.skinIndex > 0) {
                let skin = ModelFactory.getSkin(this.skinIndex, this.roleType);
                let hat = skin.getChildByName("hat");
                if (hat) {
                    let newHat = hat.clone();
                    this.nodeNeck.addChild(newHat);
                    newHat.transform.localPosition = new Laya.Vector3(0, 0.213, 0);
                    newHat.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                }
                let body = skin.getChildByName("body");
                if (body) {
                    let newBody = body.clone();
                    this.nodeSpine.addChild(newBody);
                    newBody.transform.localPosition = Vector3Utils.ORIGIN.clone();
                    newBody.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                }
                let leftHand = skin.getChildByName("left_hand");
                if (leftHand) {
                    let newLeftHand = leftHand.clone();
                    this.nodeLeftForeArm.addChild(newLeftHand);
                    newLeftHand.transform.localPosition = Vector3Utils.ORIGIN.clone();
                    newLeftHand.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                }
                let shoes = skin.getChildByName("shoes");
                if (shoes) {
                    let newLeftShoe = shoes.getChildByName("left_foot").clone();
                    this.nodeLeftLeg.addChild(newLeftShoe);
                    newLeftShoe.transform.localPosition = Vector3Utils.ORIGIN.clone();
                    newLeftShoe.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                    let newRightShoe = shoes.getChildByName("right_foot").clone();
                    this.nodeRightLeg.addChild(newRightShoe);
                    newRightShoe.transform.localPosition = Vector3Utils.ORIGIN.clone();
                    newRightShoe.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                }
            }
            else if (this.hatIndex > 0) {
                let hat = ModelFactory.createHat(this.hatIndex, this.roleType);
                this.nodeNeck.addChild(hat);
                hat.transform.localPosition = new Laya.Vector3(0, 0.213, 0);
                hat.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            }
            if (this.skinIndex == 7) {
                this.specialPant && (this.specialPant.active = true);
            }
            else {
                this.specialPant && (this.specialPant.active = false);
            }
        }
    }

    class OrthogonalSceneManager {
        static clearScenes() {
            this.clearResultScene();
            this.clearShopScene();
            this.clearLevelSkinScene();
            this.clearOnlineRoleScene();
            this.clearTrySkinScene();
        }
        static updateCamera(size, viewPort) {
            if (viewPort) {
                this.camera.viewport = viewPort;
            }
            else {
                if (SdkCenter.getInstannce().isSyyx() ||
                    SdkCenter.getInstannce().isQQ()) {
                    let scaleX = Laya.stage.clientScaleX;
                    let scaleY = Laya.stage.clientScaleY;
                    if (UserGD.isIphoneX) {
                        this.camera.viewport = new Laya.Viewport(0, 50 * scaleY, Laya.stage.width * scaleX, 1000 * scaleY);
                    }
                    else {
                        this.camera.viewport = new Laya.Viewport(0, 0, Laya.stage.width * scaleX, 1000 * scaleY);
                    }
                }
                else {
                    if (UserGD.isIphoneX) {
                        this.camera.viewport = new Laya.Viewport(0, 50, Laya.stage.width, 1000);
                    }
                    else {
                        this.camera.viewport = new Laya.Viewport(0, 0, Laya.stage.width, 1000);
                    }
                }
            }
            if (size) {
                this.camera.orthographicVerticalSize = size;
            }
            else {
                this.camera.orthographicVerticalSize = 2.3;
            }
        }
        static createScene() {
            this.scene3d = new Laya.Scene3D();
            this.scene3d.name = "OrthogonalScene";
            this.scene3d.ambientColor = new Laya.Vector3(0.6, 0.6, 0.6);
            this.scene3d.zOrder = SelfGameConfig.ZORDER_SCENE_3D_ABOVE_DIALOGS;
            this.camera = new Laya.Camera();
            this.camera.orthographic = true;
            this.camera.clearFlag = Laya.CameraClearFlags.DepthOnly;
            this.camera.nearPlane = 0.1;
            this.camera.farPlane = 150;
            this.camera.fieldOfView = 70;
            this.camera.transform.position = new Laya.Vector3(0, 0.6, 5);
            this.camera.transform.rotate(new Laya.Vector3(0, 0, 0));
            this.scene3d.addChild(this.camera);
            this.updateCamera();
            let directionLight = new Laya.DirectionLight();
            let demoLight = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_SHOP_LIGHT + ".lh");
            directionLight.name = "light";
            directionLight.transform.localRotation = demoLight.transform.localRotation.clone();
            directionLight.intensity = demoLight.intensity;
            this.scene3d.addChild(directionLight);
            Laya.stage.addChild(this.scene3d);
        }
        static initScene3d() {
            this.clearScenes();
            if (!this.scene3d) {
                this.createScene();
            }
            this.scene3d.active = true;
        }
        static initResultScene() {
            this.initScene3d();
            this.updateCamera(5);
            this.resultRoot = new Laya.Sprite3D;
            this.scene3d.addChild(this.resultRoot);
            this.resultRoot.transform.localPosition = Vector3Utils.ORIGIN.clone();
            this.resultRoot.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            let fireworks = ModelFactory.createFireworks();
            this.resultRoot.addChild(fireworks);
            fireworks.transform.localPosition = Vector3Utils.ORIGIN.clone();
            fireworks.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
        }
        static clearResultScene() {
            this.scene3d && (this.scene3d.active = false);
            this.resultRoot && this.resultRoot.destroy(true);
            this.resultRoot = null;
        }
        static initShopScene() {
            this.initScene3d();
            this.updateCamera();
            this.shopRole = ModelFactory.createRoleModel(true);
            this.shopRoleAnim = this.shopRole.getComponent(Laya.Animator);
            let rand = Utils.nextInt(1, 2);
            AnimatorUtils.getScriptAndSetCallbacks(this.shopRoleAnim, "Hello", null, null, () => {
                OrthogonalSceneManager.shopRoleAnim.crossFade("Dance_" + rand, 0.1);
            });
            this.shopRoleCtrl = this.shopRole.addComponent(RoleModelCtrl);
            this.shopRoleCtrl.setToShopRoleStatus();
            this.shopRoleCtrl.refreshVisualStatus();
            let skinModel = this.shopRole.getChildAt(2);
            EffectManager.changeShopMatColor(Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE4);
            this.scene3d.addChild(this.shopRole);
            this.shopRole.transform.localPosition = new Laya.Vector3(0, (UserGD.isIphoneX ? 0.8 : 0.7), 0);
            this.shopRole.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
        }
        static refreshShopRole(skinIndex, hatIndex) {
            if (this.shopRoleCtrl) {
                this.shopRoleCtrl.refreshVisualStatus(skinIndex, hatIndex);
                if (skinIndex != undefined && skinIndex > 0) {
                    EffectManager.changeShopMatColor(Globals.roleColorConfig[SkinManager.getInstance().config[skinIndex].colorIndex].fresnelColor.clone(), Globals.roleColorConfig[SkinManager.getInstance().config[skinIndex].colorIndex].mainColor.clone());
                }
                this.shopRoleAnim.play("Hello");
            }
        }
        static clearShopScene() {
            this.scene3d && (this.scene3d.active = false);
            this.shopRoleAnim = null;
            this.shopRoleCtrl = null;
            this.shopRole && this.shopRole.destroy(true);
            this.shopRole = null;
        }
        static initLevelSkinScene() {
            this.initScene3d();
            this.updateCamera();
            this.levelRole = ModelFactory.createRoleModel(true);
            this.levelRoleAnim = this.levelRole.getComponent(Laya.Animator);
            let rand = Utils.nextInt(1, 2);
            AnimatorUtils.getScriptAndSetCallbacks(this.levelRoleAnim, "Hello", null, null, () => {
                OrthogonalSceneManager.levelRoleAnim.crossFade("Dance_" + rand, 0.1);
            });
            this.levelRoleCtrl = this.levelRole.addComponent(RoleModelCtrl);
            this.levelRoleCtrl.setToShopRoleStatus();
            this.levelRoleCtrl.refreshVisualStatus(SkinManager.getInstance().progress.indexLevelUnlocking, 0);
            let skinModel = this.levelRole.getChildAt(2);
            let colorIndex = SkinManager.getInstance().config[SkinManager.getInstance().progress.indexLevelUnlocking].colorIndex;
            EffectManager.changeShopMatColor(Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE4);
            this.scene3d.addChild(this.levelRole);
            this.levelRole.transform.localPosition = new Laya.Vector3(0, 0.1, 0);
            this.levelRole.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
        }
        static clearLevelSkinScene() {
            this.scene3d && (this.scene3d.active = false);
            this.levelRoleAnim = null;
            this.levelRoleCtrl = null;
            this.levelRole && this.levelRole.destroy(true);
            this.levelRole = null;
        }
        static initOnlineRoleScene() {
            this.initScene3d();
            this.updateCamera();
            this.onlineRole = ModelFactory.createRoleModel(true);
            this.onlineRoleAnim = this.onlineRole.getComponent(Laya.Animator);
            let rand = Utils.nextInt(1, 2);
            AnimatorUtils.getScriptAndSetCallbacks(this.onlineRoleAnim, "Hello", null, null, () => {
                OrthogonalSceneManager.onlineRoleAnim.crossFade("Dance_" + rand, 0.1);
            });
            this.onlineRoleCtrl = this.onlineRole.addComponent(RoleModelCtrl);
            this.onlineRoleCtrl.setToShopRoleStatus();
            if (Globals.skinOnlineUnlockStatus.skinIndex > 0) {
                this.onlineRoleCtrl.refreshVisualStatus(Globals.skinOnlineUnlockStatus.skinIndex, 0);
            }
            else {
                this.onlineRoleCtrl.refreshVisualStatus(0, Globals.skinOnlineUnlockStatus.hatIndex);
            }
            let skinModel = this.onlineRole.getChildAt(2);
            let colorIndex = SkinManager.getInstance()
                .config[(Globals.skinOnlineUnlockStatus.skinIndex > 0) ? Globals.skinOnlineUnlockStatus.skinIndex : SkinManager.getInstance().getIndexUsing()]
                .colorIndex;
            EffectManager.changeShopMatColor(Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE4);
            this.scene3d.addChild(this.onlineRole);
            this.onlineRole.transform.localPosition = new Laya.Vector3(0, 0.1, 0);
            this.onlineRole.transform.localRotationEuler = new Laya.Vector3(0, 0, 0);
        }
        static clearOnlineRoleScene() {
            this.scene3d && (this.scene3d.active = false);
            this.onlineRoleAnim = null;
            this.onlineRoleCtrl = null;
            this.onlineRole && this.onlineRole.destroy(true);
            this.onlineRole = null;
        }
        static initTrySkinScene() {
            this.initScene3d();
            this.updateCamera(UserGD.isIphoneX ? 3 : 3.3, null);
            this.trySkinRoot = new Laya.Sprite3D();
            this.scene3d.addChild(this.trySkinRoot);
            this.trySkinRoot.transform.localPosition = Vector3Utils.ORIGIN.clone();
            this.trySkinRoot.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            let roleModel = ModelFactory.createRoleModel(true);
            this.trySkinRoleQueue = new Array();
            let rand = Utils.nextInt(1, 2);
            for (let i = 0; i < 3; i++) {
                let role = roleModel.clone();
                let animator = role.getComponent(Laya.Animator);
                AnimatorUtils.getScriptAndSetCallbacks(animator, "Hello", null, null, () => {
                    animator.crossFade("Dance_" + rand, 0.1);
                });
                let roleSkinScript = role.addComponent(RoleModelCtrl);
                roleSkinScript.setToShopRoleStatus();
                let skinModel = role.getChildAt(2);
                let colorIndex = SkinManager.getInstance()
                    .config[SkinManager.getInstance().getIndexUsing()]
                    .colorIndex;
                EffectManager.changeTrySkinMtColor(i, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
                EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE5, i);
                this.trySkinRoot.addChild(role);
                this.trySkinRoleQueue.push({
                    model: role,
                    animator: animator,
                    roleSkinScript: roleSkinScript
                });
            }
            let animator = roleModel.getComponent(Laya.Animator);
            AnimatorUtils.getScriptAndSetCallbacks(animator, "Hello", null, null, () => {
                animator.crossFade("Dance_" + rand, 0.1);
            });
            let roleSkinScript = roleModel.addComponent(RoleModelCtrl);
            roleSkinScript.setToShopRoleStatus();
            let skinModel = roleModel.getChildAt(2);
            let colorIndex = SkinManager.getInstance()
                .config[SkinManager.getInstance().getIndexUsing()]
                .colorIndex;
            EffectManager.changeTrySkinMtColor(3, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE5, 3);
            this.trySkinRoot.addChild(roleModel);
            this.trySkinRoleTheFreeMan = {
                model: roleModel,
                animator: animator,
                roleSkinScript: roleSkinScript
            };
        }
        static clearTrySkinScene() {
            this.scene3d && (this.scene3d.active = false);
            if (this.trySkinRoleQueue) {
                for (let i in this.trySkinRoleQueue) {
                    Laya.Tween.clearAll(this.trySkinRoleQueue[i].model.transform);
                    this.trySkinRoleQueue[i].model.destroy(true);
                }
                this.trySkinRoleQueue = null;
            }
            if (this.trySkinRoleTheFreeMan) {
                Laya.Tween.clearAll(this.trySkinRoleTheFreeMan.model.transform);
                this.trySkinRoleTheFreeMan.model.destroy(true);
                this.trySkinRoleTheFreeMan = null;
            }
            if (this.trySkinRoot) {
                this.trySkinRoot.destroy(true);
                this.trySkinRoot = null;
            }
        }
        static rolesMoveLeft(hatIndexes) {
            let y = 0;
            let tempLet = this.trySkinRoleTheFreeMan;
            this.trySkinRoleTheFreeMan = this.trySkinRoleQueue[0];
            this.trySkinRoleQueue[0] = this.trySkinRoleQueue[1];
            this.trySkinRoleQueue[1] = this.trySkinRoleQueue[2];
            this.trySkinRoleQueue[2] = tempLet;
            EffectManager.replaceTrySkinMt(true);
            let transform0 = this.trySkinRoleTheFreeMan.model.transform;
            Laya.Tween.clearAll(transform0);
            transform0.localPosition = new Laya.Vector3(-0.6, y, 0);
            transform0.localRotationEulerY = -45;
            transform0.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            Laya.Tween.to(transform0, {
                localPositionX: -2
            }, 300);
            let transform1 = this.trySkinRoleQueue[0].model.transform;
            Laya.Tween.clearAll(transform1);
            transform1.localPosition = new Laya.Vector3(0, y, 0);
            transform1.localRotationEulerY = 0;
            transform1.localScale = new Laya.Vector3(1, 1, 1);
            Laya.Tween.to(transform1, {
                localRotationEulerY: -45,
                localPositionX: -0.6,
                localScaleX: 0.6,
                localScaleY: 0.6,
                localScaleZ: 0.6
            }, 300);
            let transform2 = this.trySkinRoleQueue[1].model.transform;
            Laya.Tween.clearAll(transform2);
            transform2.localPosition = new Laya.Vector3(0.6, y, 0);
            transform2.localRotationEulerY = 45;
            transform2.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            Laya.Tween.to(transform2, {
                localRotationEulerY: 0,
                localPositionX: 0,
                localScaleX: 1,
                localScaleY: 1,
                localScaleZ: 1
            }, 300);
            this.trySkinRoleQueue[0].animator.play("Idle");
            this.trySkinRoleQueue[2].animator.play("Idle");
            this.trySkinRoleQueue[1].animator.play("Hello");
            this.trySkinRoleQueue[2].roleSkinScript.refreshVisualStatus(hatIndexes[2][0], hatIndexes[2][1]);
            if (hatIndexes[2][0] > 0) {
                let colorIndex = SkinManager.getInstance()
                    .config[hatIndexes[2][0]]
                    .colorIndex;
                EffectManager.changeTrySkinMtColor(2, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            }
            else {
                EffectManager.changeTrySkinMtColor(2, Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            }
            let transform3 = this.trySkinRoleQueue[2].model.transform;
            Laya.Tween.clearAll(transform3);
            transform3.localPosition = new Laya.Vector3(2, y, 0);
            transform3.localRotationEulerY = 45;
            transform3.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            Laya.Tween.to(transform3, {
                localPositionX: 0.6
            }, 300);
        }
        static rolesMoveRight(hatIndexes) {
            let y = UserGD.isIphoneX ? -0.2 : 0;
            let tempLet = this.trySkinRoleTheFreeMan;
            this.trySkinRoleTheFreeMan = this.trySkinRoleQueue[2];
            this.trySkinRoleQueue[2] = this.trySkinRoleQueue[1];
            this.trySkinRoleQueue[1] = this.trySkinRoleQueue[0];
            this.trySkinRoleQueue[0] = tempLet;
            EffectManager.replaceTrySkinMt(false);
            let transform0 = this.trySkinRoleTheFreeMan.model.transform;
            Laya.Tween.clearAll(transform0);
            transform0.localPosition = new Laya.Vector3(0.6, y, 0);
            transform0.localRotationEulerY = 45;
            transform0.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            Laya.Tween.to(transform0, {
                localPositionX: 2
            }, 300);
            let transform1 = this.trySkinRoleQueue[2].model.transform;
            Laya.Tween.clearAll(transform1);
            transform1.localPosition = new Laya.Vector3(0, y, 0);
            transform1.localRotationEulerY = 0;
            transform1.localScale = new Laya.Vector3(1, 1, 1);
            Laya.Tween.to(transform1, {
                localRotationEulerY: 45,
                localPositionX: 0.6,
                localScaleX: 0.6,
                localScaleY: 0.6,
                localScaleZ: 0.6
            }, 300);
            let transform2 = this.trySkinRoleQueue[1].model.transform;
            Laya.Tween.clearAll(transform2);
            transform2.localPosition = new Laya.Vector3(-0.6, y, 0);
            transform2.localRotationEulerY = -45;
            transform2.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            Laya.Tween.to(transform2, {
                localRotationEulerY: 0,
                localPositionX: 0,
                localScaleX: 1,
                localScaleY: 1,
                localScaleZ: 1
            }, 300);
            this.trySkinRoleQueue[0].animator.play("Idle");
            this.trySkinRoleQueue[2].animator.play("Idle");
            this.trySkinRoleQueue[1].animator.play("Hello");
            this.trySkinRoleQueue[0].roleSkinScript.refreshVisualStatus(hatIndexes[0][0], hatIndexes[0][1]);
            if (hatIndexes[0][0] > 0) {
                let colorIndex = SkinManager.getInstance()
                    .config[hatIndexes[0][0]]
                    .colorIndex;
                EffectManager.changeTrySkinMtColor(0, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            }
            else {
                EffectManager.changeTrySkinMtColor(0, Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            }
            let transform3 = this.trySkinRoleQueue[0].model.transform;
            Laya.Tween.clearAll(transform3);
            transform3.localPosition = new Laya.Vector3(-2, y, 0);
            transform3.localRotationEulerY = -45;
            transform3.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            Laya.Tween.to(transform3, {
                localPositionX: -0.6
            }, 300);
        }
        static rolesRefresh(hatIndexes) {
            let y = UserGD.isIphoneX ? -0.2 : 0;
            this.trySkinRoleQueue[0].roleSkinScript.refreshVisualStatus(hatIndexes[0][0], hatIndexes[0][1]);
            this.trySkinRoleQueue[0].model.transform.localPosition = new Laya.Vector3(-0.6, y, 0);
            this.trySkinRoleQueue[0].model.transform.localRotationEulerY = -45;
            this.trySkinRoleQueue[0].model.transform.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            this.trySkinRoleQueue[0].animator.play("Idle");
            if (hatIndexes[0][0] > 0) {
                let colorIndex = SkinManager.getInstance()
                    .config[hatIndexes[0][0]]
                    .colorIndex;
                EffectManager.changeTrySkinMtColor(0, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            }
            else {
                EffectManager.changeTrySkinMtColor(0, Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            }
            this.trySkinRoleQueue[1].roleSkinScript.refreshVisualStatus(hatIndexes[1][0], hatIndexes[1][1]);
            this.trySkinRoleQueue[1].model.transform.localPosition = new Laya.Vector3(0, y, 0);
            this.trySkinRoleQueue[1].model.transform.localScale = new Laya.Vector3(1, 1, 1);
            this.trySkinRoleQueue[1].animator.play("Hello");
            if (hatIndexes[1][0] > 0) {
                let colorIndex = SkinManager.getInstance()
                    .config[hatIndexes[1][0]]
                    .colorIndex;
                EffectManager.changeTrySkinMtColor(1, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            }
            else {
                EffectManager.changeTrySkinMtColor(1, Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            }
            this.trySkinRoleQueue[2].roleSkinScript.refreshVisualStatus(hatIndexes[2][0], hatIndexes[2][1]);
            this.trySkinRoleQueue[2].model.transform.localPosition = new Laya.Vector3(0.6, y, 0);
            this.trySkinRoleQueue[2].model.transform.localRotationEulerY = 45;
            this.trySkinRoleQueue[2].model.transform.localScale = new Laya.Vector3(0.6, 0.6, 0.6);
            this.trySkinRoleQueue[2].animator.play("Idle");
            if (hatIndexes[2][0] > 0) {
                let colorIndex = SkinManager.getInstance()
                    .config[hatIndexes[2][0]]
                    .colorIndex;
                EffectManager.changeTrySkinMtColor(2, Globals.roleColorConfig[colorIndex].fresnelColor.clone(), Globals.roleColorConfig[colorIndex].mainColor.clone());
            }
            else {
                EffectManager.changeTrySkinMtColor(2, Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            }
            this.trySkinRoleTheFreeMan.model.transform.localPosition = new Laya.Vector3(3, y, 0);
        }
        static refreshTrySkinScene(hatIndexes, direction) {
            switch (direction) {
                case -1: {
                    this.rolesMoveLeft(hatIndexes);
                    break;
                }
                case 0: {
                    this.rolesRefresh(hatIndexes);
                    break;
                }
                case 1: {
                    this.rolesMoveRight(hatIndexes);
                    break;
                }
            }
        }
    }

    class ShopDialog extends ui.dialogs.ShopDialogUI {
        constructor(closeCallback) {
            super();
            this.selectedItemIndex = 0;
            this.menuIndexNow = 0;
            this.tempItemPrice = 10;
            this.name = SelfGameConfig.NAME_SHOP_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
            this.closeCallback = closeCallback;
        }
        onAwake() {
            this.initLayout();
            this.resetIndex();
            this.initView();
            this.initListener();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            this.boxBtnClose.top = Globals.boxCoin.top + 200 * UiUtils.getClientScale();
            if (UserGD.isIphoneX) {
                UiUtils.resetBottom(this.content);
            }
            else {
                UserGD.canShowBanner = false;
                SdkCenter.getInstannce().hideBanner();
                if (SdkCenter.getInstannce().isQQ()) {
                    this.boxUse.bottom += 30;
                    this.boxBuyOrTry.bottom += 30;
                    this.boxOtherCase.bottom += 30;
                    this.boxMainFrame.bottom += 30;
                }
            }
        }
        resetIndex() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.selectedItemIndex = tempManager.getInstance().getIndexUsing();
        }
        resetBtnMenu(btn, selected) {
            let bg = btn.getChildByName("bg");
            bg.skin = selected ? "game/shop_dialog/img_menu_select_true.png" : "game/shop_dialog/img_menu_select_false.png";
        }
        initBoxMenu() {
            this.resetBtnMenu(this.boxMenuHat, (this.menuIndexNow == 1));
            this.resetBtnMenu(this.boxMenuSkin, (this.menuIndexNow == 0));
        }
        resetBoxUse() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.boxBtnUsing.visible = (this.selectedItemIndex == tempManager.getInstance().getIndexUsing());
            this.boxBtnUse.visible = !(this.selectedItemIndex == tempManager.getInstance().getIndexUsing());
        }
        initBoxBtnBuy() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.imgTempItem.visible = this.isTempBuyItem();
            if (this.isTempBuyItem()) {
                this.lbBtnBuy.text = "" + this.tempItemPrice;
            }
            else {
                this.lbBtnBuy.text = "" + tempManager.CURRENCY_NEED;
            }
        }
        initBoxBtnVideo() {
            this.boxBtnVideoTry.visible = !this.isTempBuyItem();
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.lbCountBtnVideoTry.text = "(" + tempManager.getInstance().getTryOnProgress(this.selectedItemIndex) + "/" + tempManager.TRY_ON_TIMES_NEED + ")";
            if ((SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ()) && !UserGD.isOfficial) {
                this.boxBubbleVideoTry.visible = true;
            }
            else {
                this.boxBubbleVideoTry.visible = false;
            }
            if (SdkCenter.getInstannce().isTT()) {
                this.icBtnVideoTry.skin = "game/ic_video.png";
                this.icBtnVideoTry.top = NaN;
                this.icBtnVideoTry.centerY = -10;
                this.icBtnVideoTry.left = 15;
                this.lbBtnVideoTry.centerX = 35;
                this.lbCountBtnVideoTry.centerX = 35;
            }
            else if (SdkCenter.getInstannce().isSyyx()) {
                this.icBtnVideoTry.skin = "game/ic_video3.png";
            }
            else {
                this.icBtnVideoTry.skin = "game/ic_video2.png";
            }
            if ((SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ())
                && UserGD.isOfficial
                && (UserGD.showExtension || UserGD.sceneSwitch)
                && UserGD.videoMarkSwitch) {
                this.icBtnVideoTry.visible = false;
            }
            else {
                this.icBtnVideoTry.visible = true;
            }
        }
        tryOn() {
            UiUtils.showLayaToast("Use Success");
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            tempManager.getInstance().tryOn(this.selectedItemIndex);
            this.listMainFrame.refresh();
            this.initBottomBoxes();
        }
        navAdTry(item) {
            let self = this;
            SdkCenter.getInstannce().navigateToMiniProgram(item, () => {
                UserGD.strToastOnShow = "Success";
                self.tryOn();
                UserGD.toastOnShow = true;
            }, () => {
                UiUtils.showLayaToast("Cancle");
            });
        }
        initBoxBtnNavTry() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.lbCountBtnNavTry.text = "(" + tempManager.getInstance().getTryOnProgress(this.selectedItemIndex) + "/" + tempManager.TRY_ON_TIMES_NEED + ")";
            let randomItem = UserGD.navAdNotJumpedArray[Math.floor(Math.random() * UserGD.navAdNotJumpedArray.length)];
            let self = this;
            UiUtils.clearFrameAnimProcess(this.imgBtnNavTry);
            UiUtils.checkFrameAnimProcess(this.imgBtnNavTry, randomItem);
            PulCenter.clickEvent(this.boxBtnNavTry, this, () => {
                self.navAdTry(randomItem);
            }, null);
        }
        resetBoxBuyOrTry() {
            this.initBoxBtnBuy();
            this.initBoxBtnVideo();
            if (SdkCenter.getInstannce().isWx() && UserGD.openUnionAd && UserGD.navAdNotJumpedArray.length > 0) {
                this.initBoxBtnNavTry();
            }
            else {
                this.boxBtnNavTry.visible = false;
                this.boxBtnVideoTry.centerX = 0;
            }
        }
        resetBoxOtherCase() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.boxBtnLevelUnlock.visible = false;
            this.boxBtnKeyOpen.visible = false;
            this.boxBtnOnlineUnlock.visible = false;
            if (tempManager.getInstance().config[this.selectedItemIndex].levelUnlock) {
                this.boxBtnLevelUnlock.visible = true;
            }
            else if (tempManager.getInstance().config[this.selectedItemIndex].keyOpenUnlock) {
                this.boxBtnKeyOpen.visible = true;
            }
            else {
                this.boxBtnOnlineUnlock.visible = true;
            }
        }
        initBottomBoxes() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.boxUse.visible = false;
            this.boxBuyOrTry.visible = false;
            this.boxOtherCase.visible = false;
            if (tempManager.getInstance().getIndexUsing() == this.selectedItemIndex ||
                tempManager.getInstance().progress.unlockStatus[this.selectedItemIndex]) {
                this.boxUse.visible = true;
                this.resetBoxUse();
            }
            else if (tempManager.getInstance().config[this.selectedItemIndex].tryOnUnlock) {
                this.boxBuyOrTry.visible = true;
                this.resetBoxBuyOrTry();
            }
            else {
                this.boxOtherCase.visible = true;
                this.resetBoxOtherCase();
            }
        }
        isTempBuyItem() {
            return (SdkCenter.getInstannce().isQQ() || SdkCenter.getInstannce().isSyyx())
                && UserGD.isNewPlayer && !SkinManager.getInstance().progress.unlockStatus[13] && this.menuIndexNow == 1 && this.selectedItemIndex == 13;
        }
        checkBoxTempBuyVisible() {
            if ((SdkCenter.getInstannce().isQQ() || SdkCenter.getInstannce().isSyyx())
                && UserGD.isNewPlayer && !HatManager.getInstance().progress.unlockStatus[13]) {
                if (this.menuIndexNow == 1 && this.selectedItemIndex == 13) {
                    this.boxTempBuy.visible = false;
                }
                else {
                    this.boxTempBuy.visible = true;
                }
            }
            else {
                this.boxTempBuy.visible = false;
            }
        }
        switchToTempItem() {
            this.changeToMenu(1);
            this.selecItem(13);
            let surplus = this.selectedItemIndex % 3;
            let startIndex = this.selectedItemIndex + (2 - surplus) - 8;
            if (startIndex < 0) {
                startIndex = 0;
            }
            this.listMainFrame.tweenTo(startIndex);
        }
        shake() {
            UiUtils.rotateNodeInter(this.boxTempBuy);
        }
        stopLoopShake() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            this.rotation = 0;
            this.scale(1, 1, true);
        }
        loopShake() {
            this.stopLoopShake();
            let self = this;
            this.shake();
            Laya.timer.once(1000, this, () => {
                self.shake();
            });
            Laya.timer.once(2000, this, () => {
                self.shake();
            });
            Laya.timer.once(3000, this, () => {
                self.shake();
            });
            Laya.timer.loop(10000, this, () => {
                self.shake();
                Laya.timer.once(1000, self, () => {
                    self.shake();
                });
                Laya.timer.once(2000, self, () => {
                    self.shake();
                });
                Laya.timer.once(3000, self, () => {
                    self.shake();
                });
            });
        }
        initBoxTempBuy() {
            if ((SdkCenter.getInstannce().isQQ() || SdkCenter.getInstannce().isSyyx())
                && UserGD.isNewPlayer && !HatManager.getInstance().progress.unlockStatus[13]) {
                PulCenter.clickEvent(this.boxTempBuy, this, this.switchToTempItem, null);
                this.loopShake();
            }
            else {
                this.boxTempBuy.visible = false;
            }
        }
        setItem() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            tempManager.getInstance().change(this.selectedItemIndex);
            this.listMainFrame.refresh();
            this.initBottomBoxes();
        }
        selecItem(index) {
            if (index == this.selectedItemIndex) {
                return;
            }
            this.selectedItemIndex = index;
            OrthogonalSceneManager.refreshShopRole((this.menuIndexNow == 0) ? index : 0, (this.menuIndexNow == 0) ? 0 : index);
            this.listMainFrame.refresh();
            this.initBottomBoxes();
            this.checkBoxTempBuyVisible();
        }
        refreshItem(cell, index) {
            let data = cell.dataSource;
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            let bg = cell.getChildByName("bg");
            let img = cell.getChildByName("img");
            let skinPrefix = (this.menuIndexNow == 0) ? "game/skins/skin_" : "game/hats/hat_";
            if (tempManager.getInstance().progress.unlockStatus[data.id] || tempManager.getInstance().getIndexUsing() == data.id) {
                img.skin = skinPrefix + data.id + ".png";
            }
            else {
                img.skin = skinPrefix + data.id + "_m.png";
            }
            if (data.id == this.selectedItemIndex) {
                bg.skin = "game/shop_dialog/img_item_select_true.png";
            }
            else {
                bg.skin = "game/shop_dialog/img_item_select_false.png";
            }
            let self = this;
            PulCenter.clickEvent(cell, this, () => {
                self.selecItem(data.id);
            }, null);
        }
        refreshList() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            this.listMainFrame.array = JSON.parse(JSON.stringify(tempManager.getInstance().config));
            this.listMainFrame.refresh();
            let surplus = this.selectedItemIndex % 3;
            let startIndex = this.selectedItemIndex + (2 - surplus) - 8;
            if (startIndex < 0) {
                startIndex = 0;
            }
            this.listMainFrame.tweenTo(startIndex);
        }
        initView() {
            this.initBoxMenu();
            this.initBottomBoxes();
            this.initBoxTempBuy();
            this.listMainFrame.vScrollBarSkin = "";
            this.listMainFrame.renderHandler = Laya.Handler.create(this, this.refreshItem, null, false);
            this.refreshList();
            OrthogonalSceneManager.initShopScene();
            if (SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.isIphoneX) {
                    SdkCenter.getInstannce().showBanner();
                }
                else {
                    SdkCenter.getInstannce().hideBanner();
                }
            }
            SdkCenter.getInstannce().showBanner();
            SdkCenter.getInstannce().showBlockAd("sd");
        }
        changeToMenu(index) {
            this.menuIndexNow = index;
            this.resetIndex();
            this.initBoxMenu();
            this.initBottomBoxes();
            this.refreshList();
        }
        buyItem() {
            let tempManager = (this.menuIndexNow == 0) ? SkinManager : HatManager;
            let currencyNeed = this.isTempBuyItem() ? this.tempItemPrice : tempManager.CURRENCY_NEED;
            if (DataManager.getCoinNum() >= currencyNeed) {
                DataManager.changeCoinNum(-currencyNeed);
                Globals.boxCoin.refreshView();
                Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_SKILL_BTN, true);
                tempManager.getInstance().unlock(this.selectedItemIndex, true);
                UiUtils.showLayaToast("Buy Success");
                this.listMainFrame.refresh();
                this.initBottomBoxes();
            }
            else {
                UiUtils.showLayaToast("Not Enought Coin");
            }
        }
        videoTry() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "sdtl" : null, () => {
                self.tryOn();
            }, () => {
                UiUtils.showLayaToast("No Video");
            }, () => {
                UiUtils.showLayaToast("Not Finish");
            });
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.boxBtnClose, this, () => {
                self.eventClose();
            }, null);
            PulCenter.clickEvent(this.boxMenuHat, this, () => {
                self.changeToMenu(1);
            }, null);
            PulCenter.clickEvent(this.boxMenuSkin, this, () => {
                self.changeToMenu(0);
            }, null);
            PulCenter.clickEvent(this.boxBtnArrowLeft, this, () => {
                let index = self.menuIndexNow;
                if (--index < 0) {
                    index = 1;
                }
                self.changeToMenu(index);
            }, null);
            PulCenter.clickEvent(this.boxBtnArrowRight, this, () => {
                let index = self.menuIndexNow;
                if (++index > 1) {
                    index = 0;
                }
                self.changeToMenu(index);
            }, null);
            PulCenter.clickEvent(this.boxBtnLevelUnlock, this, () => {
                UiUtils.showLayaToast("Level Get");
            }, null);
            PulCenter.clickEvent(this.boxBtnKeyOpen, this, () => {
                UiUtils.showLayaToast("Box Unlock");
            }, null);
            PulCenter.clickEvent(this.boxBtnOnlineUnlock, this, () => {
                UiUtils.showLayaToast("Online Get");
            }, null);
            PulCenter.clickEvent(this.boxBtnBuy, this, () => {
                self.buyItem();
            }, null);
            PulCenter.clickEvent(this.boxBtnVideoTry, this, () => {
                self.videoTry();
            }, null);
            PulCenter.clickEvent(this.boxBtnUse, this, () => {
                self.setItem();
            }, null);
            PulCenter.clickEvent(this.boxBtnUsing, this, () => {
                UiUtils.showLayaToast("Useing");
            }, null);
        }
        initEventHandler() {
        }
        eventClose() {
            OrthogonalSceneManager.clearShopScene();
            this.onDisable();
            SdkCenter.getInstannce().hideBlockAd("sd");
            this.removeSelf();
            this.closeCallback && this.closeCallback();
            PulCenter.checkCanShowBanner();
        }
    }

    class TrySkinDialog extends ui.dialogs.TrySkinDialogUI {
        constructor(skinArray, hatArray, closeCallback) {
            super();
            this.selectedSkinArrayIndex = -1;
            this.selectedHatArrayIndex = -1;
            this.scaleCount = 0;
            this.checkBoxText = [
                "Free Use",
                "No Need Use"
            ];
            this.lbBtnSelectResultText = [
                "USE",
                "NOT Now"
            ];
            this.skipForceVideo = false;
            this.name = SelfGameConfig.NAME_TRY_SKIN_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
            this.skinArray = skinArray;
            this.hatArray = hatArray;
            ++UserGD.openTrySkinDialogCount;
            if (closeCallback) {
                this.closeCallback = closeCallback;
            }
        }
        onAwake() {
            this.initLayout();
            this.initData();
            this.initView();
            this.initListener();
            this.initEventHandler();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            this.boxBtnClose.top = Globals.boxCoin.top + 200 * UiUtils.getClientScale();
            if (SdkCenter.getInstannce().isWx()) {
                this.boxBtnAlpha.centerX = -170;
                this.boxBtnBeta.centerX = 170;
            }
            else if (SdkCenter.getInstannce().isTT()) {
                this.boxBtnAlpha.centerX = 170;
                this.boxBtnBeta.centerX = -170;
            }
            else {
                this.boxBtnAlpha.centerX = -170;
                this.boxBtnBeta.centerX = 170;
            }
        }
        initData() {
            let rand1;
            if (this.skinArray.length == 0) {
                rand1 = 2;
            }
            else if (this.hatArray.length == 0) {
                rand1 = 1;
            }
            else {
                rand1 = Utils.nextInt(1, 2);
            }
            if (rand1 == 1) {
                this.selectedSkinArrayIndex = Math.floor(Math.random() * this.skinArray.length);
            }
            else {
                this.selectedHatArrayIndex = Math.floor(Math.random() * this.hatArray.length);
            }
            this.checkBoxSelected = true;
        }
        refreshSkin(direction) {
            let preOne;
            let nextOne;
            if (this.selectedHatArrayIndex < 0) {
                preOne = [this.selectedSkinArrayIndex - 1, -1];
                if (preOne[0] < 0) {
                    if (this.hatArray.length > 0) {
                        preOne[1] = this.hatArray.length - 1;
                    }
                    else {
                        preOne[0] = this.skinArray.length - 1;
                    }
                }
                nextOne = [this.selectedSkinArrayIndex + 1, -1];
                if (nextOne[0] == this.skinArray.length) {
                    if (this.hatArray.length > 0) {
                        nextOne[0] = -1;
                        nextOne[1] = 0;
                    }
                    else {
                        nextOne[0] = 0;
                    }
                }
            }
            else {
                preOne = [-1, this.selectedHatArrayIndex - 1];
                if (preOne[1] < 0) {
                    if (this.skinArray.length > 0) {
                        preOne[0] = this.skinArray.length - 1;
                    }
                    else {
                        preOne[1] = this.hatArray.length - 1;
                    }
                }
                nextOne = [-1, this.selectedHatArrayIndex + 1];
                if (nextOne[1] == this.hatArray.length) {
                    if (this.skinArray.length > 0) {
                        nextOne[1] = -1;
                        nextOne[0] = 0;
                    }
                    else {
                        nextOne[1] = 0;
                    }
                }
            }
            OrthogonalSceneManager.refreshTrySkinScene([
                [(preOne[0] < 0) ? -1 : this.skinArray[preOne[0]], (preOne[1] < 0) ? -1 : this.hatArray[preOne[1]]],
                [(this.selectedSkinArrayIndex < 0) ? -1 : this.skinArray[this.selectedSkinArrayIndex], (this.selectedHatArrayIndex < 0) ? -1 : this.hatArray[this.selectedHatArrayIndex]],
                [(nextOne[0] < 0) ? -1 : this.skinArray[nextOne[0]], (nextOne[1] < 0) ? -1 : this.hatArray[nextOne[1]]]
            ], direction);
        }
        initScene3d() {
            OrthogonalSceneManager.initTrySkinScene();
            this.refreshSkin(0);
            Laya.timer.loop(5000, this, this.nextSkin);
        }
        initBoxTips() {
            if (this.selectedHatArrayIndex < 0) {
                this.lbTimeProgress.text = "Use " + SkinManager.TRY_ON_TIMES_NEED +
                    " Can Get(" + SkinManager.getInstance().getTryOnProgress(this.skinArray[this.selectedSkinArrayIndex]) +
                    "/" + SkinManager.TRY_ON_TIMES_NEED + ")";
            }
            else {
                this.lbTimeProgress.text = "Use" + HatManager.TRY_ON_TIMES_NEED +
                    " Can Get(" + HatManager.getInstance().getTryOnProgress(this.hatArray[this.selectedHatArrayIndex]) +
                    "/" + HatManager.TRY_ON_TIMES_NEED + ")";
            }
        }
        refreshImgDot() {
            if (this.checkBoxSelected) {
                this.imgDotSelected.visible = true;
            }
            else {
                this.imgDotSelected.visible = false;
            }
        }
        initBoxCheckBox(wantWatchVideo) {
            this.wantWatchVideo = wantWatchVideo;
            if (wantWatchVideo) {
                this.lbSelectLabel.text = this.checkBoxText[0];
                this.lbBtnSelectResult.text = this.lbBtnSelectResultText[0];
            }
            else {
                this.lbSelectLabel.text = this.checkBoxText[1];
                this.lbBtnSelectResult.text = this.lbBtnSelectResultText[1];
            }
        }
        initBoxSelect() {
            this.refreshImgDot();
            if (SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openSkinVideo) {
                if (UserGD.isOfficial && UserGD.openShipin) {
                    if (UserGD.playCount % 4 == 0 || UserGD.playCount % 4 == 2) {
                        this.initBoxCheckBox(false);
                    }
                    else {
                        this.initBoxCheckBox(true);
                    }
                }
                else {
                    if (UserGD.playCount % 3 == 0) {
                        this.initBoxCheckBox(false);
                    }
                    else {
                        this.initBoxCheckBox(true);
                    }
                }
            }
            else if (SdkCenter.getInstannce().isTT()) {
                if (UserGD.isOfficial && UserGD.openShipin) {
                    if (UserGD.playCount % 4 == 0 || UserGD.playCount % 4 == 2) {
                        this.initBoxCheckBox(false);
                    }
                    else {
                        this.initBoxCheckBox(true);
                    }
                }
                else {
                    if (UserGD.playCount % 3 == 0) {
                        this.initBoxCheckBox(false);
                    }
                    else {
                        this.initBoxCheckBox(true);
                    }
                }
            }
            else if (SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openSkinVideo) {
                if (UserGD.isOfficial && UserGD.openShipin) {
                    if (UserGD.playCount % 4 == 0 || UserGD.playCount % 4 == 2) {
                        this.initBoxCheckBox(false);
                    }
                    else {
                        this.initBoxCheckBox(true);
                    }
                }
                else {
                    if (UserGD.playCount % 3 == 0) {
                        this.initBoxCheckBox(false);
                    }
                    else {
                        this.initBoxCheckBox(true);
                    }
                }
            }
            else {
                this.boxSelect.visible = false;
                this.lbBtnSelectResult.visible = false;
            }
        }
        eventClose() {
            this.onDisable();
            OrthogonalSceneManager.clearTrySkinScene();
            SdkCenter.getInstannce().hideInnerInterstitialNative();
            SdkCenter.getInstannce().hideGameBannerBox();
            this.removeSelf();
            this.closeCallback && this.closeCallback(this.skipForceVideo);
        }
        tryOn() {
            this.skipForceVideo = true;
            if (this.selectedHatArrayIndex < 0) {
                SkinManager.getInstance().tryOn(this.skinArray[this.selectedSkinArrayIndex]);
            }
            else {
                HatManager.getInstance().tryOn(this.hatArray[this.selectedHatArrayIndex]);
            }
            this.eventClose();
        }
        navTry(navAd) {
            let self = this;
            SdkCenter.getInstannce().navigateToMiniProgram(navAd, () => {
                UserGD.strToastOnShow = "Success";
                self.tryOn();
                UserGD.toastOnShow = true;
            }, () => {
                UiUtils.showLayaToast("Cancle");
                self.eventClose();
            });
        }
        eventShare(ac) {
            if (ac) {
                SdkCenter.getInstannce().shareAppMessage(null, null, "ac=" + ac);
            }
            else {
                SdkCenter.getInstannce().shareAppMessage(null, null, "ac=normal");
            }
        }
        videoTry() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "sy" : null, () => {
                UiUtils.showLayaToast("Start Use");
                self.tryOn();
            }, () => {
                UiUtils.showLayaToast("No Video");
                self.skipForceVideo = true;
                self.eventClose();
            }, () => {
                UiUtils.showLayaToast("Not Finish");
                self.skipForceVideo = true;
                self.eventClose();
            });
        }
        loopScaleBtns() {
            if (this.boxBtnAlpha.visible && (this.scaleCount % 4 == 0 || this.scaleCount % 4 == 1)) {
                UiUtils.scaleNode(this.boxBtnAlpha, 300, 1000, true);
            }
            else {
                UiUtils.scaleNode(this.boxBtnBeta, 300, 1000, true);
            }
        }
        initBoxBtns() {
            let self = this;
            if (SdkCenter.getInstannce().isWx()) {
                if (UserGD.openUnionAd && UserGD.navAdNotJumpedArray.length > 0) {
                    this.imgIcVideoTT.visible = false;
                    this.lbBtnAlpha.text = "USE";
                    let navAd = UserGD.navAdNotJumpedArray[Math.floor(Math.random() * UserGD.navAdNotJumpedArray.length)];
                    UiUtils.checkFrameAnimProcess(this.imgNav, navAd);
                    PulCenter.clickEvent(this.boxBtnAlpha, this, () => {
                        self.navTry(navAd);
                    }, null);
                }
                else {
                    this.boxBtnAlpha.visible = false;
                    this.boxBtnBeta.centerX = 0;
                }
                this.lbBtnBeta.text = "USE";
                if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch) {
                    this.imgIcVideo.visible = false;
                }
                else {
                    this.imgIcVideo.visible = true;
                }
                PulCenter.clickEvent(this.boxBtnBeta, this, () => {
                    self.videoTry();
                }, null);
                this.loopScaleBtns();
                Laya.timer.loop(3000, this, this.loopScaleBtns);
            }
            else if (SdkCenter.getInstannce().isTT()) {
                this.imgIcVideo.visible = false;
                this.lbBtnBeta.text = "NEXT";
                this.lbBtnAlpha.text = "USE";
                if (UserGD.openTrySkinDialogCount % 2 == 0) {
                    this.boxBtnAlpha.centerX = -170;
                    this.boxBtnBeta.centerX = 170;
                    UiUtils.scaleNode(this.boxBtnBeta);
                }
                else {
                    this.boxBtnAlpha.centerX = 170;
                    this.boxBtnBeta.centerX = -170;
                    UiUtils.scaleNode(this.boxBtnAlpha);
                }
                PulCenter.clickEvent(this.boxBtnAlpha, this, () => {
                    self.videoTry();
                }, null);
                PulCenter.clickEvent(this.boxBtnBeta, this, () => {
                    self.eventClose();
                }, null);
            }
            else if (SdkCenter.getInstannce().isSyyx()) {
                this.imgIcVideoTT.visible = false;
                let img = new Laya.Image("game/ic_video3.png");
                this.boxBtnAlpha.addChild(img);
                img.top = 0;
                img.right = 0;
                this.lbBtnAlpha.text = "USE";
                this.lbBtnAlpha.centerX = 0;
                this.boxBtnBeta.visible = false;
                this.boxBtnAlpha.centerX = 0;
                PulCenter.clickEvent(this.boxBtnAlpha, this, () => {
                    self.videoTry();
                }, null);
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                this.imgIcVideoTT.visible = false;
                this.boxBtnAlpha.visible = false;
                this.boxBtnBeta.centerX = 0;
                this.lbBtnBeta.text = "USE";
                if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch) {
                    this.imgIcVideo.visible = false;
                }
                else {
                    this.imgIcVideo.visible = true;
                }
                PulCenter.clickEvent(this.boxBtnBeta, this, () => {
                    self.videoTry();
                }, null);
            }
            else {
                this.imgIcVideoTT.visible = false;
                this.boxBtnAlpha.visible = false;
                this.boxBtnBeta.centerX = 0;
                this.lbBtnBeta.text = "USE";
                PulCenter.clickEvent(this.boxBtnBeta, this, () => {
                    self.videoTry();
                }, null);
            }
        }
        initBtnsWhileInnerInterstitalShow() {
            this.boxSyyxInner.scale(0.8, 0.8);
            this.btnWatchAd = new Laya.Label("查看广告");
            this.btnWatchAd.fontSize = 45;
            this.btnWatchAd.font = "SimHei";
            this.btnWatchAd.color = "#ffffff";
            this.btnWatchAd.underline = true;
            this.btnWatchAd.underlineColor = "#ffffff";
            this.btnWatchAd.anchorX = 0.5;
            this.btnWatchAd.anchorY = 0.5;
            this.addChild(this.btnWatchAd);
            this.btnWatchAd.bottom = 350 + 60;
            this.btnWatchAd.centerX = 0;
            PulCenter.clickEvent(this.btnWatchAd, this, () => {
                SdkCenter.getInstannce().clickNativeAd();
            }, null);
            this.boxTips.top = 20;
            this.boxBtnAlpha.bottom = 120;
        }
        hideBtnWatchAd() {
            if (this.btnWatchAd) {
                this.btnWatchAd.visible = false;
            }
        }
        initBottomSyyxAd() {
            if (SdkCenter.getInstannce().isSyyx()) {
                let self = this;
                if (SdkCenter.getInstannce().checkInnerInterstitialNative()) {
                    this.content.bottom = 350;
                    SdkCenter.getInstannce().hideBanner();
                    SdkCenter.getInstannce().showInnerInterstitialNative(this.boxSyyxInner, null, () => {
                        self.initBtnsWhileInnerInterstitalShow();
                    }, () => {
                        self.hideBtnWatchAd();
                    });
                }
                else {
                    this.content.bottom = 300;
                    if (SdkCenter.getInstannce().isSupportGamesModal()) {
                        SdkCenter.getInstannce().showGameBannerBox();
                    }
                    else {
                        SdkCenter.getInstannce().showBanner();
                    }
                }
            }
        }
        initBoxBottom() {
            this.initBoxTips();
            this.initBoxSelect();
            this.initBoxBtns();
            this.initBottomSyyxAd();
        }
        initView() {
            this.initScene3d();
            this.initBoxBottom();
        }
        clickBoxSelect() {
            this.wantWatchVideo = !this.wantWatchVideo;
            if (this.wantWatchVideo) {
                this.lbBtnSelectResult.text = this.lbBtnSelectResultText[0];
            }
            else {
                this.lbBtnSelectResult.text = this.lbBtnSelectResultText[1];
            }
            this.checkBoxSelected = !this.checkBoxSelected;
            this.refreshImgDot();
        }
        clickSelectResult() {
            if (this.wantWatchVideo) {
                this.videoTry();
            }
            else {
                this.eventClose();
            }
        }
        nextSkin() {
            if (this.selectedHatArrayIndex < 0) {
                if (++this.selectedSkinArrayIndex == this.skinArray.length) {
                    if (this.hatArray.length > 0) {
                        this.selectedSkinArrayIndex = -1;
                        this.selectedHatArrayIndex = 0;
                    }
                    else {
                        this.selectedSkinArrayIndex = 0;
                    }
                }
            }
            else {
                if (++this.selectedHatArrayIndex == this.hatArray.length) {
                    if (this.skinArray.length > 0) {
                        this.selectedHatArrayIndex = -1;
                        this.selectedSkinArrayIndex = 0;
                    }
                    else {
                        this.selectedHatArrayIndex = 0;
                    }
                }
            }
            this.initBoxTips();
            this.refreshSkin(-1);
        }
        lastSkin() {
            if (this.selectedHatArrayIndex < 0) {
                if (--this.selectedSkinArrayIndex < 0) {
                    if (this.hatArray.length > 0) {
                        this.selectedSkinArrayIndex = -1;
                        this.selectedHatArrayIndex = this.hatArray.length - 1;
                    }
                    else {
                        this.selectedSkinArrayIndex = this.skinArray.length - 1;
                    }
                }
            }
            else {
                if (--this.selectedHatArrayIndex < 0) {
                    if (this.skinArray.length > 0) {
                        this.selectedHatArrayIndex = -1;
                        this.selectedSkinArrayIndex = this.skinArray.length - 1;
                    }
                    else {
                        this.selectedHatArrayIndex = this.hatArray.length - 1;
                    }
                }
            }
            this.initBoxTips();
            this.refreshSkin(1);
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.boxBtnClose, this, () => {
                self.eventClose();
            }, null);
            PulCenter.clickEvent(this.boxSelect, this, () => {
                Laya.timer.clear(self, self.nextSkin);
                self.clickBoxSelect();
            }, null);
            PulCenter.clickEvent(this.lbBtnSelectResult, this, () => {
                self.clickSelectResult();
            }, null);
            PulCenter.clickEvent(this.boxBtnArrowLeft, this, () => {
                Laya.timer.clear(self, self.nextSkin);
                self.lastSkin();
            }, null);
            PulCenter.clickEvent(this.boxBtnArrowRight, this, () => {
                Laya.timer.clear(self, self.nextSkin);
                self.nextSkin();
            }, null);
        }
        shareTrySkin() {
            UiUtils.showLayaToast("Success");
            this.tryOn();
        }
        shareTrySkinCancel() {
            UiUtils.showLayaToast("Cancle");
            this.eventClose();
        }
        initEventHandler() {
        }
    }

    class MainViewDialog extends ui.dialogs.MainViewDialogUI {
        constructor() {
            super();
            this.gameStarted = false;
            this.stepBeforeStart = 0;
            this.fingerPressAtStart = true;
            this.skipForceVideo = false;
            this.name = SelfGameConfig.NAME_MAIN_VIEW_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
        }
        onAwake() {
            var self = this;
            this.initLayout();
            this.initData();
            this.initView();
            this.initListener();
            this.initEventHandler();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            if (UserGD.playCount < 1) {
                return;
            }
            let yNeed = UserGD.isIphoneX ? 210 : 190;
            if (SdkCenter.getInstannce().isSyyx()) {
                yNeed = UserGD.isIphoneX ? 70 : 80;
            }
            yNeed *= UiUtils.getClientScale();
            if (SdkCenter.getInstannce().isQQ()) {
                yNeed -= (UserGD.isIphoneX ? 100 : 50) * UiUtils.getClientScale();
            }
            if (UserGD.onlineSkinIntro) {
                UserGD.onlineSkinIntro.initLayout(UserGD.onlineSkinIntro.width / 2 + 20, Laya.stage.height - UserGD.onlineSkinIntro.height - yNeed);
                if (UserGD.levelSkinIntro) {
                    UserGD.levelSkinIntro.initLayout(Laya.stage.width - UserGD.levelSkinIntro.width / 2 - 25, Laya.stage.height - UserGD.levelSkinIntro.height - yNeed, null, null, true);
                }
            }
            else if (UserGD.levelSkinIntro) {
                UserGD.levelSkinIntro.initLayout(UserGD.levelSkinIntro.width / 2 + 20, Laya.stage.height - UserGD.levelSkinIntro.height - yNeed, null, null, true);
            }
        }
        initData() {
            Laya.timer.once(1000, this, () => {
                JoyStickCtrl.setTouchBlock(false);
            });
        }
        speedUp(coinNum, isVideo) {
            if (isVideo) {
                let videoLevel = 3;
                UiUtils.showLayaToast("Success,Upgrade " + videoLevel + "");
                DataManager.addSpeedLevel(videoLevel);
            }
            else {
                UiUtils.showLayaToast("Success,Use " + coinNum + "Coin,Upgrade 1");
                DataManager.addSpeedLevel(1);
            }
            this.refreshSkillBtns();
        }
        coinUpSpeed() {
            let canCoinBuy = (DataManager.getCoinNum() > this.speedLevelUpMoney);
            if (canCoinBuy) {
                DataManager.changeCoinNum(-this.speedLevelUpMoney);
                Globals.boxCoin.refreshView();
                this.speedUp(this.speedLevelUpMoney);
            }
            else {
                this.initBtnSkillSpeed();
            }
        }
        videoUpSpeed() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "jn" : null, () => {
                self.speedUp(0, true);
            }, () => {
                UiUtils.showLayaToast("No Video");
            }, () => {
                UiUtils.showLayaToast("Not Finish");
            });
        }
        initBtnSkillSpeed() {
            let speedLevel = DataManager.getSpeedLevel();
            this.lbSkillSpeedTitle.text = "Speed Lv." + speedLevel;
            if (speedLevel > 99) {
                this.boxCoinSkillSpeed.visible = false;
                this.boxVideoSkillSpeed.visible = false;
                this.boxSkillSpeed.offAll(Laya.Event.CLICK);
            }
            else {
                this.speedLevelUpMoney = 50 + 75 * (speedLevel - 1);
                let canCoinBuy = (DataManager.getCoinNum() > this.speedLevelUpMoney);
                this.boxCoinSkillSpeed.visible = canCoinBuy;
                this.boxVideoSkillSpeed.visible = !canCoinBuy;
                let self = this;
                if (canCoinBuy) {
                    let lbCoinNeed = this.boxCoinSkillSpeed.getChildByName("lbCoinNeed");
                    lbCoinNeed.text = "" + this.speedLevelUpMoney;
                    this.initClickCallback(this.boxSkillSpeed, () => {
                        self.coinUpSpeed();
                    });
                }
                else if (!SdkCenter.getInstannce().isSyyx() && !UserGD.isOfficial
                    || (SdkCenter.getInstannce().isLw() && !PulCenter.checkLwCondition("skillMark"))) {
                    this.boxCoinSkillSpeed.visible = true;
                    this.boxVideoSkillSpeed.visible = false;
                    let lbCoinNeed = this.boxCoinSkillSpeed.getChildByName("lbCoinNeed");
                    lbCoinNeed.text = "" + this.speedLevelUpMoney;
                    this.initClickCallback(this.boxSkillSpeed, () => {
                        UiUtils.showLayaToast("金币不足");
                    });
                }
                else {
                    let ic_tt = this.boxVideoSkillSpeed.getChildByName("ic_tt");
                    let ic_other = this.boxVideoSkillSpeed.getChildByName("ic_other");
                    ic_tt.visible = SdkCenter.getInstannce().isTT();
                    ic_other.visible =
                        !(SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch
                            || SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch);
                    if (SdkCenter.getInstannce().isSyyx()) {
                        ic_other.visible = true;
                        ic_other.skin = "game/ic_video3.png";
                    }
                    if (SdkCenter.getInstannce().isLw()) {
                        if (!PulCenter.checkLwCondition("videoMark")) {
                            ic_other.visible = true;
                        }
                        else {
                            ic_other.visible = false;
                        }
                    }
                    this.initClickCallback(this.boxSkillSpeed, () => {
                        self.videoUpSpeed();
                    });
                }
            }
        }
        powerUp(coinNum, isVideo) {
            if (isVideo) {
                let videoLevel = 3;
                DataManager.addPowerLevel(videoLevel);
                UiUtils.showLayaToast("Success,Upgrade " + videoLevel + "");
            }
            else {
                DataManager.addPowerLevel(1);
                UiUtils.showLayaToast("Success,Use " + coinNum + "Coin,Upgrade 1");
            }
            this.refreshSkillBtns();
        }
        coinUpPower() {
            let canCoinBuy = (DataManager.getCoinNum() > this.powerLevelUpMoney);
            if (canCoinBuy) {
                DataManager.changeCoinNum(-this.powerLevelUpMoney);
                Globals.boxCoin.refreshView();
                this.powerUp(this.powerLevelUpMoney);
            }
            else {
                this.initBtnSkillPower();
            }
        }
        videoUpPower() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "jn" : null, () => {
                self.powerUp(0, true);
            }, () => {
                UiUtils.showLayaToast("No Video");
            }, () => {
                UiUtils.showLayaToast("Not Finish");
            });
        }
        initBtnSkillPower() {
            let powerLevel = DataManager.getPowerLevel();
            this.lbSkillPowerTitle.text = "Power Lv." + powerLevel;
            if (powerLevel > 99) {
                this.boxCoinSkillPower.visible = false;
                this.boxVideoSkillPower.visible = false;
                this.boxSkillPower.offAll(Laya.Event.CLICK);
            }
            else {
                this.powerLevelUpMoney = 50 + 75 * (powerLevel - 1);
                let canCoinBuy = (DataManager.getCoinNum() > this.powerLevelUpMoney);
                this.boxCoinSkillPower.visible = canCoinBuy;
                this.boxVideoSkillPower.visible = !canCoinBuy;
                let self = this;
                if (canCoinBuy) {
                    let lbCoinNeed = this.boxCoinSkillPower.getChildByName("lbCoinNeed");
                    lbCoinNeed.text = "" + this.powerLevelUpMoney;
                    this.initClickCallback(this.boxSkillPower, () => {
                        self.coinUpPower();
                    });
                }
                else if (!SdkCenter.getInstannce().isSyyx() && !UserGD.isOfficial
                    || (SdkCenter.getInstannce().isLw() && !PulCenter.checkLwCondition("skillMark"))) {
                    this.boxCoinSkillPower.visible = true;
                    this.boxVideoSkillPower.visible = false;
                    let lbCoinNeed = this.boxCoinSkillPower.getChildByName("lbCoinNeed");
                    lbCoinNeed.text = "" + this.powerLevelUpMoney;
                    this.initClickCallback(this.boxSkillPower, () => {
                        UiUtils.showLayaToast("Not Enought");
                    });
                }
                else {
                    let ic_tt = this.boxVideoSkillPower.getChildByName("ic_tt");
                    let ic_other = this.boxVideoSkillPower.getChildByName("ic_other");
                    ic_tt.visible = SdkCenter.getInstannce().isTT();
                    ic_other.visible =
                        !(SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch
                            || SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch);
                    if (SdkCenter.getInstannce().isSyyx()) {
                        ic_other.visible = true;
                        ic_other.skin = "game/ic_video3.png";
                    }
                    if (SdkCenter.getInstannce().isLw()) {
                        if (!PulCenter.checkLwCondition("videoMark")) {
                            ic_other.visible = true;
                        }
                        else {
                            ic_other.visible = false;
                        }
                    }
                    this.initClickCallback(this.boxSkillPower, () => {
                        self.videoUpPower();
                    });
                }
            }
        }
        initAfterGotSdkConfig() {
            if (SdkCenter.getInstannce().isWx()
                || SdkCenter.getInstannce().isQQ()
                || SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.navAdLoaded && !Globals.boxEnergy) {
                    Globals.boxEnergy = new BoxEnergy();
                    Laya.stage.addChild(Globals.boxEnergy);
                    Globals.boxEnergy.visible = UserGD.openPower;
                }
            }
            else {
            }
        }
        refreshSkillBtns() {
            this.initBtnSkillSpeed();
            this.initBtnSkillPower();
        }
        openShop() {
            if (Globals.isResLoadedAfterShow) {
                if (!Laya.stage.getChildByName(SelfGameConfig.NAME_SHOP_DIALOG)) {
                    PulCenter.checkHideSkinIntros();
                    Laya.stage.addChild(new ShopDialog(() => {
                        PulCenter.checkShowSkinIntros();
                    }));
                }
            }
            else {
                let self = this;
                Laya.timer.frameLoop(2, this, function checkOpenShop() {
                    if (Globals.isResLoadedAfterShow) {
                        Laya.timer.clear(self, checkOpenShop);
                        self.openShop();
                    }
                });
            }
        }
        initBoxBtnAddIconToDeskTop() {
            let self = this;
            if (SdkCenter.getInstannce().isSyyx()) {
                SdkCenter.getInstannce().checkIconOnLauncher(function () {
                    self.mBtnAddIconToLauncher.visible = true;
                    if (UserGD.playCount == 1 && SdkCenter.getInstannce().isOppo()) {
                        SdkCenter.getInstannce().addIconToLauncher(function () {
                            self.mBtnAddIconToLauncher.visible = false;
                        }, null);
                    }
                }, function () {
                    self.mBtnAddIconToLauncher.visible = false;
                });
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                if (!PulCenter.getIfGotColorSign()) {
                    this.mBtnAddIconToLauncher.visible = true;
                    this.imgLableAddToLauncher.skin = "game/lb_add_color_sign.png";
                }
            }
        }
        initBoxBtnMoreGame() {
            let self = this;
            if (SdkCenter.getInstannce().isSyyx()) {
                this.mBtnMoreGame.visible = SdkCenter.getInstannce().isSupportGamesModal();
                UiUtils.scaleNodeV2(this.icExmarkMoreGame, 500, 0, 1500);
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                this.mBtnMoreGame.visible = true;
                UiUtils.shakeExMark(this.icExmarkMoreGame, this);
                Laya.timer.loop(4000, this, () => {
                    UiUtils.shakeExMark(self.icExmarkMoreGame, self);
                });
            }
        }
        initView() {
            this.mLbLevel.text = "LV:" + (DataManager.getTotalLevel() + 1) + "";
            if (!Globals.boxCoin) {
                Globals.boxCoin = new BoxCoin();
                Laya.stage.addChild(Globals.boxCoin);
            }
            this.refreshSkillBtns();
            this.initAfterGotSdkConfig();
            Laya.timer.loop(2000, this, () => {
                UiUtils.rotateNodeInter(this.mImgAddtoDesk);
            });
            this.initViewLw();
            this.initBoxBtnAddIconToDeskTop();
            this.initBoxBtnMoreGame();
            if (UserGD.playCount == 2 &&
                (SdkCenter.getInstannce().isSyyx() || SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ())) {
                this.openShop();
            }
            if (SdkCenter.getInstannce().isQQ()) {
                if (UserGD.playCount > 0 && (UserGD.playCount % 3 == 0)) {
                    SdkCenter.getInstannce().showInterstitialAd();
                }
                if (UserGD.playCount == 4) {
                    let self = this;
                    SdkCenter.getInstannce().addColorSign(() => {
                        self.mBtnAddIconToLauncher.visible = false;
                    });
                }
            }
            SdkCenter.getInstannce().showBanner();
        }
        initViewLw() {
            if (SdkCenter.getInstannce().isLw()) {
                this.boxBtnShop.visible = false;
                if (UserGD.levelSkinIntro) {
                    UserGD.levelSkinIntro.visible = false;
                }
                if (UserGD.onlineSkinIntro) {
                    UserGD.onlineSkinIntro.visible = false;
                }
                let ic_other1 = this.boxVideoSkillSpeed.getChildByName("ic_other");
                let ic_other2 = this.boxVideoSkillPower.getChildByName("ic_other");
                if (SdkCenter.getInstannce().isLw()) {
                    if (!PulCenter.checkLwCondition("videoMark")) {
                        ic_other1.visible = true;
                        ic_other2.visible = true;
                    }
                    else {
                        ic_other1.visible = false;
                        ic_other2.visible = false;
                    }
                }
                if (PulCenter.checkLwCondition("surprise")) {
                    this.mContentLw.visible = true;
                    UiUtils.scaleNode(this.btnSurprise);
                }
                else {
                    if (UserGD.playCount != 0) {
                        this.mContentLw.visible = true;
                        UiUtils.scaleNode(this.btnSurprise);
                    }
                    else {
                        this.mContentLw.visible = false;
                    }
                }
                if (UserGD.playCount == 0) {
                    if (PulCenter.checkLwCondition("inference") && PulCenter.checkLwCondition("firstHot") && LwConfig.firstHot) {
                        LwConfig.firstHot = false;
                        Laya.stage.addChild(new HotRecom());
                    }
                    else {
                        SdkCenter.getInstannce().showBanner();
                    }
                }
                else {
                    if (PulCenter.checkLwCondition("inference") && PulCenter.checkLwCondition("hot")) {
                        Laya.stage.addChild(new HotRecom());
                    }
                    else {
                        SdkCenter.getInstannce().showBanner();
                    }
                }
                if (PulCenter.checkLwCondition("inference") && PulCenter.checkLwCondition("icon") && UserGD.playCount != 0) {
                    PulCenter.showDoubleAd();
                }
            }
        }
        eventClose() {
            this.onDisable();
            this.removeSelf();
        }
        eventShowGameView() {
            PulCenter.checkHideSkinIntros();
            Laya.stage.addChild(new GameViewDialog());
            this.eventClose();
        }
        eventStartGame() {
            if (!UserGD.touchBlock && !this.gameStarted) {
                let self = this;
                let callback = () => {
                    self.gameStarted = true;
                    if (self.fingerPressAtStart) {
                        JoyStickCtrl.onFingerPress();
                    }
                    EffectUtils.vibrateShort();
                    Utils.dispatchEvent(SelfGameConfig.EVENT_START_GAME, true);
                    self.eventShowGameView();
                };
                if (SdkCenter.getInstannce().isLw()) {
                    if (PulCenter.checkLwCondition("videoForce")) {
                        PulCenter.showRewardedVideo(null, function s() {
                            Globals.boxCoin.addNumWithoutAni(300);
                            callback();
                        }, function e() {
                            callback();
                        }, function c() {
                            Globals.boxCoin.addNumWithoutAni(100);
                            callback();
                        });
                    }
                    else {
                        callback();
                    }
                }
                else {
                    callback();
                }
            }
        }
        checkCanStartGame() {
            if (Globals.isResLoadedAfterShow) {
                this.eventStartGame();
            }
            else {
                let self = this;
                Laya.timer.frameLoop(2, this, function checkStartGame() {
                    if (Globals.isResLoadedAfterShow) {
                        Laya.timer.clear(self, checkStartGame);
                        self.eventStartGame();
                    }
                });
            }
        }
        checkEnergyUsing() {
            if (UserGD.openPower) {
                if (!this.powerUsed) {
                    if (DataManager.getEnergyNum() <= 0) {
                        if (!Laya.stage.getChildByName(SelfGameConfig.NAME_ENERGY_DIALOG)) {
                            UiUtils.showLayaToast("体力不足,请及时补充");
                            this.needRecheck();
                            Laya.stage.addChild(new EnergyDialog());
                        }
                    }
                    else {
                        this.powerUsed = true;
                        UserGD.toastPowerUsed = true;
                        DataManager.changeEnergyNum(-1);
                        if (Globals.boxEnergy) {
                            Globals.boxEnergy.refreshView();
                            Globals.boxEnergy.initClock();
                        }
                        this.checkStepsBeforeStart();
                    }
                }
                else {
                    this.checkStepsBeforeStart();
                }
            }
            else {
                this.checkStepsBeforeStart();
            }
        }
        openTrySkin(skinCanTry, hatCanTry) {
            let self = this;
            if (Globals.isResLoadedAfterShow) {
                if (!Laya.stage.getChildByName(SelfGameConfig.NAME_TRY_SKIN_DIALOG)) {
                    PulCenter.checkHideSkinIntros();
                    this.fingerPressAtStart = false;
                    Laya.stage.addChild(new TrySkinDialog(skinCanTry, hatCanTry, (skipForceVideo) => {
                        if (skipForceVideo) {
                            self.skipForceVideo = skipForceVideo;
                        }
                        self.checkStepsBeforeStart();
                    }));
                }
            }
            else {
                Laya.timer.frameLoop(2, this, function checkOpenTrySkin() {
                    if (Globals.isResLoadedAfterShow) {
                        Laya.timer.clear(self, checkOpenTrySkin);
                        self.openTrySkin(skinCanTry, hatCanTry);
                    }
                });
            }
        }
        checkHaveTrySkin() {
            let skinCanTry = SkinManager.getInstance().getLockedArray(SkinManager.TYPE.type_try);
            let hatCanTry = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_try);
            if (skinCanTry.length > 0 || hatCanTry.length > 0) {
                this.offAll(Laya.Event.MOUSE_DOWN);
                this.openTrySkin(skinCanTry, hatCanTry);
            }
            else {
                this.checkStepsBeforeStart();
            }
        }
        checkCanTrySkin() {
            if (SdkCenter.getInstannce().isSyyx()) {
                if ((UserGD.playCount + 1) == SyyxConfig.pushTry[0] ||
                    (UserGD.playCount + 1 > SyyxConfig.pushTry[0] &&
                        ((UserGD.playCount + 1 - SyyxConfig.pushTry[0]) % (SyyxConfig.pushTry[1] + 1)) == 0)) {
                    this.checkHaveTrySkin();
                }
                else {
                    this.checkStepsBeforeStart();
                }
            }
            else if (SdkCenter.getInstannce().isLw()) {
                this.checkStepsBeforeStart();
            }
            else if (SdkCenter.getInstannce().isQQ() || SdkCenter.getInstannce().isWx()) {
                if (UserGD.trySkinSwitch &&
                    ((UserGD.playCount + 1) == UserGD.trySkinConfig[0] ||
                        (UserGD.playCount + 1 > UserGD.trySkinConfig[0] &&
                            ((UserGD.playCount + 1 - UserGD.trySkinConfig[0]) % (UserGD.trySkinConfig[1] + 1)) == 0))) {
                    this.checkHaveTrySkin();
                }
                else {
                    this.checkStepsBeforeStart();
                }
            }
            else {
                this.checkHaveTrySkin();
            }
        }
        needRecheck() {
            --this.stepBeforeStart;
        }
        checkForceVideo() {
            if (SdkCenter.getInstannce().isWx()) {
                let realPlayCount = UserGD.playCount + 1;
                if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openShipin &&
                    !this.skipForceVideo &&
                    (realPlayCount >= UserGD.shipinConfig[0] && ((realPlayCount - UserGD.shipinConfig[0]) % (UserGD.shipinConfig[1] + 1) == 0))) {
                    let rand = Math.random() * 100;
                    if (rand < UserGD.shipinConfig[2]) {
                        let self = this;
                        SdkCenter.getInstannce().showRewardedVideoAd(true, () => {
                            this.fingerPressAtStart = false;
                            Globals.boxCoin.addNumWithoutAni(300);
                            self.checkStepsBeforeStart();
                        }, () => {
                            self.checkStepsBeforeStart();
                        }, () => {
                            this.fingerPressAtStart = false;
                            Globals.boxCoin.addNumWithoutAni(100);
                            self.checkStepsBeforeStart();
                        });
                    }
                    else {
                        this.checkStepsBeforeStart();
                    }
                }
                else {
                    this.checkStepsBeforeStart();
                }
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                let realPlayCount = UserGD.playCount + 1;
                if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openShipin &&
                    !this.skipForceVideo &&
                    (realPlayCount >= UserGD.shipinConfig[0] && ((realPlayCount - UserGD.shipinConfig[0]) % (UserGD.shipinConfig[1] + 1) == 0))) {
                    let rand = Math.random() * 100;
                    console.log("qlsp随机数: ", rand, " 是否小于配置数: ", rand < UserGD.shipinConfig[2]);
                    if (rand < UserGD.shipinConfig[2]) {
                        let self = this;
                        SdkCenter.getInstannce().showRewardedVideoAd("qlsp", () => {
                            this.fingerPressAtStart = false;
                            Globals.boxCoin.addNumWithoutAni(300);
                            self.checkStepsBeforeStart();
                        }, () => {
                            self.checkStepsBeforeStart();
                        }, () => {
                            this.fingerPressAtStart = false;
                            Globals.boxCoin.addNumWithoutAni(100);
                            self.checkStepsBeforeStart();
                        });
                    }
                    else {
                        this.checkStepsBeforeStart();
                    }
                }
                else {
                    this.checkStepsBeforeStart();
                }
            }
            else {
                this.checkStepsBeforeStart();
            }
        }
        checkStepsBeforeStart() {
            switch (++this.stepBeforeStart) {
                case 1: {
                    this.checkEnergyUsing();
                    break;
                }
                case 2: {
                    this.checkCanTrySkin();
                    break;
                }
                case 3: {
                    this.checkForceVideo();
                    break;
                }
                default: {
                    this.checkCanStartGame();
                    break;
                }
            }
        }
        onAddIconToLauncherClick() {
            var self = this;
            if (SdkCenter.getInstannce().isSyyx()) {
                SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_ID_DESKTOP_CLICK, "2");
                SdkCenter.getInstannce().addIconToLauncher(function () {
                    self.mBtnAddIconToLauncher.visible = false;
                }, null);
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                SdkCenter.getInstannce().addColorSign(() => {
                    self.mBtnAddIconToLauncher.visible = false;
                });
            }
        }
        onMoreGameClick() {
            if (SdkCenter.getInstannce().isSyyx()) {
                SdkCenter.getInstannce().showMoreGamesModal();
            }
            else {
                SdkCenter.getInstannce().showAppBox(() => { return "zy"; });
            }
        }
        initClickCallback(btn, callback) {
            PulCenter.clickEvent(btn, this, callback, null);
            btn.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                e.stopPropagation();
            });
        }
        changeColor() {
            Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, 1);
        }
        initListener() {
            let self = this;
            this.on(Laya.Event.MOUSE_DOWN, this, () => {
                if (!UserGD.touchBlock) {
                    self.checkStepsBeforeStart();
                }
            });
            this.initClickCallback(this.mBtnAddIconToLauncher, () => {
                self.onAddIconToLauncherClick();
            });
            this.initClickCallback(this.mBtnMoreGame, () => {
                self.onMoreGameClick();
            });
            this.initClickCallback(this.boxChangeColor, () => {
                self.changeColor();
            });
            this.initClickCallback(this.btnSurprise, () => {
                Laya.stage.addChild(new FullAd(null, () => {
                    SdkCenter.getInstannce().showBanner();
                }));
            });
            this.initClickCallback(this.boxBtnShop, () => {
                SdkCenter.getInstannce().showInterstitialAd();
                self.openShop();
            });
        }
        initEventHandler() {
            Utils.onEvent(this, SelfGameConfig.EVENT_CREATE_NAV_ADS, this.initAfterGotSdkConfig);
            Utils.onEvent(this, SelfGameConfig.EVENT_REFRESH_SKILL_BTN, this.refreshSkillBtns);
        }
    }

    class OnlineSkinDialog extends ui.dialogs.OnlineSkinDialogUI {
        constructor(closeCallback) {
            super();
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
            this.name = SelfGameConfig.NAME_ONLINE_SKIN_DIALOG;
            this.closeCallback = closeCallback;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
            this.initEventHandler();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            if (UserGD.isIphoneX) {
                this.imgAddMeToFavorite.y += 60;
                this.imgTitle.top += 100;
            }
        }
        imgMoveRight() {
            Laya.Tween.to(this.imgAddMeToFavorite, {
                x: 375
            }, 300, Laya.Ease.bounceOut, Laya.Handler.create(this, this.imgMoveLeft), 200);
        }
        imgMoveLeft() {
            Laya.Tween.to(this.imgAddMeToFavorite, {
                x: 300
            }, 700, Laya.Ease.bounceIn, Laya.Handler.create(this, this.imgMoveRight), 800);
        }
        initView() {
            if (UserGD.onlineSkinIntro.getCanReceive()) {
                this.changeToReceive();
            }
            OrthogonalSceneManager.initOnlineRoleScene();
            if (SdkCenter.getInstannce().isWx()) {
                this.imgAddMeToFavorite.visible = true;
                this.imgMoveLeft();
            }
            else {
                this.imgAddMeToFavorite.visible = false;
            }
            if (Globals.skinOnlineUnlockStatus.skinIndexTommorrow > 0) {
                this.imgRoleTommorrow.skin = "game/skins/skin_" + Globals.skinOnlineUnlockStatus.skinIndexTommorrow + ".png";
            }
            else if (Globals.skinOnlineUnlockStatus.hatIndexTommorrow > 0) {
                this.imgRoleTommorrow.skin = "game/hats/hat_" + Globals.skinOnlineUnlockStatus.hatIndexTommorrow + ".png";
            }
            else {
                this.boxTommorrow.visible = false;
            }
        }
        eventClose() {
            this.onDisable();
            this.removeSelf();
            OrthogonalSceneManager.clearOnlineRoleScene();
            this.closeCallback && this.closeCallback();
        }
        eventClickReceive() {
            if (UserGD.onlineSkinIntro.getCanReceive()) {
                UserGD.onlineSkinIntro && UserGD.onlineSkinIntro.eventClose();
                UiUtils.showLayaToast("HIAHIA，UseFul!");
                if (Globals.skinOnlineUnlockStatus.skinIndex > 0) {
                    SkinManager.getInstance().change(Globals.skinOnlineUnlockStatus.skinIndex);
                }
                else if (Globals.skinOnlineUnlockStatus.hatIndex > 0) {
                    HatManager.getInstance().change(Globals.skinOnlineUnlockStatus.hatIndex);
                }
                else {
                    console.log("领取皮肤出错，数据错误 skinIndex = hatIndex = 0");
                }
                this.eventClose();
            }
            else {
                UiUtils.showLayaToast("Wait...");
            }
        }
        initListener() {
            let self = this;
            this.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                e.stopPropagation();
            });
            PulCenter.clickEvent(this.btnClose, this, () => {
                self.eventClose();
            }, null);
            PulCenter.clickEvent(this.btnOnlineSkin, this, () => {
                self.eventClickReceive();
            }, null);
        }
        refreshBtnView(timeLeft) {
            this.lbBtnOnlineSkin.text = timeLeft + " s Can Get";
        }
        changeToReceive() {
            this.lbTips.text = "Tips: Get new tomorrow~";
            this.lbBtnOnlineSkin.text = "Get";
        }
        initEventHandler() {
            Utils.onEvent(this, "OnlineSkinCount", this.refreshBtnView);
            Utils.onEvent(this, "OnlineSkinCountUnlock", this.changeToReceive);
        }
    }

    class OnlineSkinIntro extends ui.dialogs.OnlineSkinIntroUI {
        constructor() {
            super();
            this.poped = false;
            this.tweening = false;
            this.isYellow = false;
            this.zOrder = SelfGameConfig.ZORDER_ABOVE_DIALOG;
            this.timeCount = UserGD.onlineRewardConfig;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener(true);
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        getTargetY() {
            return this.targetY;
        }
        initLayout(x, y, scale, alpha) {
            if (!x && !y) {
                this.scale(0, 0, true);
                this.x = Laya.stage.width / 2 + 97;
                this.y = Laya.stage.height / 2 + 27;
                this.targetX = this.width / 2 + 20;
                this.targetY = Laya.stage.height - this.height - 600 * UiUtils.getClientScale();
            }
            else {
                this.targetX = x;
                this.targetY = y;
                if (this.poped) {
                    this.visible = true;
                    if (scale) {
                        this.scale(scale, scale, true);
                    }
                    else {
                        this.scale(1, 1, true);
                    }
                    this.x = x;
                    this.y = y;
                    this.alpha = alpha ? alpha : 1;
                }
                else if (this.tweening) {
                    this.tweening = false;
                    Laya.Tween.clearAll(this);
                    this.targetAlpha = 1;
                    this.scale(1, 1, true);
                    this.afterTween();
                }
                else {
                    this.targetAlpha = alpha ? alpha : 1;
                }
            }
        }
        startClock() {
            this.clockPin.rotation = 0;
            this.isYellow = !this.isYellow;
            let self = this;
            Laya.Tween.to(this.clockPin, {
                rotation: 360,
                update: Laya.Handler.create(this, () => {
                    self.clockProgress.graphics.clear();
                    if (self.isYellow) {
                        self.clockProgress.graphics.drawPie(22.5, 22.5, 22.5, 270, 270 + self.clockPin.rotation, "#ff0000");
                    }
                    else {
                        self.clockProgress.graphics.drawPie(22.5, 22.5, 22.5, 270 + self.clockPin.rotation, 630, "#ff0000");
                    }
                }, null, false)
            }, 3000, null, Laya.Handler.create(this, this.startClock));
        }
        initView() {
            this.visible = false;
            if (Globals.skinOnlineUnlockStatus.skinIndex > 0) {
                this.imgItem.skin = "game/skins/skin_" + Globals.skinOnlineUnlockStatus.skinIndex + ".png";
            }
            else if (Globals.skinOnlineUnlockStatus.hatIndex > 0) {
                this.imgItem.skin = "game/hats/hat_" + Globals.skinOnlineUnlockStatus.hatIndex + ".png";
            }
            this.lbTimeLeft.text = this.timeCount + "s";
            this.startClock();
        }
        initListener(isBeforeTween) {
            if (isBeforeTween) {
                this.mouseThrough = true;
            }
            else {
                this.mouseThrough = false;
                this.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                    e.stopPropagation();
                });
                PulCenter.clickEvent(this, this, () => {
                    let exist = Laya.stage.getChildByName(SelfGameConfig.NAME_MAIN_VIEW_DIALOG) || Laya.stage.getChildByName(SelfGameConfig.NAME_GAME_VIEW_DIALOG);
                    if (exist && !Laya.stage.getChildByName(SelfGameConfig.NAME_ONLINE_SKIN_DIALOG)) {
                        PulCenter.checkHideSkinIntros();
                        Laya.stage.addChild(new OnlineSkinDialog(() => {
                            if (exist) {
                                PulCenter.checkShowSkinIntros();
                            }
                        }));
                    }
                }, null, true, false);
            }
        }
        eventClose() {
            UserGD.onlineSkinIntro = null;
            this.onDisable();
            this.removeSelf();
        }
        popOut() {
            if (this.poped) {
                return;
            }
            this.visible = true;
            this.boxContent.visible = false;
            Laya.timer.clearAll(this);
            this.stopLoopShake();
            Laya.Tween.to(this, {
                scaleX: 2,
                scaleY: 2
            }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, this.moveToPos));
        }
        setUnlocked() {
            DataManager.setSkinOnlineUnlockStatus(true);
        }
        countDown() {
            if (this.timeCount > 0) {
                --this.timeCount;
                this.lbTimeLeft.text = this.timeCount + "s";
                Utils.dispatchEvent("OnlineSkinCount", this.timeCount);
            }
            else if (this.timeCount == 0) {
                Laya.timer.clear(this, this.countDown);
                this.canReceive = true;
                this.setUnlocked();
                this.lbTimeLeft.text = "GET";
                this.lbTimeLeft.color = "#ff0000";
                this.loopShake();
                Utils.dispatchEvent("OnlineSkinCountUnlock", true);
            }
        }
        startTimeCount() {
            Laya.timer.clear(this, this.countDown);
            this.canReceive = false;
            Laya.timer.loop(1000, this, this.countDown);
        }
        getTimeCount() {
            return this.timeCount;
        }
        setCanReceive(can) {
            this.canReceive = can;
        }
        getCanReceive() {
            return this.canReceive;
        }
        shake() {
            UiUtils.rotateNodeInter(this);
        }
        stopLoopShake() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            this.rotation = 0;
            this.scale(1, 1, true);
        }
        loopShake() {
            let self = this;
            this.shake();
            Laya.timer.once(1000, this, () => {
                self.shake();
            });
            Laya.timer.once(2000, this, () => {
                self.shake();
            });
            Laya.timer.once(3000, this, () => {
                self.shake();
            });
            Laya.timer.loop(10000, this, () => {
                self.shake();
                Laya.timer.once(1000, self, () => {
                    self.shake();
                });
                Laya.timer.once(2000, self, () => {
                    self.shake();
                });
                Laya.timer.once(3000, self, () => {
                    self.shake();
                });
            });
        }
        afterTween() {
            this.poped = true;
            this.startTimeCount();
            this.boxContent.visible = true;
            if (this.canReceive) {
                this.loopShake();
            }
            this.initListener(false);
            this.alpha = this.targetAlpha;
            this.pos(this.targetX, this.targetY);
        }
        moveToPos() {
            let self = this;
            this.tweening = true;
            Laya.Tween.clearAll(this);
            Laya.Tween.to(this, {
                scaleX: 1,
                scaleY: 1,
                x: this.targetX,
                y: this.targetY
            }, 300, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                self.afterTween();
            }), 2000);
        }
    }

    class LoadingDialog extends ui.loading.LoadingDialogUI {
        constructor() {
            super();
            this.logoArr = [
                "loading/logo.png", "loading/logo1.png"
            ];
            this.name = SelfGameConfig.NAME_LOADING_DIALOG;
            this.zOrder = 100;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            this.lbTip.left = this.width / 2 - 50;
        }
        setPretendLoading() {
            let self = this;
            let progress = 0;
            let dotCount = 0;
            Laya.timer.loop(100, this, () => {
                progress += 0.01;
                if (progress <= 1) {
                    self.maskImgProgress.graphics.clear();
                    self.maskImgProgress.graphics.drawRect(0, 0, self.maskImgProgress.width * progress, self.maskImgProgress.height, "#ff0000");
                    self.imgLittleMan.x = self.maskImgProgress.width * progress;
                }
                switch (++dotCount) {
                    case 1: {
                        self.lbTip.text = "Loading.";
                        break;
                    }
                    case 2: {
                        self.lbTip.text = "Loading..";
                        break;
                    }
                    case 3: {
                        self.lbTip.text = "Loading...";
                        break;
                    }
                }
                if (dotCount == 3) {
                    dotCount = 0;
                }
            });
        }
        initView() {
            if (SdkCenter.getInstannce().isLw()
                || SdkCenter.getInstannce().isSyyx()
                || SdkCenter.getInstannce().isQQ()) {
                this.imgLogo.skin = this.logoArr[0];
            }
            else {
                this.imgLogo.skin = this.logoArr[1];
            }
            this.setPretendLoading();
        }
        initListener() {
            this.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                e.stopPropagation();
            });
        }
    }

    class WrongClickAd extends ui.sdk.WrongClickAdUI {
        constructor(closeCallback, type, awakeCallback) {
            super();
            this.isReceive = false;
            this.pb = 0;
            this.clickCount = 0;
            this.curClickTime = Date.now();
            this.longTimeNoClick = false;
            this.pbClick = [4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8];
            this.percent = 0;
            this.adCount = 2;
            this.countDownLeft = 5000;
            this.changeRed = false;
            this.countDownDone = false;
            this.isWrongClicked = false;
            this.wrongClickType = 0;
            if (type) {
                this.wrongClickType = type;
            }
            this.closeCallback = closeCallback;
            this.zOrder = SelfGameConfig.ZORDER_WRONGCLICK_DIALOG;
            this.name = SelfGameConfig.NAME_WRONGCLICK_DIALOG;
            this.awakeCallback = awakeCallback;
        }
        onAwake() {
            ++UserGD.openWrongClickCount;
            this.initLayout();
            this.initView();
            this.initListener();
            this.initEventListener();
            this.showNavAds();
            Laya.timer.once(100, this, function check() {
                if (self.skeBoxing) {
                    try {
                        self.skeBoxing.play(1, true);
                        self.skeBoxing.visible = true;
                    }
                    catch (e) {
                        console.log(e);
                        Laya.timer.once(200, this, check);
                    }
                }
            });
            var self = this;
            this.pb = 0;
            this.isReceive = false;
            this.pbReward.value = 0;
            this.btnClose.visible = false;
            Laya.timer.once(8 * 1000, this, function s() {
                self.btnClose.visible = true;
            });
            PulCenter.clickEvent(this.btnClose, this, this.eventClose, null, false, false);
            if (SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isLw()) {
                PulCenter.clickEvent(this.btnReward, this, this.attractClickForWx, null, true, false);
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                if (Laya.Browser.onIOS) {
                    this.btnReward.bottom = 80;
                }
                PulCenter.clickEvent(this.btnReward, this, this.attractClickForQQ, null, true, false);
                PulCenter.clickEvent(this.boxBtnHitRole, this, this.attractClickForQQ, null, true, false);
            }
            else {
                PulCenter.clickEvent(this.btnReward, this, this.attractClick, null, true, false);
            }
            if (SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openUnionAd && UserGD.openJiaout && UserGD.navAdArray.length > 0) {
                this.btnExitGame.visible = true;
                PulCenter.clickEvent(this.btnExitGame, this, this.eventExitGame, null, false, false);
            }
            else {
                this.btnExitGame.visible = false;
            }
            this.percent = 15 + Math.floor(Math.random() * 25);
            var imgCrazyClick = this.btnReward.getChildAt(0);
            this.scaleImg(imgCrazyClick);
            this.awakeCallback && this.awakeCallback();
        }
        onEnable() {
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        scaleImg(img) {
            var self = this;
            Laya.Tween.to(img, {
                scaleX: 1.2,
                scaleY: 1.2
            }, 500, Laya.Ease.linearInOut, Laya.Handler.create(self, () => {
                Laya.Tween.to(img, {
                    scaleX: 1,
                    scaleY: 1
                }, 500, Laya.Ease.linearInOut, Laya.Handler.create(self, () => {
                    self.scaleImg(img);
                }));
            }));
        }
        initLayout() {
            this.height = Laya.stage.height;
            this.width = Laya.stage.width;
            if (UserGD.isIphoneX) {
                this.btnExitGame.right = 20;
                this.btnExitGame.top = 150;
                this.boxLabel.centerY -= 30;
                this.pbReward.centerY -= 30;
            }
            else {
            }
            if (SdkCenter.getInstannce().isQQ()) {
                if (UserGD.isIphoneX) {
                    this.boxLabel.centerY += 100;
                    this.pbReward.centerY += 100;
                }
                else {
                    this.boxLabel.centerY -= 50;
                    this.pbReward.centerY -= 50;
                }
            }
        }
        showNavAds() {
            if (SdkCenter.getInstannce().isWx() && UserGD.openUnionAd && UserGD.navAdLoaded) {
                Utils$1.showLeftRightDrawAd(this.leftRightNavBox, (box, lrNavAd, caller) => {
                }, this);
            }
        }
        eventExitGame() {
            PulCenter.showNavAdList();
        }
        attractClickForWx() {
            this.clickCount += 1;
            if (this.skeBoxing) {
                this.skeBoxing.play(0, true, true);
                Laya.timer.clear(this, this.returnIdle);
                Laya.timer.once(370, this, this.returnIdle);
            }
            if (this.clickCount == 1) {
                Laya.timer.loop(100, this, this.energyDecrement);
                this.skeFinger.visible = false;
                Laya.Tween.clearAll(this.btnReward);
                this.btnReward.scale(1, 1, true);
            }
            var add = (this.pbClick[Math.floor(this.pbClick.length * Math.random())]) / 80;
            this.pb += add;
            this.pbReward.value = this.pb;
            if (this.pbReward.value * 100 > this.percent - 1 && this.adCount > 0) {
                let self = this;
                self.isWrongClicked = true;
                UserGD.canShowBanner = true;
                SdkCenter.getInstannce().showBanner(true);
                Laya.timer.once(1000, this, function s() {
                    self.isWrongClicked = false;
                    UserGD.canShowBanner = false;
                    SdkCenter.getInstannce().hideBanner();
                });
                this.adCount--;
                this.percent = 60 + Math.floor(Math.random() * 25);
            }
            if (this.isReceive) {
                return;
            }
            if (this.pbReward.value >= 1) {
                UserGD.canShowBanner = true;
                Laya.timer.once(500, this, () => {
                    this.eventClose();
                });
            }
        }
        attractClickForQQ() {
            this.clickCount += 1;
            if (this.skeBoxing) {
                this.skeBoxing.play(0, true, true);
                Laya.timer.clear(this, this.returnIdle);
                Laya.timer.once(370, this, this.returnIdle);
            }
            if (this.clickCount == 1) {
                Laya.timer.loop(100, this, this.energyDecrement);
                if (this.wrongClickType) {
                    this.boxBtnHitRole.getChildAt(0).visible = false;
                    Laya.Tween.clearAll(this.boxBtnHitRole);
                    this.boxBtnHitRole.scale(1, 1, true);
                }
                else {
                    this.skeFinger.visible = false;
                    Laya.Tween.clearAll(this.btnReward);
                    this.btnReward.scale(1, 1, true);
                }
            }
            var add = (this.pbClick[Math.floor(this.pbClick.length * Math.random())]) / 80;
            this.pb += add;
            this.pbReward.value = this.pb;
            if (this.pbReward.value * 100 > this.percent - 1 && this.adCount > 0 && !this.isWrongClicked) {
                let self = this;
                self.isWrongClicked = true;
                if (this.wrongClickType) {
                    SdkCenter.getInstannce().showAppBox(() => { return "wd"; });
                    Laya.timer.once(2000, this, function s() {
                        self.isWrongClicked = false;
                        SdkCenter.getInstannce().hideAppBox();
                    });
                }
                else {
                    UserGD.canShowBanner = true;
                    SdkCenter.getInstannce().showBanner(true);
                    Laya.timer.once(2000, this, function s() {
                        self.isWrongClicked = false;
                        if (Laya.Browser.onIOS) {
                            if (!self.isReceive) {
                                self.receiveReward(true);
                            }
                        }
                        else {
                            UserGD.canShowBanner = false;
                            SdkCenter.getInstannce().hideBanner();
                        }
                    });
                }
                this.adCount--;
                this.percent = 60 + Math.floor(Math.random() * 25);
            }
            if (this.isReceive) {
                return;
            }
            if (this.pbReward.value >= 1) {
                UserGD.canShowBanner = true;
                this.receiveReward();
            }
        }
        attractClick() {
            this.clickCount += 1;
            if (this.clickCount == 1) {
                this.curClickTime = Date.now();
                Laya.timer.loop(100, this, this.energyDecrement);
                this.skeFinger.visible = false;
            }
            if ((Date.now() - this.curClickTime) > 5000) {
                this.longTimeNoClick = true;
            }
            this.curClickTime = Date.now();
            var add = (this.pbClick[Math.floor(this.pbClick.length * Math.random())]) / 100;
            this.pb += add;
            this.pbReward.value = this.pb;
            if (this.isReceive) {
                return;
            }
            if (this.longTimeNoClick == true) {
                if (this.pb > 0.6) {
                    this.pb = 0.6;
                    this.receiveReward();
                }
            }
            else {
                var ran = Math.random();
                if (ran <= 0.3) {
                    if (this.pb > 0.7) {
                        this.pb = 0.7;
                        this.receiveReward();
                    }
                }
                else if (ran <= 0.6) {
                    if (this.pb > 0.8) {
                        this.pb = 0.8;
                        this.receiveReward();
                    }
                }
                else if (ran <= 0.9) {
                    if (this.pb > 0.9) {
                        this.pb = 0.9;
                        this.receiveReward();
                    }
                }
                else {
                    if (this.pb > 0.95) {
                        this.pb = 1;
                        this.receiveReward();
                    }
                }
            }
        }
        receiveReward(giveReward) {
            if (this.isReceive) {
                return;
            }
            var self = this;
            this.isReceive = true;
            this.stopDecrease();
            UserGD.canShowBanner = true;
            if (giveReward) {
                if (UserGD.playCount < 1) {
                    Laya.timer.once(1000, this, function () {
                        let vec = new Laya.Vector3(1, 1, 1);
                        for (let i = 0; i < 2; i++) {
                            let pos = new Laya.Vector3(Utils.nextFloat(0.2, 0.8), 0, Utils.nextFloat(0.2, 0.8));
                            Utils.dispatchEvent(SelfGameConfig.EVENT_ROLE_PLUS, [0, pos, vec, false]);
                        }
                        self.eventClose();
                    });
                }
                else {
                    if (SdkCenter.getInstannce().isQQ()) {
                        if (this.countDownDone) {
                            Laya.timer.once(1000, this, function () {
                                self.eventClose();
                            });
                        }
                        else {
                            Laya.timer.once(1000, this, function () {
                                UserGD.rolePlus = true;
                                self.eventClose();
                            });
                        }
                    }
                    else {
                        Laya.timer.once(1000, this, function () {
                            UserGD.rolePlus = true;
                            self.eventClose();
                        });
                    }
                }
            }
            else {
                Laya.timer.once(1000, this, function () {
                    self.eventClose();
                });
            }
        }
        energyDecrement() {
            if (this.pbReward.value >= 0.05) {
                this.pbReward.value -= 0.005;
                this.pb = this.pbReward.value;
            }
        }
        stopDecrease() {
            Laya.timer.clear(this, this.processCountDown);
            Laya.timer.clear(this, this.energyDecrement);
        }
        eventClose() {
            if (SdkCenter.getInstannce().isLw()) {
                PulCenter.destroyCustomAd();
            }
            this.onDisable();
            SdkCenter.getInstannce().hideBlockAd((UserGD.playCount < 1) ? "kjwd" : "jswd");
            this.removeSelf();
            if (this.closeCallback) {
                this.closeCallback();
            }
            PulCenter.checkCanShowBanner(this.name);
        }
        processCountDown() {
            this.countDownLeft -= Laya.timer.delta;
            if (this.countDownLeft >= 0) {
                this.lbCountDown.text = "" + this.countDownLeft;
                if (this.countDownLeft < 1000 && !this.changeRed) {
                    this.changeRed = true;
                    this.lbCountDown.color = "#ff0000";
                }
            }
            else {
                Laya.timer.clear(this, this.processCountDown);
                this.countDownDone = true;
                this.lbCountDown.text = "0";
            }
        }
        countDownWhileOnQQ() {
            return;
            this.lbCountDown = new Laya.Label("" + this.countDownLeft);
            this.lbCountDown.fontSize = 100;
            this.lbCountDown.color = "#ffffff";
            this.mContent.addChild(this.lbCountDown);
            this.lbCountDown.centerX = 0;
            this.lbCountDown.centerY = UserGD.isIphoneX ? 220 : 130;
            Laya.timer.frameLoop(1, this, this.processCountDown);
            let lbLeft = new Laya.Label("还剩");
            lbLeft.fontSize = 30;
            lbLeft.font = "SimHei";
            lbLeft.color = "#ffffff";
            this.mContent.addChild(lbLeft);
            lbLeft.centerX = -155;
            lbLeft.centerY = UserGD.isIphoneX ? 235 : 145;
            let lbRight = new Laya.Label("s获得奖励");
            lbRight.fontSize = 30;
            lbRight.font = "SimHei";
            lbRight.color = "#ffffff";
            this.mContent.addChild(lbRight);
            lbRight.centerX = 180;
            lbRight.centerY = UserGD.isIphoneX ? 235 : 145;
        }
        initView() {
            UiUtils.shakeExMark(this.lbExclamationMark, this);
            let self = this;
            Laya.timer.loop(4000, this, () => {
                UiUtils.shakeExMark(self.lbExclamationMark, self);
            });
            Laya.timer.once(1000, this, this.countDownWhileOnQQ);
            if (SdkCenter.getInstannce().isLw()) {
                if (UiUtils.isAllScreen()) {
                    PulCenter.showCustomAd("wrongClickAd");
                }
            }
            if (SdkCenter.getInstannce().isLw()) {
                PulCenter.hideDoubleAd();
            }
            if (SdkCenter.getInstannce().isQQ() && this.wrongClickType) {
                this.btnReward.visible = false;
                UiUtils.scaleNode(this.boxBtnHitRole, 200, 0);
                UserGD.canShowBanner = true;
            }
            else {
                UserGD.canShowBanner = false;
                SdkCenter.getInstannce().hideBanner();
                this.boxBtnHitRole.visible = false;
                UiUtils.scaleNode(this.btnReward, 200, 0);
            }
            SdkCenter.getInstannce().showBlockAd((UserGD.playCount < 1) ? "kjwd" : "jswd");
        }
        initListener() {
            this.on(Laya.Event.MOUSE_DOWN, this, (e) => {
                e.stopPropagation();
            });
        }
        initEventListener() {
            let self = this;
        }
        returnIdle() {
            this.skeBoxing.play(1, true);
        }
    }

    class RoadInfo {
    }

    class KeyBoxDialog extends ui.dialogs.KeyBoxDialogUI {
        constructor(index, closeCallback) {
            super();
            this.hatGot = false;
            this.videoChance = 2;
            this.openedNum = 0;
            this.inited = false;
            this.processingNum = 0;
            this.isClickedItem = false;
            this.name = SelfGameConfig.NAME_KEY_BOX_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
            this.hatIndex = index;
            this.boxes = new Array();
            for (let i = 0; i < 9; i++) {
                this.boxes.push({
                    opened: false,
                    gemNum: 0,
                    isHat: false
                });
            }
            if (closeCallback) {
                this.closeCallback = closeCallback;
            }
        }
        onAwake() {
            this.initLayout();
            this.loadAni();
            this.initListener();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            this.bg.x = Laya.stage.width / 2;
            this.boxMainFrame.x = Laya.stage.width / 2;
            if (UserGD.isIphoneX) {
                this.boxMainFrame.top = 190;
            }
            else {
                this.boxMainFrame.top = 50;
            }
            if (SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.isIphoneX) {
                    this.boxMainFrame.top = 250;
                    this.boxBottom.bottom = 100;
                    this.boxBtnVideoGetKey.bottom = 150;
                }
                else {
                    this.boxBottom.bottom = 50;
                }
            }
        }
        getGem(index, num) {
            this.boxes[index].opened = true;
            this.boxes[index].gemNum = num;
            let cell = this.listBoxes.cells[index];
            let globalPoint = cell.localToGlobal(new Laya.Point(cell.width / 2, cell.height / 2));
            Globals.boxCoin.showAddCoins(num, [globalPoint.x, globalPoint.y]);
        }
        getHat(index) {
            this.boxes[index].opened = true;
            this.boxes[index].isHat = true;
            this.hatGot = true;
            HatManager.getInstance().unlock(this.hatIndex);
        }
        processOpenBox(index) {
            let rand = Math.random();
            if (!this.hatGot) {
                if (this.openedNum == 8) {
                    this.getHat(index);
                }
                else {
                    if (rand < 0.1) {
                        this.getHat(index);
                    }
                    else {
                        this.getGem(index, 45 + Math.floor(rand * 20));
                    }
                }
            }
            else {
                this.getGem(index, 45 + Math.floor(rand * 20));
            }
            ++this.openedNum;
            this.listBoxes.array = this.boxes;
            this.listBoxes.refresh();
            if (--this.processingNum <= 0) {
                this.refreshBtnVisualStatus();
            }
        }
        clickItem(index) {
            if (DataManager.getKeyNum() < 1 || this.boxes[index].opened) {
                return;
            }
            if (!this.isClickedItem) {
                this.isClickedItem = true;
                for (let i = 0; i < this.listBoxes.cells.length; i++) {
                    this.listBoxes.cells[i].getChildByName("spineFinger").visible = false;
                }
            }
            ++this.processingNum;
            DataManager.changeKeyNum(-1);
            this.refreshBoxKey();
            this.boxes[index].opened = true;
            let ske = this.mSpineFactory.buildArmature(1);
            this.listBoxes.cells[index].getChildByName("imgBox").visible = false;
            if (ske) {
                let box = this.listBoxes.cells[index].getChildByName("boxKeyBox");
                box.addChild(ske);
                ske.scale(0.8, 0.8);
                ske.pos(75, 100);
                let self = this;
                ske.on(Laya.Event.STOPPED, this, () => {
                    ske.removeSelf();
                    self.processOpenBox(index);
                });
                ske.play(0, false);
            }
            else {
                this.processOpenBox(index);
            }
        }
        refreshItem(cell, index) {
            let boxGemReward = cell.getChildByName("boxGemReward");
            let lbGemNum = boxGemReward.getChildByName("lbGemNum");
            let imgReward = cell.getChildByName("imgReward");
            let boxKeyBox = cell.getChildByName("boxKeyBox");
            let imgBox = cell.getChildByName("imgBox");
            let data = cell.dataSource;
            cell.offAll(Laya.Event.CLICK);
            if (data.opened) {
                imgBox.visible = false;
                if (data.isHat) {
                    boxGemReward.visible = false;
                    imgReward.visible = true;
                    imgReward.skin = "game/hats/hat_" + this.hatIndex + ".png";
                }
                else if (data.gemNum > 0) {
                    boxGemReward.visible = true;
                    lbGemNum.text = "" + data.gemNum;
                    imgReward.visible = false;
                }
                else {
                    imgReward.visible = false;
                    boxGemReward.visible = false;
                }
            }
            else {
                boxGemReward.visible = false;
                imgReward.visible = false;
                boxKeyBox.visible = true;
                cell.on(Laya.Event.CLICK, this, this.clickItem, [index]);
            }
        }
        initBoxBtnVideoGetKey() {
            this.lbVideoKeyNum.text = "3x";
            if (SdkCenter.getInstannce().isSyyx()) {
                this.icBtnVideo.skin = "game/ic_video3.png";
            }
        }
        refreshBtnVisualStatus() {
            if (DataManager.getKeyNum() > 0) {
                this.boxBtnVideoGetKey.visible = false;
                this.boxBtnContinue.visible = false;
            }
            else {
                if (this.videoChance > 0) {
                    this.boxBtnVideoGetKey.visible = true;
                }
                else {
                    this.boxBtnVideoGetKey.visible = false;
                }
                this.boxBtnContinue.visible = true;
            }
        }
        refreshBoxKey() {
            let keyNum = DataManager.getKeyNum();
            for (let i = 0; i < this.boxKey.numChildren; i++) {
                let child = this.boxKey.getChildAt(i);
                if (i < keyNum) {
                    child.skin = "game/img_fg_key.png";
                }
                else {
                    child.skin = "game/img_bg_key.png";
                }
            }
        }
        initView() {
            if (this.inited) {
                return;
            }
            this.inited = true;
            this.refreshBtnVisualStatus();
            this.refreshBoxKey();
            this.imgBestReward.skin = "game/hats/hat_" + this.hatIndex + ".png";
            this.listBoxes.renderHandler = Laya.Handler.create(this, this.refreshItem, null, false);
            this.listBoxes.array = this.boxes;
            this.initBoxBtnVideoGetKey();
            this.showBanner();
            let random = Utils.nextInt(0, this.listBoxes.cells.length - 1);
            this.listBoxes.cells[random].getChildByName("spineFinger").visible = true;
            UiUtils.shakeExMark(this.lbExclamationMark, this);
            let self = this;
            Laya.timer.loop(4000, this, () => {
                UiUtils.shakeExMark(self.lbExclamationMark, self);
            });
            if (SdkCenter.getInstannce().isSyyx()) {
                SdkCenter.getInstannce().showBanner();
            }
            SdkCenter.getInstannce().showBlockAd("jgg");
        }
        loadAni() {
            this.mSpineFactory = new Laya.Templet();
            this.mSpineFactory.offAll();
            this.mSpineFactory.on(Laya.Event.COMPLETE, this, this.initView);
            this.mSpineFactory.loadAni("spine/GDR_baooxiang.sk");
            Laya.timer.once(200, this, this.initView);
        }
        videoGetKey() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "jgg" : null, () => {
                DataManager.changeKeyNum(3);
                --self.videoChance;
                self.refreshBtnVisualStatus();
                self.refreshBoxKey();
                UiUtils.showLayaToast("Success,Get 3 key");
            }, () => {
                self.eventClose();
            }, () => {
                UiUtils.showLayaToast("Not Finish");
            });
        }
        eventClose() {
            if (this.closeCallback) {
                this.closeCallback();
            }
            this.onDisable();
            SdkCenter.getInstannce().hideBlockAd("jgg");
            this.removeSelf();
        }
        showBanner() {
            if (SdkCenter.getInstannce().isTT()) {
                UserGD.canShowBanner = true;
                UserGD.showBannerNow = true;
                SdkCenter.getInstannce().showBanner();
            }
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.boxBtnVideoGetKey, this, () => {
                self.videoGetKey();
            }, null);
            PulCenter.clickEvent(this.boxBtnContinue, this, () => {
                self.eventClose();
            }, null);
        }
    }

    class GetLevelSkinDialog extends ui.dialogs.GetLevelSkinDialogUI {
        constructor(closeCallback) {
            super();
            this.closeCallback = closeCallback;
            this.name = SelfGameConfig.NAME_GET_LEVEL_SKIN_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
        }
        initView() {
            OrthogonalSceneManager.initLevelSkinScene();
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.boxBtnUse, this, () => {
                SkinManager.getInstance().change(SkinManager.getInstance().progress.indexLevelUnlocking);
                self.eventClose();
            }, null);
            PulCenter.clickEvent(this.boxBtnSkip, this, () => {
                self.eventClose();
            }, null);
        }
        eventClose() {
            this.onDisable();
            this.removeSelf();
            SkinManager.getInstance().checkNeedNextLevelIndex();
            UserGD.levelSkinIntro && UserGD.levelSkinIntro.refreshView();
            OrthogonalSceneManager.clearLevelSkinScene();
            if (this.closeCallback) {
                this.closeCallback();
            }
        }
    }

    class LevelThroughSkinDialog extends ui.dialogs.LevelThroughSkinDialogUI {
        constructor(progress, needAccelerate, closeCallback, isWin) {
            super();
            this.progress = false;
            this.needAccelerate = false;
            this.skinProgressNeed = 100;
            this.skinUnlocked = false;
            this.gotWrongClickReward = false;
            this.isReceive = false;
            this.clickCount = 0;
            this.adCount = 2;
            this.isVideoAccelerate = false;
            this.isShowingBanner = false;
            this.hideAdDuration = 1000;
            this.isWin = false;
            if (isWin) {
                this.isWin = isWin;
            }
            this.name = SelfGameConfig.NAME_LEVEL_SKIN_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_WRONGCLICK_DIALOG;
            this.progress = progress;
            this.needAccelerate = needAccelerate;
            this.closeCallback = closeCallback;
            this.skinProgressReal = SkinManager.getInstance().getLevelProgress(SkinManager.getInstance().progress.indexLevelUnlocking);
            this.skinProgressLast = this.skinProgressReal;
            this.skinProgressNow = this.skinProgressReal;
            if (progress) {
                this.skinProgressReal += UserGD.levelSkinConfig[0];
                if (this.skinProgressReal > this.skinProgressNeed) {
                    this.skinProgressReal = this.skinProgressNeed;
                }
                this.skinUnlocked = SkinManager.getInstance().setLevelProgress(this.skinProgressReal);
                UserGD.levelSkinIntro && UserGD.levelSkinIntro.refreshView();
            }
            if (SdkCenter.getInstannce().isSyyx()) {
                this.isVideoAccelerate = true;
            }
            else if (SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ()) {
                if (UserGD.openSkinVideoAddition &&
                    !(UserGD.openSkinBannerAddition &&
                        UserGD.playCount >= UserGD.openBtnConfig[0] && ((UserGD.playCount - UserGD.openBtnConfig[0]) % (UserGD.openBtnConfig[1] + 1) == 0))) {
                    this.isVideoAccelerate = true;
                }
            }
            if (needAccelerate) {
                if (this.isVideoAccelerate) {
                    this.wrongClickTarget = (this.skinProgressReal + UserGD.levelSkinConfig[2] > this.skinProgressNeed) ? this.skinProgressNeed : (this.skinProgressReal + UserGD.levelSkinConfig[2]);
                }
                else {
                    this.wrongClickTarget = (this.skinProgressReal + UserGD.levelSkinConfig[1] > this.skinProgressNeed) ? this.skinProgressNeed : (this.skinProgressReal + UserGD.levelSkinConfig[1]);
                }
            }
            if (SdkCenter.getInstannce().isQQ()) {
                this.hideAdDuration = 2000;
            }
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            UiUtils.resetBottom(this.content);
            if (!SdkCenter.getInstannce().isSyyx() && UserGD.isIphoneX) {
                this.imgRoleBg.scale(2, 2, true);
                this.imgRoleFg.scale(2, 2, true);
            }
            if (SdkCenter.getInstannce().isSyyx()) {
                if (!UserGD.isIphoneX) {
                    this.content.bottom += 300 * UiUtils.getClientScale();
                    this.imgTitle.y = 100;
                    this.boxRoleShow.centerY = 50;
                }
                else {
                    this.content.bottom += 350 * UiUtils.getClientScale();
                    this.boxRoleShow.centerY = 50;
                }
            }
            else if (this.isVideoAccelerate) {
                if (SdkCenter.getInstannce().isQQ()) {
                    if (UserGD.isIphoneX) {
                        this.content.height -= 70 * Laya.stage.clientScaleY;
                    }
                    else {
                        this.content.bottom += 80 * Laya.stage.clientScaleY;
                    }
                }
                else {
                    this.content.bottom += 150 * Laya.stage.clientScaleY;
                }
            }
            this.boxBtnClose.top = Globals.boxCoin.top + 200 * UiUtils.getClientScale();
        }
        refreshRoleProgress(progress) {
            let realProgress = progress / this.skinProgressNeed;
            this.imgRoleFgProgress.graphics.clear();
            this.imgRoleFgProgress.graphics.drawRect(0, this.imgRoleFgProgress.height * (1 - realProgress), this.imgRoleFgProgress.width, this.imgRoleFgProgress.height * realProgress, "#ff0000");
        }
        initBoxRoleShow() {
            this.imgRoleBg.skin = "game/skins/skin_" + SkinManager.getInstance().progress.indexLevelUnlocking + "_m.png";
            this.imgRoleFg.skin = "game/skins/skin_" + SkinManager.getInstance().progress.indexLevelUnlocking + ".png";
            this.imgRoleFgProgress.size(this.imgRoleFg.width, this.imgRoleFg.height);
            this.refreshRoleProgress(this.skinProgressLast);
        }
        refreshProgressBar(progress) {
            this.lbLevelUnlockProgress.text = progress.toFixed(1) + "%";
            this.imgProgressBarMask.graphics.clear();
            this.imgProgressBarMask.graphics.drawRect(0, 0, this.imgProgressBarMask.width * progress / this.skinProgressNeed, this.imgProgressBarMask.height, "#ff0000");
            this.imgProgressBarSign.x = this.imgProgressBarMask.width * progress / this.skinProgressNeed;
        }
        initBoxBtnProgress() {
            this.boxAccelerate.visible = false;
            this.boxVideoAccelerate.visible = false;
            this.refreshProgressBar(this.skinProgressLast);
        }
        initBoxBtnClose() {
            this.boxBtnClose.visible = false;
        }
        refreshProgress() {
            this.refreshRoleProgress(this.skinProgressNow);
            this.refreshProgressBar(this.skinProgressNow);
        }
        energyDecrement() {
            if (this.clickCount > 0) {
                if (this.skinProgressNow > this.skinProgressLast) {
                    this.skinProgressNow -= (this.perClickAdd / 5);
                    this.refreshProgress();
                }
            }
        }
        stopDecrease() {
            Laya.timer.clear(this, this.energyDecrement);
        }
        receiveReward(giveReward) {
            if (!this.needAccelerate) {
                return;
            }
            let self = this;
            this.isReceive = true;
            UserGD.canShowBanner = true;
            this.stopDecrease();
            if (giveReward) {
                this.gotWrongClickReward = true;
                this.skinProgressReal = this.wrongClickTarget;
                this.skinUnlocked = SkinManager.getInstance().setLevelProgress(this.skinProgressReal);
                UserGD.levelSkinIntro && UserGD.levelSkinIntro.refreshView();
                this.progress = true;
                this.needAccelerate = false;
                this.skinProgressNow = this.skinProgressLast;
                this.boxAccelerate.visible = false;
                this.boxVideoAccelerate.visible = false;
                this.checkProgressAnim();
                if (!this.isVideoAccelerate) {
                    UiUtils.showLayaToast("Success,Add Progress " + UserGD.levelSkinConfig[1] + "%");
                }
            }
            else {
                Laya.timer.once(1500, this, () => {
                    self.eventClose();
                });
            }
        }
        attractClickForWx() {
            this.clickCount += 1;
            if (this.clickCount == 1) {
                Laya.timer.loop(100, this, this.energyDecrement);
            }
            this.skinProgressNow += this.perClickAdd;
            if (this.skinProgressNow > this.wrongClickTarget) {
                this.skinProgressNow = this.wrongClickTarget;
            }
            this.refreshProgress();
            let rate = 100 * (this.skinProgressNow - this.skinProgressReal) / (this.wrongClickTarget - this.skinProgressReal);
            if (rate > this.percent - 1 && this.adCount > 0) {
                UserGD.canShowBanner = true;
                this.isShowingBanner = true;
                let self = this;
                SdkCenter.getInstannce().showBanner(true);
                Laya.timer.once(this.hideAdDuration, this, function s() {
                    self.isShowingBanner = false;
                    UserGD.canShowBanner = false;
                    SdkCenter.getInstannce().hideBanner();
                });
                this.adCount--;
                this.percent = 60 + Math.floor(Math.random() * 25);
            }
            if (this.isReceive) {
                return;
            }
            if (this.skinProgressNow >= this.wrongClickTarget) {
                UserGD.canShowBanner = true;
                this.receiveReward();
            }
        }
        attractClickForQQ() {
            this.clickCount += 1;
            if (this.clickCount == 1) {
                Laya.timer.loop(100, this, this.energyDecrement);
            }
            this.skinProgressNow += this.perClickAdd;
            if (this.skinProgressNow > this.wrongClickTarget) {
                this.skinProgressNow = this.wrongClickTarget;
            }
            this.refreshProgress();
            let rate = 100 * (this.skinProgressNow - this.skinProgressReal) / (this.wrongClickTarget - this.skinProgressReal);
            if (rate > this.percent - 1 && this.adCount > 0 && !this.isShowingBanner) {
                UserGD.canShowBanner = true;
                this.isShowingBanner = true;
                let self = this;
                SdkCenter.getInstannce().showBanner(true);
                Laya.timer.once(this.hideAdDuration, this, function s() {
                    self.isShowingBanner = false;
                    if (Laya.Browser.onIOS) {
                        if (!self.isReceive) {
                            self.receiveReward(true);
                        }
                    }
                    else {
                        UserGD.canShowBanner = false;
                        SdkCenter.getInstannce().hideBanner();
                    }
                });
                this.adCount--;
                this.percent = 60 + Math.floor(Math.random() * 25);
            }
            if (this.isReceive) {
                return;
            }
            if (this.skinProgressNow >= this.wrongClickTarget) {
                UserGD.canShowBanner = true;
                this.receiveReward();
            }
        }
        attractClick() {
            this.clickCount += 1;
            if (this.clickCount == 1) {
                Laya.timer.loop(100, this, this.energyDecrement);
            }
            this.skinProgressNow += this.perClickAdd;
            if (this.skinProgressNow > this.wrongClickTarget) {
                this.skinProgressNow = this.wrongClickTarget;
            }
            let rate = 100 * (this.skinProgressNow - this.skinProgressReal) / (this.wrongClickTarget - this.skinProgressReal);
            this.refreshProgress();
            if (this.isReceive) {
                return;
            }
            var ran = Math.random();
            if (ran <= 0.3) {
                if (rate > 0.7) {
                    rate = 0.7;
                    this.receiveReward();
                }
            }
            else if (ran <= 0.6) {
                if (rate > 0.8) {
                    rate = 0.8;
                    this.receiveReward();
                }
            }
            else if (ran <= 0.9) {
                if (rate > 0.9) {
                    rate = 0.9;
                    this.receiveReward();
                }
            }
            else {
                if (rate > 0.95) {
                    rate = 1;
                    this.receiveReward();
                }
            }
        }
        initBoxAccelerate() {
            this.lbBoxAccelerate.text = "Tips: Click Add Progress " + UserGD.levelSkinConfig[1] + "%";
            this.perClickAdd = (this.wrongClickTarget - this.skinProgressReal) / 25;
            this.percent = 15 + Math.floor(Math.random() * 25);
            UiUtils.scaleNode(this.btnProgress);
            if (SdkCenter.getInstannce().isWx()) {
                PulCenter.clickEvent(this.btnProgress, this, this.attractClickForWx, null, true, false);
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                PulCenter.clickEvent(this.btnProgress, this, this.attractClickForQQ, null, true, false);
            }
            else {
                PulCenter.clickEvent(this.btnProgress, this, this.attractClick, null, true, false);
            }
        }
        videoAccelerate() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "cgpf" : null, () => {
                UiUtils.showLayaToast("Success,Get " + UserGD.levelSkinConfig[2] + "%");
                self.receiveReward(true);
            }, () => {
                UiUtils.showLayaToast("No Video");
            }, () => {
                UiUtils.showLayaToast("Not Finish");
            });
        }
        initBoxVideoAccelerate() {
            if (SdkCenter.getInstannce().isSyyx()) {
                this.icBtnVideoAcc.skin = "game/ic_video3.png";
            }
            if ((SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ())
                && UserGD.isOfficial
                && (UserGD.showExtension || UserGD.sceneSwitch)
                && UserGD.videoMarkSwitch) {
                this.icBtnVideoAcc.visible = false;
            }
            else {
                this.icBtnVideoAcc.visible = true;
            }
            if (SdkCenter.getInstannce().isWx()) {
                this.lbBtnGiveUpAcc.text = "Next";
                let tempCenterX = this.boxBtnGiveUpAcc.centerX;
                this.boxBtnGiveUpAcc.centerX = this.boxBtnVideoAcc.centerX;
                this.boxBtnVideoAcc.centerX = tempCenterX;
                UiUtils.scaleNodeV2(this.boxBtnVideoAcc);
            }
            this.lbBoxVideoAcc.text = "Tips: Click Add Progress " + UserGD.levelSkinConfig[2] + "%";
            let self = this;
            PulCenter.clickEvent(this.boxBtnVideoAcc, this, () => {
                self.videoAccelerate();
            }, null);
            PulCenter.clickEvent(this.boxBtnGiveUpAcc, this, () => {
                self.eventClose();
            }, null);
        }
        checkProgressAnim() {
            if (this.progress) {
                this.progress = false;
                if (this.skinProgressNow != this.skinProgressReal) {
                    let self = this;
                    Laya.Tween.to(this, {
                        skinProgressNow: this.skinProgressReal,
                        update: Laya.Handler.create(this, this.refreshProgress, null, false)
                    }, 2000, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                        self.skinProgressLast = self.skinProgressNow;
                        self.checkProgressAnim();
                    }), 500);
                }
                else {
                    this.boxBtnClose.visible = true;
                }
            }
            else {
                if (!this.skinUnlocked && this.needAccelerate) {
                    if (this.isVideoAccelerate) {
                        this.boxVideoAccelerate.visible = true;
                        this.initBoxVideoAccelerate();
                    }
                    else {
                        this.boxAccelerate.visible = true;
                        this.initBoxAccelerate();
                        let self = this;
                        Laya.timer.once(5000, this, () => {
                            self.boxBtnClose.visible = true;
                        });
                    }
                }
                else if (this.skinUnlocked) {
                    if (!this.gotWrongClickReward) {
                        UserGD.skipWrongClickAd = false;
                    }
                    let closeCallback = this.closeCallback;
                    this.closeCallback = null;
                    this.eventClose();
                    Laya.stage.addChild(new GetLevelSkinDialog(closeCallback));
                }
                else {
                    this.boxBtnClose.visible = true;
                    let timeToClose = 3000;
                    Laya.timer.once(timeToClose, this, this.eventClose);
                }
            }
        }
        initView() {
            this.initBoxRoleShow();
            this.initBoxBtnProgress();
            this.initBoxBtnClose();
            this.checkProgressAnim();
            if (SdkCenter.getInstannce().isSyyx()) {
                if (SdkCenter.getInstannce().isVivo()) {
                    SdkCenter.getInstannce().showInterstitialAd(null, null, function () {
                    }, function () {
                        SdkCenter.getInstannce().showInterstitialAd(null, null, function () {
                        }, function () {
                        }, false);
                    });
                }
                else {
                }
            }
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.boxBtnClose, this, () => {
                self.eventClose();
            }, null);
        }
        eventClose() {
            this.onDisable();
            this.removeSelf();
            PulCenter.checkCanShowBanner();
            if (this.closeCallback) {
                this.closeCallback();
            }
        }
    }

    class HorizontalNavListMiddle extends ui.sdk.HorizontalScrollListMiddleUI {
        constructor() {
            super();
            this.bgSkinStatus = [false, false, false, false, false, false, false, false, false];
            this.type = false;
            this.scrollLeft = false;
            this.lastStartIndex = 6;
            this.rowNum = 2;
            this.isScroll = false;
            this.isClicked = false;
            this.type = ++UserGD.openResultCount % 2 == 0;
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initAdArr();
            (this.type) ? this.initForScroll() : this.initForShake();
        }
        onDisable() {
            this.isScroll = false;
            Laya.Tween.clearAll(this.mListAd);
            Laya.timer.clearAll(this);
            for (let i in this.mListAd.cells) {
                let img = this.mListAd.cells[i].getChildByName("imgIcon");
                UiUtils.clearFrameAnimProcess(img);
            }
        }
        onDestroy() {
            Laya.timer.clearAll(this);
        }
        initLayout() {
            if (!UserGD.isIphoneX) {
                this.height = 400;
                this.bg.height = 400;
                this.mListAd.scale(0.8, 0.8, true);
            }
        }
        initView() {
            if (this.type) {
                this.mListAd.hScrollBarSkin = "";
                this.mListAd.renderHandler = new Laya.Handler(this, this.updateItem);
            }
            else {
                this.mListAd.renderHandler = new Laya.Handler(this, this.updateItem);
            }
        }
        scrollList() {
            var self = this;
            var index = self.mListAd.startIndex;
            if (index >= self.mListAd.array.length - self.lastStartIndex) {
                this.scrollLeft = true;
            }
            else if (index <= 0) {
                this.scrollLeft = false;
            }
            if (this.scrollLeft) {
                index -= this.rowNum;
            }
            else {
                index += this.rowNum;
            }
            self.mListAd.tweenTo(index, 3000, Laya.Handler.create(this, function () {
                if (self.isScroll && index > 0 && (index < self.mListAd.array.length - self.lastStartIndex)) {
                    self.scrollList();
                }
                else if (self.isScroll && (index >= self.mListAd.array.length - self.lastStartIndex)) {
                    self.scrollLeft = true;
                    Laya.timer.once(2000, this, self.scrollList);
                }
                else if (self.isScroll && (index <= 0)) {
                    self.scrollLeft = false;
                    Laya.timer.once(2000, this, self.scrollList);
                }
            }));
        }
        startScroll() {
            this.isScroll = true;
            this.scrollList();
        }
        initForScroll() {
            var self = this;
            this.mListAd.array = this.dataArr;
            this.mListAd.on(Laya.Event.MOUSE_DOWN, this, function () {
                Laya.timer.clear(self, self.startScroll);
                self.isScroll = false;
                Laya.timer.once(2000, self, self.startScroll);
            });
            this.mListAd.on(Laya.Event.MOUSE_UP, this, function () {
                Laya.timer.clear(self, self.startScroll);
                Laya.timer.once(2000, self, self.startScroll);
            });
            if (this.mListAd.startIndex == 0) {
                Laya.timer.once(2000, self, self.startScroll);
            }
            else {
                this.mListAd.tweenTo(0, 300, Laya.Handler.create(this, function () {
                    Laya.timer.once(2000, self, self.startScroll);
                }));
            }
        }
        initForShake() {
            this.mListAd.array = this.dataArr;
            let self = this;
            Laya.timer.loop(6000, this, function s() {
                Laya.timer.once(4000, self, self.refreshList);
            });
            Laya.timer.once(4000, self, self.refreshList);
        }
        updateItem(cell, index) {
            let data = cell.dataSource;
            let icon = cell.getChildByName("imgIcon");
            var skeFinger = cell.getChildByName("skeFinger");
            if (SdkCenter.getInstannce().isLw()) {
                icon.skin = data.icon;
            }
            else {
                UiUtils.checkFrameAnimProcess(icon, data);
            }
            if (data.istop == "yes") {
                skeFinger.visible = true;
            }
            else {
                skeFinger.visible = false;
            }
            let self = this;
            cell.offAll();
            cell.on(Laya.Event.CLICK, this, () => {
                if (!self.isClicked) {
                    self.isClicked = true;
                    SdkCenter.getInstannce().navigateToMiniProgram(data, () => {
                        self.isClicked = false;
                        self.isScroll = false;
                        Laya.timer.clearAll(self);
                        self.initAdArr();
                        if (self.dataArr.length == 0) {
                            self.visible = false;
                        }
                        else {
                            if (self.type) {
                                self.initForScroll();
                            }
                            else {
                                self.initForShake();
                            }
                        }
                    }, () => {
                        self.isClicked = false;
                        if (SdkCenter.getInstannce().isLw()) {
                            Laya.stage.addChild(new FullAd(null, () => {
                                SdkCenter.getInstannce().showBanner();
                            }));
                        }
                    }, () => {
                        self.isClicked = false;
                    });
                }
            });
        }
        initAdArr() {
            let tempArray;
            if (SdkCenter.getInstannce().isLw()) {
                tempArray = PulCenter.getWxLwInferenceData("result");
                tempArray = Utils$1.shuffeArr(tempArray);
                console.log("结算页互推数据", tempArray);
                for (let thisStatus in this.bgSkinStatus) {
                    this.bgSkinStatus[thisStatus] = false;
                }
            }
            else {
                tempArray = Utils$1.shuffeArr(UserGD.navAdNotJumpedArray);
                for (let thisStatus in this.bgSkinStatus) {
                    this.bgSkinStatus[thisStatus] = false;
                }
            }
            this.dataArr = tempArray;
        }
        shakeList() {
        }
        refreshList() {
            var self = this;
            for (let i = 0; i < self.mListAd.cells.length; i++) {
                const ele = self.mListAd.cells[i];
                UiUtils.shrinkNode(ele);
            }
            Laya.timer.once(300, this, function () {
                self.initAdArr();
                self.mListAd.array = self.dataArr;
                self.mListAd.refresh();
            });
        }
        eventDestroy() {
            Laya.Tween.clearAll(this.mListAd);
            Laya.timer.clearAll(this);
            this.destroy();
        }
    }

    class GetRewardViewDialogs extends ui.dialogs.GetRewardViewDialogsUI {
        constructor(isWin, watchedVideo, coinReward) {
            super();
            this.VIDEO_MULTIPLE = 5;
            this.isWin = isWin;
            this.watchedVideo = watchedVideo;
            this.coinReward = coinReward;
            this.name = SelfGameConfig.NAME_GET_REWARD_VIEW_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_REWARD_DIALOG;
        }
        eventClose() {
            let self = this;
            let callback = () => {
                self.onDisable();
                if (self.isWin || self.watchedVideo) {
                    Utils.dispatchEvent(SelfGameConfig.EVENT_NEXT_STAGE, true);
                }
                else {
                    Utils.dispatchEvent(SelfGameConfig.EVENT_RESET_STAGE, true);
                }
                SdkCenter.getInstannce().hideBlockAd(self.isWin ? "cghd" : "sbhd");
                self.removeSelf();
            };
            if (SdkCenter.getInstannce().isLw()) {
                PulCenter.checkToShowInference(1, callback);
            }
            else {
                callback();
            }
        }
        onAwake() {
            this.initLayout();
            this.initView();
            this.initListener();
            if (SdkCenter.getInstannce().isVivo()) {
                SdkCenter.getInstannce().showInterstitialAd(null, null, function () {
                }, function () {
                    SdkCenter.getInstannce().showInterstitialAd(null, null, function () {
                    }, function () {
                        SdkCenter.getInstannce().showBanner();
                    }, false);
                });
            }
            else {
            }
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            if (!SdkCenter.getInstannce().isSyyx()) {
                UiUtils.resetBottom(this.content);
            }
            if (SdkCenter.getInstannce().isQQ()) {
                this.btnVideoGet.bottom = 20;
                this.btnNormalGet.bottom = 170;
            }
        }
        initBtnNormalGet() {
            this.lbNormalGet.text = "" + this.coinReward;
        }
        initBtnVideoGet() {
            if (this.isWin && this.watchedVideo) {
                this.btnVideoGet.visible = false;
                return;
            }
            this.mLbVideoMultiple.text = "x" + this.VIDEO_MULTIPLE;
            this.lbVideoGet.text = "" + (this.coinReward * this.VIDEO_MULTIPLE);
            let ic_btn = this.btnVideoGet.getChildByName("ic_btn");
            if (SdkCenter.getInstannce().isTT()) {
                ic_btn.skin = "game/ic_video.png";
            }
            else if (SdkCenter.getInstannce().isSyyx()) {
                this.mImgVideoGold.skin = "game/ic_video3.png";
                let tempBottom = this.btnVideoGet.bottom;
                this.btnVideoGet.bottom = this.btnNormalGet.bottom;
                this.btnNormalGet.bottom = tempBottom;
            }
            else {
                if (SdkCenter.getInstannce().isWx() && UserGD.isOfficial && UserGD.videoMarkSwitch && (UserGD.showExtension || UserGD.sceneSwitch)) {
                    this.mImgVideoGold.visible = false;
                }
                else if (SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && UserGD.videoMarkSwitch && (UserGD.showExtension || UserGD.sceneSwitch)) {
                    this.mImgVideoGold.visible = false;
                }
                this.mImgVideoGold.skin = "game/ic_video2.png";
            }
        }
        initView() {
            this.mLbNormalPrize.text = "" + this.coinReward;
            this.initBtnNormalGet();
            if (!SdkCenter.getInstannce().isTT()) {
                this.mImgVideoGold.visible = true;
            }
            this.initBtnVideoGet();
            if (!SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.playCount % 2 == 1) {
                    let tempBottom = this.btnVideoGet.bottom;
                    this.btnVideoGet.bottom = this.btnNormalGet.bottom;
                    this.btnNormalGet.bottom = tempBottom;
                    UiUtils.scaleNode(this.btnVideoGet);
                }
                else {
                    UiUtils.scaleNode(this.btnNormalGet);
                }
            }
            this.initViewLw();
            SdkCenter.getInstannce().showBlockAd(this.isWin ? "cghd" : "sbhd");
        }
        initViewLw() {
            if (SdkCenter.getInstannce().isLw()) {
                UiUtils.resetBottom(this.content);
                this.mLbNormalPrize.visible = false;
                this.imgCoin.visible = false;
                if (PulCenter.checkLwCondition("inference") && PulCenter.checkLwCondition("result")) {
                    let inference = this.addChild(new HorizontalNavListMiddle());
                    inference.centerX = 0;
                    if (UiUtils.isAllScreen()) {
                        inference.centerY = -150;
                    }
                    else {
                        inference.centerY = -130;
                    }
                }
                if (!PulCenter.checkLwCondition("videoMark")) {
                    this.mImgVideoGold.visible = true;
                }
                else {
                    this.mImgVideoGold.visible = false;
                }
                SdkCenter.getInstannce().showInterstitialAd();
            }
        }
        getCoin(isMulti) {
            this.btnNormalGet.offAll();
            this.btnVideoGet.offAll();
            this.mBtnReceive.offAll();
            if (isMulti) {
                Globals.boxCoin.showAddCoins(this.coinReward * this.VIDEO_MULTIPLE);
            }
            else {
                Globals.boxCoin.showAddCoins(this.coinReward);
            }
        }
        videoGetCoin() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? (this.isWin ? "cghd" : "sbhd") : null, () => {
                self.getCoin(true);
            }, () => {
                UiUtils.showLayaToast("No video");
                self.getCoin();
            }, () => {
                UiUtils.showLayaToast("Not Finish");
                self.getCoin();
            });
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.btnNormalGet, this, () => {
                self.getCoin();
            }, null);
            PulCenter.clickEvent(this.btnVideoGet, this, () => {
                self.videoGetCoin();
            }, null);
            PulCenter.clickEvent(this.mBtnReceive, this, () => {
                self.getCoin();
            }, null);
        }
    }

    class ResultViewDialog extends ui.dialogs.ResultViewDialogUI {
        constructor(data) {
            super();
            this.VIDEO_MULTIPLE = 5;
            this.titleSkins = [
                "game/lb_success.png",
                "game/lb_fail.png"
            ];
            this.icVideoSKins = [
                "game/ic_gold.png",
                "game/ic_video.png",
                "game/ic_video2.png",
                "game/ic_video3.png"
            ];
            this.name = SelfGameConfig.NAME_RESULT_VIEW_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
            this.isWin = data[0];
            this.multi = data[1];
            this.numGot = data[2];
            this.coinReward = data[3];
            if (!this.isWin && this.numGot == 0) {
                if (this.coinReward < 1) {
                    this.coinReward = 1;
                }
                if (this.coinReward < 20) {
                    this.coinReward *= 2;
                }
            }
            else {
                this.coinReward = 50;
            }
            --this.numGot;
        }
        onAwake() {
            var self = this;
            this.initLayout();
            this.initData();
            this.initView();
            this.initListener();
            if (this.isWin) {
                SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_SETTLEMENT, 1, { "lv": this.mCurrentLevel });
            }
            else {
                SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_SETTLEMENT, 6, { "lv": this.mCurrentLevel });
            }
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_CHAPTER, this.mCurrentLevel, { "result": this.isWin });
            if (SdkCenter.getInstannce().isSyyx()) {
                var b = SdkCenter.getInstannce().checkInnerInterstitialNative();
                this.mBtnNext.visible = false;
                this.mNodeInnerInterstitia.visible = b;
                this.mBtnLookAd.visible = false;
                this.mBtnVivoLookAd.visible = false;
                if (b) {
                    if (SdkCenter.getInstannce().isOppo()) {
                        this.content.bottom += 160;
                    }
                    else {
                        this.content.bottom += 220;
                    }
                    this.mBtnNext.visible = false;
                    this.boxBtnVideoSkip.visible = false;
                    this.boxBtnVideoReceive.visible = false;
                    this.mBtnLookAd.visible = SdkCenter.getInstannce().isOppo();
                    this.mBtnVivoLookAd.visible = SdkCenter.getInstannce().isVivo();
                    SdkCenter.getInstannce().showInnerInterstitialNative(this.mNodeParentNative, null, null, function () {
                        if (self.mBtnLookAd) {
                            self.mBtnLookAd.visible = false;
                            self.mBtnVivoLookAd.visible = false;
                        }
                    });
                }
                else if (SdkCenter.getInstannce().isSupportGamesModal()) {
                    SdkCenter.getInstannce().showGameBannerBox();
                }
                else {
                }
                if (SdkCenter.getInstannce().isVivo()) {
                    this.boxBtnRestart.visible = false;
                    this.boxBtnNormalReceive.visible = false;
                    Laya.timer.once(SdkCenter.getInstannce().getCloseDelayTime(), this, function () {
                        self.boxBtnRestart.visible = !self.isWin;
                        self.boxBtnNormalReceive.visible = self.isWin;
                    });
                }
            }
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            if (!SdkCenter.getInstannce().isSyyx()) {
                UiUtils.resetBottom(this.content);
            }
        }
        initData() {
            this.mCurrentLevel = this.isWin ? DataManager.getTotalLevel() : (DataManager.getTotalLevel() + 1);
        }
        initBoxTop() {
            this.mLbLevel.text = "LV:" + this.mCurrentLevel + "";
            this.imgTitle.skin = this.titleSkins[this.isWin ? 0 : 1];
        }
        initBoxMiddle() {
            this.boxMiddle.visible = this.isWin;
            if (this.isWin) {
                this.mLbCount.text = this.numGot + " / " + Globals.currentRolesConfigNum;
                this.mLbNormalPrize.text = "+" + this.coinReward;
                this.mLbNormalMultiple.text = "x" + this.multi;
            }
        }
        initBtnVideoReceive() {
            this.mLbVideoMultiple.text = "x" + this.VIDEO_MULTIPLE;
            this.mLbVideoPrize.text = "+" + Math.floor(this.coinReward * this.VIDEO_MULTIPLE * this.multi);
            let icVideo = this.boxBtnVideoReceive.getChildByName("icVideo");
            if (SdkCenter.getInstannce().isTT()) {
                icVideo.skin = this.icVideoSKins[1];
            }
            else {
                if (SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch
                    || SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch
                    || SdkCenter.getInstannce().isLw() && PulCenter.checkLwCondition("videoMark")) {
                    return;
                }
                let aIcVideo = new Laya.Image(this.icVideoSKins[2]);
                this.boxBtnVideoReceive.addChild(aIcVideo);
                aIcVideo.left = -10;
                aIcVideo.top = -10;
                if (SdkCenter.getInstannce().isSyyx()) {
                    aIcVideo.skin = this.icVideoSKins[3];
                }
            }
        }
        initBtnNormalReceive() {
            this.mLbTotalPrize.text = "+" + Math.floor(this.coinReward * this.multi);
        }
        initBtnNext() {
        }
        initBoxSuccess() {
            OrthogonalSceneManager.initResultScene();
            this.initBtnVideoReceive();
            this.initBtnNormalReceive();
            this.initBtnNext();
            if (!SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.playCount % 2 == 1) {
                    let tempBottom = this.boxBtnNormalReceive.bottom;
                    this.boxBtnNormalReceive.bottom = this.boxBtnVideoReceive.bottom;
                    this.boxBtnVideoReceive.bottom = tempBottom;
                    UiUtils.scaleNode(this.boxBtnVideoReceive);
                }
                else {
                    UiUtils.scaleNode(this.boxBtnNormalReceive);
                }
            }
        }
        initBtnVideoSkip() {
            let icVideo = this.boxBtnVideoSkip.getChildByName("icVideo");
            let label = this.boxBtnVideoSkip.getChildByName("label");
            if (SdkCenter.getInstannce().isTT()) {
            }
            else {
                if (SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch
                    || SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.videoMarkSwitch) {
                    icVideo.visible = false;
                }
                icVideo.skin = this.icVideoSKins[2];
                icVideo.centerX = NaN;
                icVideo.centerY = NaN;
                icVideo.left = -10;
                icVideo.top = -10;
                label.centerX = 0;
                if (SdkCenter.getInstannce().isSyyx()) {
                    icVideo.skin = this.icVideoSKins[3];
                }
            }
        }
        initBtnRestart() {
        }
        initBoxFail() {
            this.initBtnVideoSkip();
            this.initBtnRestart();
            if (!SdkCenter.getInstannce().isSyyx()) {
                if (UserGD.playCount % 2 == 1) {
                    let tempBottom = this.boxBtnRestart.bottom;
                    this.boxBtnRestart.bottom = this.boxBtnVideoSkip.bottom;
                    this.boxBtnVideoSkip.bottom = tempBottom;
                    UiUtils.scaleNode(this.boxBtnVideoSkip);
                }
                else {
                    UiUtils.scaleNode(this.boxBtnRestart);
                }
            }
        }
        initBoxMoreGame() {
            if (!SdkCenter.getInstannce().isQQ()) {
                this.boxMoreGame.visible = false;
            }
            else {
                UiUtils.shakeExMark(this.icExmarkMoreGame, this);
                let self = this;
                Laya.timer.loop(4000, this, () => {
                    UiUtils.shakeExMark(self.icExmarkMoreGame, self);
                });
            }
        }
        initView() {
            this.initBoxTop();
            this.initBoxMiddle();
            this.mNodeFail.visible = !this.isWin;
            this.mNodeSuccess.visible = this.isWin;
            this.mNodeFail.bottom = 220;
            this.mNodeSuccess.bottom = 220;
            this.mBtnNext.visible = false;
            if (this.isWin) {
                this.initBoxSuccess();
            }
            else {
                this.initBoxFail();
            }
            this.initViewLw();
            this.initBoxMoreGame();
            SdkCenter.getInstannce().showBlockAd(this.isWin ? "cgcg" : "cgsb");
        }
        initViewLw() {
            if (SdkCenter.getInstannce().isLw()) {
                PulCenter.hideDoubleAd();
                if (PulCenter.checkLwCondition("inference") && PulCenter.checkLwCondition("result")) {
                    let inference = this.addChild(new HorizontalNavListMiddle());
                    inference.centerX = 0;
                    if (UiUtils.isAllScreen()) {
                        inference.centerY = -150;
                    }
                    else {
                        inference.centerY = -130;
                    }
                }
                let icVideo2 = this.boxBtnVideoSkip.getChildByName("icVideo");
                if (!PulCenter.checkLwCondition("videoMark")) {
                    icVideo2.visible = true;
                }
                else {
                    icVideo2.visible = false;
                }
            }
        }
        videoReceive() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "cgcg" : null, () => {
                self.receive(true);
            }, () => {
                UiUtils.showLayaToast("No video");
                self.receive();
            }, () => {
                self.receive();
            });
        }
        onNextClick() {
            this.receive(null, true);
        }
        receive(isVideoMulti, clickNormal) {
            if (SdkCenter.getInstannce().isSyyx()) {
                let self = this;
                let callback = () => {
                    SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_SETTLEMENT, 2, { "lv": self.mCurrentLevel });
                    self.eventClose();
                    Utils.dispatchEvent(SelfGameConfig.EVENT_NEXT_STAGE, true);
                };
                if (isVideoMulti) {
                    Globals.boxCoin.showAddCoins(Math.floor(this.coinReward * this.VIDEO_MULTIPLE * this.multi), null, callback);
                }
                else {
                    if (clickNormal) {
                        SdkCenter.getInstannce().setOnClickInnerInterstitialBtn(() => {
                            Globals.boxCoin.showAddCoins(Math.floor(self.coinReward * self.multi), null, callback);
                        });
                    }
                    else {
                        Globals.boxCoin.showAddCoins(Math.floor(this.coinReward * this.multi), null, callback);
                    }
                }
            }
            else {
                SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_SETTLEMENT, 2, { "lv": this.mCurrentLevel });
                this.boxBtnVideoReceive.offAll(Laya.Event.CLICK);
                this.boxBtnNormalReceive.offAll(Laya.Event.CLICK);
                if (isVideoMulti) {
                    Laya.stage.addChild(new GetRewardViewDialogs(true, true, Math.floor(this.coinReward * this.VIDEO_MULTIPLE * this.multi)));
                }
                else {
                    Laya.stage.addChild(new GetRewardViewDialogs(true, false, Math.floor(this.coinReward * this.multi)));
                }
                this.eventClose();
            }
        }
        skip() {
            this.boxBtnVideoSkip.offAll(Laya.Event.CLICK);
            this.boxBtnRestart.offAll(Laya.Event.CLICK);
            DataManager.addCurrentLevel();
            if (SdkCenter.getInstannce().isSyyx()) {
                let self = this;
                let callback = () => {
                    self.eventClose();
                    Utils.dispatchEvent(SelfGameConfig.EVENT_NEXT_STAGE, true);
                };
                Globals.boxCoin.showAddCoins(Math.floor(this.coinReward * this.multi), null, callback);
            }
            else {
                Laya.stage.addChild(new GetRewardViewDialogs(false, true, Math.floor(this.coinReward * this.multi)));
                this.eventClose();
            }
        }
        videoSkip() {
            let self = this;
            SdkCenter.getInstannce().showRewardedVideoAd(SdkCenter.getInstannce().isQQ() ? "cgsb" : null, () => {
                self.skip();
            }, () => {
                UiUtils.showLayaToast("No video");
                self.restart();
            }, () => {
                self.restart();
            });
        }
        onLookAdClick() {
            SdkCenter.getInstannce().clickNativeAd();
        }
        eventClose() {
            OrthogonalSceneManager.clearResultScene();
            this.onDisable();
            SdkCenter.getInstannce().hideBlockAd(this.isWin ? "cgcg" : "cgsb");
            this.removeSelf();
            SdkCenter.getInstannce().hideInnerInterstitialNative();
            SdkCenter.getInstannce().hideGameBannerBox();
        }
        restart() {
            if (SdkCenter.getInstannce().isSyyx()) {
                let self = this;
                let callback = () => {
                    SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_SETTLEMENT, 7, { "lv": self.mCurrentLevel });
                    self.eventClose();
                    Utils.dispatchEvent(SelfGameConfig.EVENT_RESET_STAGE, true);
                };
                SdkCenter.getInstannce().setOnClickInnerInterstitialBtn(() => {
                    Globals.boxCoin.showAddCoins(Math.floor(self.coinReward * self.multi), null, callback);
                });
            }
            else {
                this.boxBtnVideoSkip.offAll(Laya.Event.CLICK);
                this.boxBtnRestart.offAll(Laya.Event.CLICK);
                SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_SETTLEMENT, 7, { "lv": this.mCurrentLevel });
                Laya.stage.addChild(new GetRewardViewDialogs(false, false, Math.floor(this.coinReward * this.multi)));
                this.eventClose();
            }
        }
        onBtnMoreGameClick() {
            let self = this;
            SdkCenter.getInstannce().showAppBox(() => { return (self.isWin ? "cgcg" : "cgsb"); });
        }
        initListener() {
            let self = this;
            PulCenter.clickEvent(this.boxBtnVideoReceive, this, () => {
                self.videoReceive();
            }, null);
            PulCenter.clickEvent(this.boxBtnNormalReceive, this, () => {
                self.receive(null, true);
            }, null);
            PulCenter.clickEvent(this.mBtnNext, this, () => {
                self.onNextClick();
            }, null);
            PulCenter.clickEvent(this.boxBtnVideoSkip, this, () => {
                self.videoSkip();
            }, null);
            PulCenter.clickEvent(this.boxBtnRestart, this, () => {
                self.restart();
            }, null);
            PulCenter.clickEvent(this.mBtnLookAd, this, () => {
                self.onLookAdClick();
            }, null);
            PulCenter.clickEvent(this.mBtnVivoLookAd, this, () => {
                self.onLookAdClick();
            }, null);
            PulCenter.clickEvent(this.boxMoreGame, this, () => {
                self.onBtnMoreGameClick();
            }, null);
        }
    }

    class BombCtrl extends Laya.Script3D {
        onAwake() {
            this.initModel();
            this.inited = true;
        }
        onTriggerEnter(other) {
            if (other.collisionGroup == SelfGameConfig.COLLIDER_GROUP_SAME) {
                this.explode();
            }
        }
        initModel() {
            this.model = this.owner.parent.getChildAt(0);
        }
        explode() {
            if (this.exploded) {
                return;
            }
            this.exploded = true;
            this.model.active = false;
            this.owner.transform.localScale = new Laya.Vector3(1, 0.8, 1);
            EffectManager.createExplosion(this.owner.transform.position);
            let self = this;
            Laya.timer.once(500, this, () => {
                self.owner.active = false;
            });
        }
        resetStatus() {
            Laya.timer.clearAll(this);
            this.exploded = false;
            this.owner.active = true;
            this.owner.transform.localScale = new Laya.Vector3(0.5, 0.4, 0.5);
            if (!this.inited) {
                return;
            }
            this.model.active = true;
        }
    }

    class LegCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.runLock = true;
            this.footPrintLock = true;
        }
        setRunLock(lock) {
            this.runLock = lock;
        }
        onUpdate() {
            if (this.runLock) {
                return;
            }
            if (this.owner.transform.localRotationEulerX > 0) {
                if (!this.footPrintLock) {
                    this.footPrintLock = true;
                    this.createFootPrint();
                }
            }
            else if (this.footPrintLock) {
                this.footPrintLock = false;
            }
        }
        createFootPrint() {
            EffectManager.createFootprint(this.owner.getChildAt(0).getChildAt(0).transform.position);
        }
    }

    class BaseRoleCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.inited = false;
            this.originLocalPosX = 0;
            this.tempDiffX = 0;
            this.originMouseX = NaN;
            this.pathIndex = 0;
            this.skipResetPathIndex = false;
            this.speed = SelfGameConfig.SPEED_NORMAL;
            this.currentMachineIndex = -1;
            this.isNextRoadPart = false;
            this.distanceToEdge = SelfGameConfig.MIDDLE_TO_EDGE;
            this.isDead = false;
            this.isRunning = false;
            this.isMoveToLeftRight = false;
            this.returnToRunClockon = false;
            this.statusNow = RoleStatus.IDLE;
            this.isPlayingForceAni = false;
            this.nonStopable = false;
            this.isSkinOn = false;
            this.isFightMode = false;
            this.scaleTarget = 1;
            this.needResetRoleParentPos = false;
            this.timerRun = true;
            this.tempPos = new Laya.Vector3();
        }
        resetStatus() {
            if (this.inited) {
                Laya.timer.clearAll(this);
                Laya.Tween.clearAll(this);
            }
            this.isFightMode = false;
            this.isDead = false;
            this.isRunning = false;
            this.isMoveToLeftRight = false;
            this.returnToRunClockon = false;
            this.isPlayingForceAni = false;
            this.nonStopable = false;
            this.scaleTarget = 1;
            this.speed = SelfGameConfig.SPEED_NORMAL;
            if (!this.skipResetPathIndex) {
                this.pathIndex = 0;
            }
            else {
                this.skipResetPathIndex = false;
            }
            this.setFootPrintLock(true);
            this.initAnimators();
        }
        setPathIndex(index) {
            this.pathIndex = index;
            if (!this.inited) {
                this.skipResetPathIndex = true;
            }
        }
        getPathIndex() {
            return this.pathIndex;
        }
        setMovePath(movePath) {
            this.movePath = movePath;
        }
        setCallbacks(dieCallback, effectCallback, unityCallback) {
            this.dieCallback = dieCallback;
            this.effectCallback = effectCallback;
            this.unityCallback = unityCallback;
        }
        getIsDead() {
            return this.isDead;
        }
        setIsRunning(isRunning) {
            if (this.isDead || this.isFightMode) {
                return;
            }
            this.isRunning = isRunning;
            this.toNormalStatus();
            this.checkAnim();
        }
        setRunning(isRunning) {
            if (this.isDead || this.isFightMode) {
                return;
            }
            this.isRunning = isRunning;
            this.toNormalStatus();
        }
        getProgress() {
            if (this.movePath) {
                return (this.pathIndex + 1) / this.movePath.length;
            }
            else {
                return 0;
            }
        }
        walkTo(pos) {
            this.isFightMode = true;
            this.tempPos.setValue(this.role.transform.position.x, this.role.transform.position.y, this.role.transform.position.z);
            let qua = new Laya.Quaternion();
            let vec = new Laya.Vector3();
            Laya.Vector3.subtract(this.tempPos, pos, vec);
            Laya.Quaternion.rotationLookAt(vec, Vector3Utils.UP, qua);
            qua.invert(qua);
            this.role.transform.rotation = qua;
            this.playRunAni();
            let self = this;
            Laya.Tween.to(this.tempPos, {
                x: pos.x,
                z: pos.z,
                update: Laya.Handler.create(this, () => {
                    self.role.transform.position = self.tempPos.clone();
                }, null, false)
            }, 2000, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                self.role.active = false;
                if (self.unityCallback) {
                    self.unityCallback(self.isSkinOn);
                }
            }));
        }
        jumpTo(pos) {
            this.isFightMode = true;
            Laya.timer.clear(this, this.returnToRun);
            let rand = Math.floor(15 * Math.random());
            let targetPos = new Laya.Vector3(0, 0, pos.z - rand / 10);
            this.tempPos = this.role.transform.position.clone();
            let self = this;
            let qua = new Laya.Quaternion();
            let vec = new Laya.Vector3();
            Laya.Vector3.subtract(this.tempPos, pos, vec);
            Laya.Quaternion.rotationLookAt(vec, Vector3Utils.UP, qua);
            qua.invert(qua);
            this.role.transform.rotation = qua;
            this.playJumpAni();
            Laya.Tween.to(this.tempPos, {
                x: targetPos.x,
                z: targetPos.z,
                update: Laya.Handler.create(this, () => {
                    self.role.transform.position = self.tempPos.clone();
                }, null, false)
            }, 2000 - rand * 100, Laya.Ease.linearIn, Laya.Handler.create(this, () => {
                self.juiceOut();
                self.role.active = false;
                if (self.unityCallback) {
                    self.unityCallback(self.isSkinOn);
                }
            }));
        }
        scaleUp() {
            this.scaleTarget += 0.1;
            if (this.scaleTarget > 2) {
                this.scaleTarget = 2;
            }
            if (this.scaleTween) {
                Laya.Tween.clear(this.scaleTween);
            }
            this.scaleTemp = this.role.transform.localScaleX;
            let self = this;
            this.scaleTween = Laya.Tween.to(this, {
                scaleTemp: this.scaleTarget,
                update: Laya.Handler.create(this, () => {
                    self.role.transform.localScale = new Laya.Vector3(self.scaleTemp, self.scaleTemp, self.scaleTemp);
                }, null, false)
            }, 300, Laya.Ease.bounceInOut);
        }
        refreshSkinOrHat() {
            if (!SdkCenter.getInstannce().isLw()) {
                let skinIndex = SkinManager.getInstance().getIndexUsing();
                let hatIndex = HatManager.getInstance().getIndexUsing();
                this.isSkinOn = (skinIndex > 0 || hatIndex > 0);
                if (this.roleModelCtrl) {
                    this.roleModelCtrl.refreshVisualStatus();
                }
                else {
                    this.refreshVisualWhileCreate = true;
                }
            }
        }
        getIsNextRoadPart() {
            let isNextRoadPart = this.isNextRoadPart;
            this.isNextRoadPart = false;
            return isNextRoadPart;
        }
        getCurrentMachineIndex() {
            return this.currentMachineIndex;
        }
        resetLocalDiffX() {
            this.originMouseX = Laya.stage.mouseX;
            this.originLocalPosX = this.role.transform.localPositionX;
            this.tempDiffX = 0;
        }
        onAwake() {
            this.initBody();
            this.initAnimators();
            this.initHandler();
            this.inited = true;
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this.tempPos);
            Laya.Tween.clearAll(this);
        }
        onDestroy() {
        }
        onUpdate() {
            if (this.timerRun) {
                if (!this.inited && !this.movePath) {
                    return;
                }
                if (!this.isFightMode && !this.isDead &&
                    (this.isRunning && !this.isPlayingForceAni ||
                        this.statusNow == RoleStatus.SPEED_UP ||
                        this.statusNow == RoleStatus.ROLL)) {
                    this.onMove();
                }
            }
        }
        onLateUpdate() {
            if (this.needResetRoleParentPos) {
                this.needResetRoleParentPos = false;
                this.roleParent.transform.localPositionZ = 0;
            }
        }
        onTrigger(other) {
            switch (other.collisionGroup) {
                case SelfGameConfig.COLLIDER_GROUP_MACHINE: {
                    this.checkHitMachine(other);
                    break;
                }
                case SelfGameConfig.COLLIDER_GROUP_JUMP_PAD: {
                    this.startJump();
                    break;
                }
                case SelfGameConfig.COLLIDER_GROUP_ROLL: {
                    this.startRoll();
                    break;
                }
                case SelfGameConfig.COLLIDER_GROUP_SPEED_UP: {
                    if (this.statusNow != RoleStatus.SPEED_UP) {
                        this.activateSpeedUp();
                    }
                    break;
                }
                case SelfGameConfig.COLLIDER_GROUP_COIN: {
                    other.owner.parent.active = false;
                    this.getCoin(other.owner.parent.transform.position);
                    break;
                }
            }
        }
        initHandler() {
            let self = this;
            Utils.onEvent(this, SelfGameConfig.EVENT_PAUSE_GAME, () => {
                self.timerRun = false;
            });
            Utils.onEvent(this, SelfGameConfig.EVENT_RESUME_GAME, () => {
                self.timerRun = true;
            });
        }
        initBody() {
            let self = this;
            this.rootNode = this.owner;
            this.roleParent = this.owner.getChildByName(SelfGameConfig.NAME_NODE_ROLE_PARENT);
            this.role = this.roleParent.getChildByName(SelfGameConfig.NAME_NODE_ROLE);
            this.roleModelCtrl = this.role.addComponent(RoleModelCtrl);
            this.roleModelCtrl.setTriggerCallback((other) => {
                self.onTrigger(other);
            });
            if (this.refreshVisualWhileCreate) {
                this.refreshVisualWhileCreate = false;
                this.roleModelCtrl.refreshVisualStatus();
            }
            this.roleAnimator = this.role.getComponent(Laya.Animator);
            this.roleParentAnimator = this.roleParent.getComponent(Laya.Animator);
            this.rigidBody = this.role.getComponent(Laya.Rigidbody3D);
            let leftLeg = this.role.getChildAt(1).getChildAt(0).getChildAt(0);
            let rightLeg = this.role.getChildAt(1).getChildAt(0).getChildAt(1);
            this.legCtrls = new Array();
            this.legCtrls.push(leftLeg.addComponent(LegCtrl));
            this.legCtrls.push(rightLeg.addComponent(LegCtrl));
        }
        playIdle1() {
            if (this.roleAnimatorStatus == AnimatorStatus.IDLE1) {
                return;
            }
            this.roleAnimatorStatus = AnimatorStatus.IDLE1;
            this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_IDLE1, 0.2);
        }
        playIdle2() {
            if (this.roleAnimatorStatus == AnimatorStatus.IDLE2) {
                return;
            }
            this.roleAnimatorStatus = AnimatorStatus.IDLE2;
            this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_IDLE2, 0.2);
        }
        playIdle3() {
            if (this.roleAnimatorStatus == AnimatorStatus.IDLE3) {
                return;
            }
            this.roleAnimatorStatus = AnimatorStatus.IDLE3;
            this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_IDLE3, 0.2);
        }
        playIdleAni() {
            if (this.roleAnimatorStatus == AnimatorStatus.IDLE1 ||
                this.roleAnimatorStatus == AnimatorStatus.IDLE2 ||
                this.roleAnimatorStatus == AnimatorStatus.IDLE3) {
                return;
            }
            let rand = Math.random();
            if (rand < 0.33) {
                this.playIdle1();
            }
            else if (rand < 0.66) {
                this.playIdle2();
            }
            else {
                this.playIdle3();
            }
        }
        setFootPrintLock(lock) {
            for (let i in this.legCtrls) {
                this.legCtrls[i].setRunLock(lock);
            }
        }
        playRunAni() {
            this.setFootPrintLock(false);
            if (this.roleAnimatorStatus == AnimatorStatus.RUN) {
                return;
            }
            switch (this.roleAnimatorStatus) {
                case AnimatorStatus.IDLE3: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_RUN, 0.02);
                    break;
                }
                case AnimatorStatus.IDLE1: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_RUN, 0.04);
                    break;
                }
                case AnimatorStatus.IDLE2: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_RUN, 0.04);
                    break;
                }
                case AnimatorStatus.LEFT_RIGHT: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_RUN, 0.02);
                    break;
                }
                default: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_RUN, 0.1);
                    break;
                }
            }
            this.roleAnimatorStatus = AnimatorStatus.RUN;
        }
        playRollAni() {
            if (this.roleAnimatorStatus == AnimatorStatus.ROLL) {
                return;
            }
            this.roleAnimatorStatus = AnimatorStatus.ROLL;
            this.roleAnimator.play(SelfGameConfig.NAME_ANI_ROLL);
        }
        playJumpAni() {
            if (this.roleAnimatorStatus == AnimatorStatus.JUMP) {
                return;
            }
            this.roleAnimatorStatus = AnimatorStatus.JUMP;
            this.roleParentAnimator.speed = 1;
            this.roleAnimator.play(SelfGameConfig.NAME_ANI_JUMP);
        }
        playSpeedUpAni() {
            if (this.roleAnimatorStatus == AnimatorStatus.SPEED_UP) {
                return;
            }
            this.roleAnimatorStatus = AnimatorStatus.SPEED_UP;
            this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_SPEED_UP, 0.1);
        }
        playLeftRightAni() {
            this.setFootPrintLock(false);
            if (this.roleAnimatorStatus == AnimatorStatus.LEFT_RIGHT) {
                return;
            }
            switch (this.roleAnimatorStatus) {
                case AnimatorStatus.IDLE3: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_LEFT_RIGHT, 0.02);
                    break;
                }
                case AnimatorStatus.IDLE1: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_LEFT_RIGHT, 0.04);
                    break;
                }
                case AnimatorStatus.IDLE2: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_LEFT_RIGHT, 0.04);
                    break;
                }
                case AnimatorStatus.RUN: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_LEFT_RIGHT, 0.02);
                    break;
                }
                default: {
                    this.roleAnimator.crossFade(SelfGameConfig.NAME_ANI_LEFT_RIGHT, 0.1);
                    break;
                }
            }
            this.roleAnimatorStatus = AnimatorStatus.LEFT_RIGHT;
        }
        toNormalStatus() {
            if (this.isPlayingForceAni || this.isFightMode) {
                return;
            }
            else {
                if (!this.isRunning) {
                    this.statusNow = RoleStatus.IDLE;
                }
                else {
                    if (this.isMoveToLeftRight) {
                        this.statusNow = RoleStatus.LEFT_RIGHT;
                    }
                    else {
                        this.statusNow = RoleStatus.RUN;
                    }
                }
            }
        }
        checkAnim() {
            if (this.isPlayingForceAni) {
                return;
            }
            this.setFootPrintLock(true);
            switch (this.statusNow) {
                case RoleStatus.IDLE: {
                    this.playIdleAni();
                    break;
                }
                case RoleStatus.RUN: {
                    this.playRunAni();
                    break;
                }
                case RoleStatus.LEFT_RIGHT: {
                    this.playLeftRightAni();
                    break;
                }
            }
        }
        afterJump() {
            for (let i = this.pathIndex; i < this.movePath.length; i++) {
                if (this.movePath[i].position.z >= this.roleParent.transform.position.z) {
                    this.pathIndex = i;
                    this.needResetRoleParentPos = true;
                    this.rootNode.transform.localPositionZ = this.movePath[i].position.z;
                    break;
                }
            }
            this.resetLocalDiffX();
            this.roleParentAnimator.play(SelfGameConfig.NAME_ANI_IDLE);
            this.roleParentAnimator.speed = 0;
            this.isPlayingForceAni = false;
            this.toNormalStatus();
            this.checkAnim();
        }
        afterRoleJump() {
            if (this.isFightMode) {
                this.playRunAni();
            }
        }
        afterRoll() {
            this.speed = SelfGameConfig.SPEED_NORMAL;
            this.isPlayingForceAni = false;
            this.toNormalStatus();
            this.checkAnim();
        }
        initAnimators() {
            this.roleAnimator.speed = 1;
            this.roleParentAnimator.speed = 0;
            let self = this;
            AnimatorUtils.getScriptAndSetCallbacks(this.roleParentAnimator, SelfGameConfig.NAME_ANI_JUMP, null, null, () => {
                self.afterJump();
            });
            this.roleParentAnimator.play(SelfGameConfig.NAME_ANI_IDLE);
            AnimatorUtils.getScriptAndSetCallbacks(this.roleAnimator, SelfGameConfig.NAME_ANI_ROLL, null, null, () => {
                self.afterRoll();
            });
            AnimatorUtils.getScriptAndSetCallbacks(this.roleAnimator, SelfGameConfig.NAME_ANI_JUMP, null, null, () => {
                self.afterRoleJump();
            });
            this.toNormalStatus();
            this.checkAnim();
        }
        move() {
            this.pathIndex += this.speed;
            if (this.pathIndex >= this.movePath.length) {
                this.pathIndex = this.movePath.length - 1;
                this.isRunning = false;
                Utils.dispatchEvent(SelfGameConfig.EVENT_FINISH_PROGRESS, true);
                return false;
            }
            else {
                this.rootNode.transform.position = this.movePath[this.pathIndex].position;
                return true;
            }
        }
        roleMoveAxisZ() {
            let canContinue = this.move();
            if (canContinue) {
                let machineIndex = this.movePath[this.pathIndex].machineIndex;
                if (this.currentMachineIndex != machineIndex) {
                    this.currentMachineIndex = machineIndex;
                    this.isNextRoadPart = true;
                }
            }
        }
        startToLeftRight() {
            this.returnToRunClockon = false;
            Laya.timer.clear(this, this.returnToRun);
            this.isMoveToLeftRight = true;
            this.toNormalStatus();
            this.checkAnim();
        }
        returnToRun() {
            if (this.isDead) {
                return;
            }
            this.isMoveToLeftRight = false;
            this.toNormalStatus();
            this.checkAnim();
        }
        roleMoveAxisX() {
            if (this.originMouseX != 0 && !this.originMouseX && UserGD.touchOn) {
                this.resetLocalDiffX();
            }
            let diffX;
            if (JoyStickCtrl.mouseMoving) {
                diffX = this.originMouseX - Laya.stage.mouseX;
            }
            else {
                diffX = 0;
                this.resetLocalDiffX();
                this.originMouseX = NaN;
            }
            if (Math.abs(diffX) > 5) {
                if (this.tempDiffX != diffX) {
                    this.tempDiffX = diffX;
                    let tempX = this.role.transform.localPositionX;
                    this.role.transform.localPositionX = this.originLocalPosX + this.tempDiffX * this.distanceToEdge / 300;
                    if (!this.isMoveToLeftRight) {
                        this.startToLeftRight();
                    }
                }
                else {
                    if (this.isMoveToLeftRight && !this.returnToRunClockon) {
                        this.returnToRunClockon = true;
                        Laya.timer.once(500, this, this.returnToRun);
                    }
                }
                if (this.role.transform.localPositionX >= this.distanceToEdge) {
                    this.role.transform.localPositionX = this.distanceToEdge;
                    this.resetLocalDiffX();
                }
                else if (this.role.transform.localPositionX <= -this.distanceToEdge) {
                    this.role.transform.localPositionX = -this.distanceToEdge;
                    this.resetLocalDiffX();
                }
            }
            else {
                if (this.isMoveToLeftRight && !this.returnToRunClockon) {
                    this.returnToRunClockon = true;
                    Laya.timer.once(1000, this, this.returnToRun);
                }
            }
        }
        roleMoveAxisY() {
        }
        onMove() {
            this.roleMoveAxisZ();
            this.roleMoveAxisX();
            this.roleMoveAxisY();
        }
        die() {
            this.isDead = true;
            this.rigidBody.enabled = false;
            if (this.dieCallback) {
                this.dieCallback();
            }
        }
        hideRole() {
            this.role.active = false;
        }
        juiceOut() {
            EffectManager.createBloodEffect(new Laya.Vector3(this.role.transform.position.x, this.role.transform.position.y + 0.3, this.role.transform.position.z));
        }
        juiceFloor() {
            EffectManager.createSmashCrash(new Laya.Vector3(this.role.transform.position.x, 0, this.role.transform.position.z));
        }
        axisXYCut() {
            this.die();
            this.hideRole();
            this.juiceOut();
            EffectManager.createCutEffect(this.role.transform.position, this.role.transform.localScale, 0);
        }
        axisYZCut() {
            this.die();
            this.hideRole();
            this.juiceOut();
            EffectManager.createCutEffect(this.role.transform.position, this.role.transform.localScale, 1);
        }
        smash() {
            this.die();
            this.hideRole();
            this.juiceOut();
            this.juiceFloor();
        }
        axisXZCut() {
            this.die();
            this.hideRole();
            this.juiceOut();
            EffectManager.createCutEffect(this.role.transform.position, this.role.transform.localScale, 2);
        }
        blowUp(bombCenterPos) {
            this.die();
            let qua = new Laya.Quaternion();
            Laya.Quaternion.lookAt(this.role.transform.position, bombCenterPos, Vector3Utils.UP, qua);
            this.role.transform.rotation = qua;
            this.roleAnimator.play(SelfGameConfig.NAME_ANI_BLOW_UP);
        }
        normalDie() {
            this.die();
            this.juiceOut();
            this.roleAnimator.play(SelfGameConfig.NAME_ANI_DIE);
        }
        flyLeft() {
            this.die();
            this.role.transform.localRotationEulerY = -80 - (20 * Math.random());
            this.roleAnimator.play(SelfGameConfig.NAME_ANI_BLOW_UP);
        }
        flyRight() {
            this.die();
            this.role.transform.localRotationEulerY = 80 + (20 * Math.random());
            this.roleAnimator.play(SelfGameConfig.NAME_ANI_BLOW_UP);
        }
        checkHitMachine(collider) {
            if (this.isDead) {
                return;
            }
            if (this.nonStopable) {
                let node = collider.owner;
                while (node && !node.name.startsWith("mach")) {
                    node = node.parent;
                }
                node.active = false;
                EffectManager.createExplosion(node.transform.position);
                return;
            }
            let name = collider.owner.name;
            if (name.startsWith("verX")) {
                this.axisXYCut();
            }
            else if (name.startsWith("verZ")) {
                this.axisYZCut();
            }
            else if (name.startsWith("hit")) {
                this.smash();
            }
            else if (name.startsWith("hor")) {
                this.axisXZCut();
            }
            else if (name.startsWith("cut")) {
                if (Math.abs(this.role.transform.localPositionX) < 0.5) {
                    this.axisXYCut();
                }
                else {
                    this.axisYZCut();
                }
            }
            else if (name.startsWith("bom")) {
                this.blowUp(collider.owner.transform.position);
            }
            else if (name.startsWith("spi")) {
                this.normalDie();
            }
            else if (name.startsWith("left")) {
                this.flyLeft();
            }
            else if (name.startsWith("rig")) {
                this.flyRight();
            }
        }
        startJump() {
            this.isPlayingForceAni = true;
            this.setFootPrintLock(true);
            this.roleParentAnimator.play(SelfGameConfig.NAME_ANI_JUMP);
            this.playJumpAni();
            AudioManager.playJump();
            EffectUtils.vibrateShort();
        }
        startRoll() {
            this.isPlayingForceAni = true;
            this.setFootPrintLock(true);
            this.speed = SelfGameConfig.SPEED_ROLL;
            this.statusNow = RoleStatus.ROLL;
            this.playRollAni();
            EffectUtils.vibrateShort();
        }
        stopSpeedUp() {
            this.nonStopable = false;
            this.isPlayingForceAni = false;
            this.speed = SelfGameConfig.SPEED_NORMAL;
            this.toNormalStatus();
            this.checkAnim();
        }
        startSpeedUp() {
            this.isPlayingForceAni = true;
            this.setFootPrintLock(true);
            this.nonStopable = true;
            this.statusNow = RoleStatus.SPEED_UP;
            this.speed = SelfGameConfig.SPEED_FAST;
            this.playSpeedUpAni();
        }
        activateSpeedUp() {
            Utils.dispatchEvent(SelfGameConfig.EVENT_START_SPEED_UP, this.role);
        }
        getCoin(pos) {
            if (this.effectCallback) {
                this.effectCallback(EffectType.COIN, pos);
            }
        }
    }

    class IdleRoleCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.generated = false;
        }
        resetStatus() {
            this.owner.active = true;
            this.generated = false;
        }
        setColliderEnabled(isOn) {
            let collider = this.owner.getComponent(Laya.PhysicsCollider);
            collider.enabled = isOn;
        }
        onTriggerEnter(other) {
            if (other.collisionGroup == SelfGameConfig.COLLIDER_GROUP_SAME) {
                this.checkInfect(other.owner);
            }
        }
        checkInfect(role) {
            if (this.generated) {
                return;
            }
            this.owner.active = false;
            this.generated = true;
            let script = role.parent.parent.getComponent(BaseRoleCtrl);
            Utils.dispatchEvent(SelfGameConfig.EVENT_INFECT_ROLE, [
                0,
                this.owner.transform.position,
                this.owner.transform.localScale
            ]);
        }
    }

    class SelfExplodeTriggerCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.triggered = false;
        }
        setConfig(indexes) {
            this.indexes = indexes;
        }
        resetStatus() {
            this.owner.parent.active = true;
            this.triggered = false;
        }
        onTriggerEnter(other) {
            if (other.collisionGroup == SelfGameConfig.COLLIDER_GROUP_SAME) {
                this.explode();
            }
        }
        explode() {
            if (this.triggered) {
                return;
            }
            this.owner.parent.active = false;
            this.triggered = true;
            Utils.dispatchEvent(SelfGameConfig.EVENT_MACHINE_EXPLODE, this.indexes);
        }
    }

    class WallCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.isCrashed = false;
        }
        resetStatus() {
            this.owner.active = true;
            Laya.timer.clearAll(this);
            this.isCrashed = false;
            this.animator.play(SelfGameConfig.NAME_ANI_IDLE);
        }
        onAwake() {
            this.animator = this.owner.getComponent(Laya.Animator);
        }
        onTriggerEnter(other) {
            if (other.collisionGroup == SelfGameConfig.COLLIDER_GROUP_SAME) {
                this.checkCrash();
            }
        }
        hideWall() {
            this.owner.active = false;
        }
        checkCrash() {
            if (this.owner.active && !this.isCrashed) {
                this.isCrashed = true;
                this.animator.play("Break2");
                EffectManager.createWallBreakEffect(this.owner.transform.position);
                EffectUtils.vibrateShort();
                Laya.timer.once(3000, this, this.hideWall);
            }
        }
    }

    class MachineCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.inited = false;
            this.isEnd = false;
        }
        onAwake() {
            this.initMachinePart();
            this.initHitColliders();
            this.initBombMachine();
            this.initPunchMachine();
            this.initAddSpeedColliders();
            this.initJumpPadColliders();
            this.initRollColliders();
            this.initWallColliders();
            this.initSelfExplodeTriggers();
            this.initSpecialParts();
            this.getRoleConfigPos();
            this.getCoinConfigPos();
            this.checkEndPart();
            this.inited = true;
            this.checkCanSetMachine();
        }
        onDestroy() {
            Laya.timer.clearAll(this);
        }
        initMachinePart() {
            this.rootMachine = this.owner.getChildByName("root_machine");
        }
        getColliderShapeArr(node, type) {
            if (node.numChildren == 0) {
                let collider = node.getComponent(Laya.PhysicsCollider);
                if (collider) {
                    switch (type) {
                        case 1: {
                            if (!this.hitColliderArray) {
                                this.hitColliderArray = new Array();
                            }
                            this.hitColliderArray.push(collider);
                            let otherNode = node;
                            while (otherNode && !otherNode.name.startsWith("mach")) {
                                otherNode = otherNode.parent;
                            }
                            if (!this.machineArray) {
                                this.machineArray = new Array();
                            }
                            this.machineArray.push(otherNode);
                            break;
                        }
                        case 2: {
                            if (!this.jumpPadColliderArray) {
                                this.jumpPadColliderArray = new Array();
                            }
                            this.jumpPadColliderArray.push(collider);
                            break;
                        }
                        case 3: {
                            if (!this.rollColliderArray) {
                                this.rollColliderArray = new Array();
                            }
                            this.rollColliderArray.push(collider);
                            break;
                        }
                        case 4: {
                            if (!this.speedUpColliderArray) {
                                this.speedUpColliderArray = new Array();
                            }
                            this.speedUpColliderArray.push(collider);
                            break;
                        }
                    }
                }
                return;
            }
            for (let i = 0; i < node.numChildren; i++) {
                this.getColliderShapeArr(node.getChildAt(i), type);
            }
        }
        initHitColliders() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_machine");
                if (nodeHitCollider) {
                    this.getColliderShapeArr(nodeHitCollider, 1);
                }
                else {
                    continue;
                }
            }
            if (this.hitColliderArray) {
                for (let i in this.hitColliderArray) {
                    this.hitColliderArray[i].collisionGroup = SelfGameConfig.COLLIDER_GROUP_MACHINE;
                    this.hitColliderArray[i].canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.hitColliderArray[i].isTrigger = true;
                }
            }
        }
        initBombMachine() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_bomb");
                if (nodeHitCollider) {
                    for (let i = 0; i < nodeHitCollider.getChildAt(0).numChildren; i++) {
                        let child = nodeHitCollider.getChildAt(0).getChildAt(i);
                        let hitNode = child.getChildAt(1);
                        if (!this.bombArray) {
                            this.bombArray = new Array();
                        }
                        this.bombArray.push(hitNode.addComponent(BombCtrl));
                    }
                    this.getColliderShapeArr(nodeHitCollider, 1);
                }
                else {
                    continue;
                }
            }
            if (this.hitColliderArray) {
                for (let i in this.hitColliderArray) {
                    this.hitColliderArray[i].collisionGroup = SelfGameConfig.COLLIDER_GROUP_MACHINE;
                    this.hitColliderArray[i].canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.hitColliderArray[i].isTrigger = true;
                }
            }
        }
        initPunchMachine() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_glove");
                if (nodeHitCollider) {
                    let glove1 = nodeHitCollider.getChildAt(0).getChildAt(0).getChildAt(0);
                    let animator1 = glove1.getComponent(Laya.Animator);
                    AnimatorUtils.getScriptAndSetCallbacks(animator1, SelfGameConfig.NAME_ANI_GLOVE_HIT, null, null, () => {
                        animator1.play(SelfGameConfig.NAME_ANI_GLOVE_RESET);
                    });
                    let glove2 = nodeHitCollider.getChildAt(0).getChildAt(1).getChildAt(0);
                    let animator2 = glove2.getComponent(Laya.Animator);
                    AnimatorUtils.getScriptAndSetCallbacks(animator2, SelfGameConfig.NAME_ANI_GLOVE_HIT, null, null, () => {
                        animator2.play(SelfGameConfig.NAME_ANI_GLOVE_RESET);
                    });
                    Laya.timer.loop(3000, this, () => {
                        animator1.play(SelfGameConfig.NAME_ANI_GLOVE_HIT);
                        animator2.play(SelfGameConfig.NAME_ANI_GLOVE_HIT);
                    });
                    this.getColliderShapeArr(nodeHitCollider, 1);
                }
                else {
                    continue;
                }
            }
            if (this.hitColliderArray) {
                for (let i in this.hitColliderArray) {
                    this.hitColliderArray[i].collisionGroup = SelfGameConfig.COLLIDER_GROUP_MACHINE;
                    this.hitColliderArray[i].canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.hitColliderArray[i].isTrigger = true;
                }
            }
        }
        initAddSpeedColliders() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_addSpeed");
                if (nodeHitCollider) {
                    this.getColliderShapeArr(nodeHitCollider, 4);
                }
                else {
                    continue;
                }
            }
            if (this.speedUpColliderArray) {
                for (let i in this.speedUpColliderArray) {
                    this.speedUpColliderArray[i].collisionGroup = SelfGameConfig.COLLIDER_GROUP_SPEED_UP;
                    this.speedUpColliderArray[i].canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.speedUpColliderArray[i].isTrigger = true;
                }
            }
        }
        initJumpPadColliders() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_jumpPad");
                if (nodeHitCollider) {
                    this.getColliderShapeArr(nodeHitCollider, 2);
                }
                else {
                    continue;
                }
            }
            if (this.jumpPadColliderArray) {
                for (let i in this.jumpPadColliderArray) {
                    this.jumpPadColliderArray[i].collisionGroup = SelfGameConfig.COLLIDER_GROUP_JUMP_PAD;
                    this.jumpPadColliderArray[i].canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.jumpPadColliderArray[i].isTrigger = true;
                }
            }
        }
        initRollColliders() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_roll");
                if (nodeHitCollider) {
                    this.getColliderShapeArr(nodeHitCollider, 3);
                }
                else {
                    continue;
                }
            }
            if (this.rollColliderArray) {
                for (let i in this.rollColliderArray) {
                    this.rollColliderArray[i].collisionGroup = SelfGameConfig.COLLIDER_GROUP_ROLL;
                    this.rollColliderArray[i].canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.rollColliderArray[i].isTrigger = true;
                }
            }
        }
        initWallColliders() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_wall");
                if (nodeHitCollider) {
                    for (let j = 0; j < nodeHitCollider.numChildren; j++) {
                        let child = nodeHitCollider.getChildAt(j);
                        if (child.name.startsWith("no")) {
                            for (let k = 0; k < child.numChildren; k++) {
                                let innerChild = child.getChildAt(k);
                                if (!this.wallCtrls) {
                                    this.wallCtrls = new Array();
                                }
                                let trigger = innerChild.getComponent(Laya.PhysicsCollider);
                                trigger.canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                                this.wallCtrls.push(innerChild.addComponent(WallCtrl));
                            }
                        }
                        else {
                            if (!this.wallCtrls) {
                                this.wallCtrls = new Array();
                            }
                            let trigger = child.getComponent(Laya.PhysicsCollider);
                            trigger.canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                            this.wallCtrls.push(child.addComponent(WallCtrl));
                        }
                    }
                }
                else {
                    continue;
                }
            }
        }
        initSelfExplodeTriggers() {
            if (!this.rootMachine) {
                return;
            }
            this.selfExplodeTriggerCtrls = new Array();
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                let nodeHitCollider = child.getChildByName("node_bombTrigger");
                if (nodeHitCollider) {
                    let button = nodeHitCollider.getChildAt(1);
                    let trigger = button.getComponent(Laya.PhysicsCollider);
                    trigger.canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    this.selfExplodeTriggerCtrls.push(button.addComponent(SelfExplodeTriggerCtrl));
                }
                else {
                    this.selfExplodeTriggerCtrls.push(null);
                }
            }
        }
        initSpecialParts() {
            if (!this.rootMachine) {
                return;
            }
            for (let i = 0; i < this.rootMachine.numChildren; i++) {
                let child = this.rootMachine.getChildAt(i);
                for (let j = 0; j < child.numChildren; j++) {
                    let innerChild = child.getChildAt(j);
                    for (let k = 0; k < innerChild.numChildren; k++) {
                        let muchInnerChild = innerChild.getChildAt(k);
                        let arr = muchInnerChild.name.split("_");
                        for (let l in arr) {
                            if (arr[l].startsWith("configu")) {
                                if (i == 0) {
                                    if (!this.mac1ConfigurableArray) {
                                        this.mac1ConfigurableArray = new Array();
                                    }
                                    this.mac1ConfigurableArray.push(muchInnerChild);
                                }
                                else {
                                    if (!this.mac2ConfigurableArray) {
                                        this.mac2ConfigurableArray = new Array();
                                    }
                                    this.mac2ConfigurableArray.push(muchInnerChild);
                                }
                            }
                            else if (arr[l].startsWith("multiA")) {
                                if (i == 0) {
                                    if (!this.mac1MultiAnimationArray) {
                                        this.mac1MultiAnimationArray = new Array();
                                    }
                                    this.mac1MultiAnimationArray.push(muchInnerChild.getComponent(Laya.Animator));
                                }
                                else {
                                    if (!this.mac2MultiAnimationArray) {
                                        this.mac2MultiAnimationArray = new Array();
                                    }
                                    this.mac2MultiAnimationArray.push(muchInnerChild.getComponent(Laya.Animator));
                                }
                            }
                            else if (arr[l].startsWith("mova")) {
                                if (i == 0) {
                                    if (!this.mac1MovableArray) {
                                        this.mac1MovableArray = new Array();
                                    }
                                    for (let m = 0; m < muchInnerChild.numChildren; m++) {
                                        this.mac1MovableArray.push(muchInnerChild.getChildAt(m).getChildByName("movable"));
                                    }
                                }
                                else {
                                    if (!this.mac2MovableArray) {
                                        this.mac2MovableArray = new Array();
                                    }
                                    for (let m = 0; m < muchInnerChild.numChildren; m++) {
                                        this.mac2MovableArray.push(muchInnerChild.getChildAt(m).getChildByName("movable"));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        getRoleConfigPos() {
            this.roleSpot = this.owner.getChildByName("role_pos");
        }
        getCoinConfigPos() {
            let coinConfig = this.owner.getChildByName("coin_config");
            if (coinConfig) {
                this.coinSpots = new Array();
                for (let i = 0; i < coinConfig.numChildren; i++) {
                    let child = coinConfig.getChildAt(i);
                    this.coinSpots.push(child);
                }
            }
        }
        resetBossAnimator(animator) {
            AnimatorUtils.getScriptAndSetCallbacks(animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_1, null, null, () => {
                animator.play(SelfGameConfig.NAME_ANI_FIGHT_IDLE);
            });
            AnimatorUtils.getScriptAndSetCallbacks(animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_2, null, null, () => {
                animator.play(SelfGameConfig.NAME_ANI_FIGHT_IDLE);
            });
            AnimatorUtils.getScriptAndSetCallbacks(animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_3, null, null, () => {
                animator.play(SelfGameConfig.NAME_ANI_FIGHT_IDLE);
            });
            AnimatorUtils.getScriptAndSetCallbacks(animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_4, null, null, () => {
                animator.play(SelfGameConfig.NAME_ANI_FIGHT_IDLE);
            });
        }
        checkEndPart() {
            let node = this.owner.getChildAt(0);
            if (node.name.startsWith("ring")) {
                this.isEnd = true;
                let nodeBossPos = this.owner.getChildByName("node_boss");
                let nodeBoss = ModelFactory.createBossModel();
                nodeBoss.name = "boss";
                this.owner.addChild(nodeBoss);
                nodeBoss.transform.localPosition = nodeBossPos.transform.localPosition.clone();
                nodeBoss.transform.localRotationEulerY = 180;
                let skinModel = nodeBoss.getChildAt(2);
                Globals.bossColorUsingIndex = Math.floor(Math.random() * Globals.roleColorConfig.length);
                EffectManager.changeBossMatColor(Globals.roleColorConfig[Globals.bossColorUsingIndex].fresnelColor, Globals.roleColorConfig[Globals.bossColorUsingIndex].mainColor);
                EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE3);
                let glove = ModelFactory.getGlove(true);
                let leftHand = nodeBoss.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(0).getChildAt(0).getChildAt(0).getChildAt(0);
                let leftGlove = glove.getChildAt(0).clone();
                leftHand.addChild(leftGlove);
                leftGlove.transform.localPosition = Vector3Utils.ORIGIN.clone();
                leftGlove.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                let rightHand = nodeBoss.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(2).getChildAt(0).getChildAt(0).getChildAt(0);
                let rightGlove = glove.getChildAt(1).clone();
                rightHand.addChild(rightGlove);
                rightGlove.transform.localPosition = Vector3Utils.ORIGIN.clone();
                rightGlove.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                let hat = ModelFactory.createBossHat();
                if (hat) {
                    let neck = nodeBoss.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(1);
                    neck.addChild(hat);
                    hat.transform.localPosition = Vector3Utils.ORIGIN.clone();
                    hat.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                }
                let animator = nodeBoss.getComponent(Laya.Animator);
                this.resetBossAnimator(animator);
                let nodeMulti = new Laya.Sprite3D("nodeMulti");
                let multiConfig = this.owner.getChildByName("multi_config");
                this.owner.addChild(nodeMulti);
                nodeMulti.transform.localPositionZ = multiConfig.transform.localPositionZ;
                for (let i = 0; i < 600; i++) {
                    let multi = 10 + i;
                    let multiPart = ModelFactory.createMultiModel();
                    let node1 = multiPart.getChildAt(2);
                    let node2 = multiPart.getChildAt(3);
                    let node3 = multiPart.getChildAt(4);
                    let node4 = multiPart.getChildAt(5);
                    let node5 = multiPart.getChildAt(6);
                    if (multi < 100) {
                        node5.active = false;
                        node1.meshRenderer.material = ModelFactory.getMultiMaterialX();
                        node2.meshRenderer.material = ModelFactory.getMultiMaterialnum(Math.floor(multi / 10));
                    }
                    else {
                        node1.transform.localPositionX -= 0.3;
                        node2.transform.localPositionX -= 0.3;
                        node3.transform.localPositionX -= 0.3;
                        node4.transform.localPositionX -= 0.3;
                        node5.transform.localPositionX -= 0.3;
                        node5.meshRenderer.material = ModelFactory.getMultiMaterialX();
                        node1.meshRenderer.material = ModelFactory.getMultiMaterialnum(Math.floor(multi / 100));
                        node2.meshRenderer.material = ModelFactory.getMultiMaterialnum(Math.floor((multi % 100) / 10));
                    }
                    if (i > SelfGameConfig.MULTI_HIDE_THRESHOLD) {
                        multiPart.active = false;
                    }
                    node3.meshRenderer.material = ModelFactory.getMultiMaterialPoint();
                    node4.meshRenderer.material = ModelFactory.getMultiMaterialnum(multi % 10);
                    nodeMulti.addChild(multiPart);
                    multiPart.transform.localPositionZ = i;
                }
                nodeMulti.active = false;
            }
        }
        checkCanSetMachine() {
            if (this.inited && this.config) {
                this.setMachineWithConfigs();
                return;
            }
            let self = this;
            let checkLoop = () => {
                if (self.inited && self.config) {
                    Laya.timer.clear(self, checkLoop);
                    self.setMachineWithConfigs();
                }
            };
            Laya.timer.loop(50, this, checkLoop);
        }
        configMachines() {
            if (this.mac1ConfigurableArray) {
                for (let i = 0; i < this.mac1ConfigurableArray.length; i++) {
                    let arr = Utils.getBinaryConfig(this.config.machineConfig[0].showHideConfig ? this.config.machineConfig[0].showHideConfig : 0, this.mac1ConfigurableArray[i].numChildren);
                    for (let j = 0; j < this.mac1ConfigurableArray[i].numChildren; j++) {
                        let child = this.mac1ConfigurableArray[i].getChildAt(j);
                        if (!arr[j]) {
                            child.active = false;
                        }
                        else {
                            child.active = true;
                        }
                    }
                }
            }
            if (this.mac2ConfigurableArray) {
                for (let i = 0; i < this.mac2ConfigurableArray.length; i++) {
                    let arr = Utils.getBinaryConfig(this.config.machineConfig[1].showHideConfig ? this.config.machineConfig[1].showHideConfig : 0, this.mac2ConfigurableArray[i].numChildren);
                    for (let j = 0; j < this.mac2ConfigurableArray[i].numChildren; j++) {
                        let child = this.mac2ConfigurableArray[i].getChildAt(j);
                        if (!arr[j]) {
                            child.active = false;
                        }
                        else {
                            child.active = true;
                        }
                    }
                }
            }
        }
        configAnimators() {
            if (this.mac1MultiAnimationArray) {
                for (let i = 0; i < this.mac1MultiAnimationArray.length; i++) {
                    this.mac1MultiAnimationArray[i].play("State" + this.config.machineConfig[0].multiAnimConfig);
                }
            }
            if (this.mac2MultiAnimationArray) {
                for (let i = 0; i < this.mac2MultiAnimationArray.length; i++) {
                    this.mac2MultiAnimationArray[i].play("State" + this.config.machineConfig[1].multiAnimConfig);
                }
            }
        }
        configSelfExplodeTrigger() {
            if (this.selfExplodeTriggerCtrls && this.selfExplodeTriggerCtrls.length > 0) {
                if (this.selfExplodeTriggerCtrls[0]) {
                    let arr = new Array();
                    for (let i in this.config.machineConfig[0].bombMachineIndexes) {
                        arr.push(this.indexAtLevel + this.config.machineConfig[0].bombMachineIndexes[i]);
                    }
                    this.selfExplodeTriggerCtrls[0].setConfig(arr);
                }
                if (this.selfExplodeTriggerCtrls[1]) {
                    let arr = new Array();
                    for (let i in this.config.machineConfig[1].bombMachineIndexes) {
                        arr.push(this.indexAtLevel + this.config.machineConfig[1].bombMachineIndexes[i]);
                    }
                    this.selfExplodeTriggerCtrls[1].setConfig(arr);
                }
            }
        }
        configMovables() {
            if (this.mac1MovableArray) {
                for (let i in this.mac1MovableArray) {
                    this.mac1MovableArray[i].transform.localPositionX = -this.config.machineConfig[0].movableConfig;
                }
            }
            if (this.mac2MovableArray) {
                for (let i in this.mac2MovableArray) {
                    this.mac2MovableArray[i].transform.localPositionX = -this.config.machineConfig[1].movableConfig;
                }
            }
        }
        deployRoles() {
            if (this.roleSpot && this.config.roleConfig > 0) {
                let config = ModelFactory.getRoleConfig(this.config.roleConfig);
                let nodeRole = new Laya.Sprite3D("node_role");
                this.owner.addChild(nodeRole);
                nodeRole.transform.localPositionZ = this.roleSpot.transform.localPositionZ;
                this.rolesArray = new Array();
                for (let i = 0; i < config.numChildren; i++) {
                    let child = config.getChildAt(i);
                    let role = ModelFactory.createRoleModel();
                    nodeRole.addChild(role);
                    role.transform.localPosition = child.transform.localPosition.clone();
                    role.transform.localScale = child.transform.localScale.clone();
                    let pant = role.getChildAt(3);
                    pant && (pant.active = false);
                    let collider = role.addComponent(Laya.PhysicsCollider);
                    collider.collisionGroup = SelfGameConfig.COLLIDER_GROUP_UNSAME;
                    collider.canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                    collider.colliderShape = new Laya.BoxColliderShape(1, 0.8, 0.6);
                    collider.colliderShape.localOffset = new Laya.Vector3(0, 0.4, 0);
                    collider.colliderShape.updateLocalTransformations();
                    collider.isTrigger = true;
                    collider.enabled = this.colliderOn;
                    let skinModel = role.getChildAt(2);
                    EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE1);
                    let animator = role.getComponent(Laya.Animator);
                    let rand = 1 + Math.floor(2 * Math.random());
                    animator.play("Idle" + rand);
                    this.rolesArray.push(role.addComponent(IdleRoleCtrl));
                    ++Globals.currentRolesConfigNum;
                }
            }
        }
        deployCoins() {
            if (!this.coinSpots) {
                return;
            }
            for (let i = 0; i < this.coinSpots.length; i++) {
                if (this.config.coinConfig[i] > 0) {
                    let fore = Math.floor(this.config.coinConfig[i] / 100);
                    let digitNum;
                    let offsetX = 0;
                    switch (fore) {
                        case 1: {
                            digitNum = 6;
                            break;
                        }
                        case 3: {
                            digitNum = 3;
                            break;
                        }
                        case 4: {
                            digitNum = 3;
                            break;
                        }
                        case 5: {
                            digitNum = 3;
                            break;
                        }
                        default: {
                            digitNum = 0;
                            offsetX = this.config.coinConfig[i] % 100 - 2;
                            break;
                        }
                    }
                    let nodeCoin = new Laya.Sprite3D("node_coin" + i);
                    this.owner.addChild(nodeCoin);
                    nodeCoin.transform.localPositionZ = this.coinSpots[i].transform.localPositionZ;
                    let config = ModelFactory.getCoinConfig(fore);
                    let arr;
                    if (digitNum > 0) {
                        arr = Utils.getBinaryConfig(this.config.coinConfig[i] % 100, digitNum);
                    }
                    if (!this.coinsArray) {
                        this.coinsArray = new Array();
                    }
                    for (let i = 0; i < config.numChildren; i++) {
                        if (arr && !arr[i]) {
                            continue;
                        }
                        let child = config.getChildAt(i);
                        let coin = ModelFactory.createCoin();
                        nodeCoin.addChild(coin);
                        coin.transform.localPosition = child.transform.localPosition.clone();
                        coin.transform.localScale = child.transform.localScale.clone();
                        if (!arr) {
                            coin.transform.localPositionX = offsetX;
                        }
                        let hitCollider = coin.getChildAt(2).getComponent(Laya.PhysicsCollider);
                        hitCollider.isTrigger = true;
                        hitCollider.collisionGroup = SelfGameConfig.COLLIDER_GROUP_COIN;
                        hitCollider.canCollideWith = SelfGameConfig.COLLIDER_GROUP_SAME;
                        hitCollider.enabled = this.colliderOn;
                        this.coinsArray.push(coin);
                    }
                }
            }
        }
        resetComeThenMove() {
            if (this.comeAndMoveArray) {
                for (let i in this.comeAndMoveArray) {
                    this.comeAndMoveArray[i].play("Idle");
                    this.comeAndMoveArray[i].speed = 0;
                }
            }
        }
        initComeThenMoveArray() {
            this.resetComeThenMove();
        }
        setMachineWithConfigs() {
            this.configMachines();
            this.configAnimators();
            this.configSelfExplodeTrigger();
            this.configMovables();
            this.deployRoles();
            this.deployCoins();
            this.initComeThenMoveArray();
        }
        resetBombs() {
            if (!this.bombArray) {
                return;
            }
            for (let i in this.bombArray) {
                this.bombArray[i].resetStatus();
            }
        }
        resetWalls() {
            if (!this.wallCtrls) {
                return;
            }
            for (let i in this.wallCtrls) {
                this.wallCtrls[i].resetStatus();
            }
        }
        reshowMachines() {
            if (!this.machineArray) {
                return;
            }
            for (let i in this.machineArray) {
                this.machineArray[i].active = true;
            }
            this.configMachines();
        }
        resetOtherCtrls() {
            if (this.selfExplodeTriggerCtrls) {
                for (let i in this.selfExplodeTriggerCtrls) {
                    this.selfExplodeTriggerCtrls[i] && this.selfExplodeTriggerCtrls[i].resetStatus();
                }
            }
        }
        refreshGetables() {
            if (this.rolesArray) {
                for (let i in this.rolesArray) {
                    this.rolesArray[i].resetStatus();
                }
            }
            if (this.coinsArray) {
                for (let i in this.coinsArray) {
                    this.coinsArray[i].active = true;
                }
            }
        }
        setColliders() {
            if (this.hitColliderArray) {
                for (let i in this.hitColliderArray) {
                    this.hitColliderArray[i].enabled = this.colliderOn;
                }
            }
            if (this.jumpPadColliderArray) {
                for (let i in this.jumpPadColliderArray) {
                    this.jumpPadColliderArray[i].enabled = this.colliderOn;
                }
            }
            if (this.rollColliderArray) {
                for (let i in this.rollColliderArray) {
                    this.rollColliderArray[i].enabled = this.colliderOn;
                }
            }
            if (this.speedUpColliderArray) {
                for (let i in this.speedUpColliderArray) {
                    this.speedUpColliderArray[i].enabled = this.colliderOn;
                }
            }
            if (this.coinsArray) {
                for (let i in this.coinsArray) {
                    let hitCollider = this.coinsArray[i].getChildAt(2).getComponent(Laya.PhysicsCollider);
                    hitCollider.enabled = this.colliderOn;
                }
            }
            if (this.rolesArray) {
                for (let i in this.rolesArray) {
                    this.rolesArray[i].setColliderEnabled(this.colliderOn);
                }
            }
        }
        switchColliders(isToOn) {
            if (this.colliderOn == isToOn) {
                return;
            }
            this.colliderOn = isToOn;
            if (this.inited) {
                this.setColliders();
            }
            else {
                let self = this;
                Laya.timer.frameLoop(2, this, function checkSetColliders() {
                    if (self.inited) {
                        Laya.timer.clear(self, checkSetColliders);
                        self.setColliders();
                    }
                });
            }
        }
        switchActive(isToOn) {
            if (this.inited) {
                this.owner.active = isToOn;
            }
            else {
                let self = this;
                Laya.timer.frameLoop(2, this, function checkSwitchActive() {
                    if (self.inited) {
                        Laya.timer.clear(self, checkSwitchActive);
                        self.owner.active = isToOn;
                    }
                });
            }
        }
        setConfig(config, index) {
            this.config = config;
            this.indexAtLevel = index;
        }
        resetStatus() {
            if (this.isEnd) {
                let nodeBoss = this.owner.getChildByName("boss");
                let animator = nodeBoss.getComponent(Laya.Animator);
                this.resetBossAnimator(animator);
                let doorFrame = this.owner.getChildByName("DoorFrame");
                doorFrame && (doorFrame.active = true);
                let doorLeftAnim = this.owner.getChildByName("DoorLeft").getComponent(Laya.Animator);
                doorLeftAnim.play("Idle");
                let nodeMulti = this.owner.getChildByName("nodeMulti");
                let material = ModelFactory.getMultiMaterialColor(0).clone();
                for (let i = 0; i < nodeMulti.numChildren; i++) {
                    let multiPart = nodeMulti.getChildAt(i);
                    let nodeColor = multiPart.getChildAt(1);
                    nodeColor.meshRenderer.material = material;
                    if (i < SelfGameConfig.MULTI_HIDE_THRESHOLD) {
                        multiPart.active = true;
                    }
                    else {
                        multiPart.active = false;
                    }
                }
                nodeMulti.active = false;
            }
            else {
                this.resetBombs();
                this.resetWalls();
                this.reshowMachines();
                this.resetOtherCtrls();
                this.refreshGetables();
            }
            this.resetComeThenMove();
        }
        checkComeAndMove() {
            if (this.comeAndMoveArray) {
                for (let i in this.comeAndMoveArray) {
                    this.comeAndMoveArray[i].speed = 1;
                    this.comeAndMoveArray[i].play("Move");
                }
            }
        }
        selfExplode() {
            if (this.machineArray) {
                for (let i in this.machineArray) {
                    if (this.machineArray[i].active) {
                        this.machineArray[i].active = false;
                        EffectManager.createExplosion(this.machineArray[i].transform.position);
                    }
                }
            }
        }
    }

    class FightViewDialog extends ui.dialogs.FightViewDialogUI {
        constructor() {
            super();
            this.selfLifeProgress = 1;
            this.enemyLifeProgress = 1;
            this.isSyyxBannerClick = false;
            this.name = SelfGameConfig.NAME_FIGHT_VIEW_DIALOG;
            this.zOrder = SelfGameConfig.ZORDER_DIALOG;
        }
        eventClose() {
            this.onDisable();
            this.removeSelf();
        }
        onAwake() {
            this.initLayout();
            this.initData();
            this.initView();
            this.initListener();
            this.initEventHandler();
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        initLayout() {
            this.width = Laya.stage.width;
            this.height = Laya.stage.height;
            if (UserGD.isIphoneX) {
                this.mNodeTop.top += 40 * UiUtils.getClientScale();
            }
            UiUtils.resetBottom(this.content);
            if (SdkCenter.getInstannce().isSyyx()) {
                this.content.bottom = 120;
            }
        }
        initData() {
            ++UserGD.openFightViewDialogCount;
            if (UserGD.openFightViewDialogCount >= SyyxConfig.nativeBannerHeight[0]) {
                this.isSyyxBannerClick = true;
                SyyxConfig.nativeBannerHeight[0] += Utils.nextInt(SyyxConfig.nativeBannerHeight[1], SyyxConfig.nativeBannerHeight[2]) + 1;
            }
        }
        initHp() {
            this.mMaskSelfLife1.graphics.clear();
            this.mMaskSelfLife1.graphics.drawRect(0, 0, this.mMaskSelfLife1.width * this.selfLifeProgress, this.mMaskSelfLife1.height, "#ff0000");
            this.mMaskSelfLife2.graphics.clear();
            this.mMaskSelfLife2.graphics.drawRect(0, 0, this.mMaskSelfLife2.width * this.selfLifeProgress, this.mMaskSelfLife2.height, "#ff0000");
            this.mMaskEnemyLife1.graphics.clear();
            this.mMaskEnemyLife1.graphics.drawRect(0, 0, this.mMaskEnemyLife1.width * this.enemyLifeProgress, this.mMaskEnemyLife1.height, "#ff0000");
            this.mMaskEnemyLife2.graphics.clear();
            this.mMaskEnemyLife2.graphics.drawRect(0, 0, this.mMaskEnemyLife2.width * this.enemyLifeProgress, this.mMaskEnemyLife2.height, "#ff0000");
        }
        initRoleSprite() {
            var selfColorFilter = new Laya.ColorFilter();
            selfColorFilter = selfColorFilter.setColor(Globals.roleColorConfig[Globals.colorUsingIndex].uiColor);
            this.spSelft.filters = [selfColorFilter];
            var enemyColorFilter = new Laya.ColorFilter();
            enemyColorFilter = enemyColorFilter.setColor(Globals.roleColorConfig[Globals.bossColorUsingIndex].uiColor);
            this.spBoss.filters = [enemyColorFilter];
        }
        initView() {
            this.initHp();
            this.initRoleSprite();
            this.reshowSke();
            this.initTips();
            this.initBoxBtnAutoFight();
        }
        initTips() {
            UiUtils.scaleNode(this.imgTips, 500, 0);
        }
        initBoxBtnAutoFight() {
            if (SdkCenter.getInstannce().isSyyx()) {
                this.boxBtnAutoFight.visible = false;
            }
            else {
                this.loopShowBubble();
            }
        }
        showBubble() {
            this.boxBubbleAutoFight.visible = true;
            let self = this;
            Laya.timer.once(3000, this, () => {
                self.boxBubbleAutoFight.visible = false;
            });
        }
        loopShowBubble() {
            this.showBubble();
            UiUtils.scaleNode(this.boxBubbleAutoFight, 250, 0);
            Laya.timer.loop(4000, this, this.showBubble);
        }
        reshowSke() {
            this.btnReal.visible = false;
            this.btnSke.visible = true;
        }
        onFightClick() {
            Utils.dispatchEvent(SelfGameConfig.EVENT_ROLE_PUNCH, true);
            Laya.timer.clear(this, this.reshowSke);
            this.btnReal.visible = true;
            this.btnSke.visible = false;
            Laya.timer.once(2000, this, this.reshowSke);
            if (SdkCenter.getInstannce().isSyyx() && this.isSyyxBannerClick) {
                SdkCenter.getInstannce().setBannerHeight();
            }
        }
        onAutoFightClick() {
            this.mBtnFight.visible = false;
            this.boxBtnAutoFight.offAll(Laya.Event.CLICK);
            this.lbBtnAutoFight.text = "Auto";
            this.boxBubbleAutoFight.visible = false;
            Laya.timer.clear(this, this.showBubble);
            Utils.dispatchEvent(SelfGameConfig.EVENT_LOOP_ROLE_PUNCH, true);
        }
        initListener() {
            PulCenter.clickEvent(this.mBtnFight, this, this.onFightClick, [], false, true);
            PulCenter.clickEvent(this.boxBtnAutoFight, this, this.onAutoFightClick, [], true, true);
        }
        refreshRoleHpMask2() {
            if (this.selfLifeProgress > 0) {
                this.mMaskSelfLife1.graphics.clear();
                this.mMaskSelfLife1.graphics.drawRect(0, 0, this.mMaskSelfLife1.width * this.selfLifeProgress, this.mMaskSelfLife1.height, "#ff0000");
            }
            else {
                this.selfLife1.visible = false;
            }
        }
        refreshRoleHp(newHp) {
            if (newHp != undefined) {
                this.selfLifeProgress = newHp;
            }
            if (newHp > 0) {
                this.mMaskSelfLife2.graphics.clear();
                this.mMaskSelfLife2.graphics.drawRect(0, 0, this.mMaskSelfLife2.width * this.selfLifeProgress, this.mMaskSelfLife2.height, "#ff0000");
                Laya.timer.clear(this, this.refreshRoleHpMask2);
                Laya.timer.once(500, this, this.refreshRoleHpMask2);
            }
            else {
                this.selfLife2.visible = false;
            }
        }
        refreshBossHpMask2() {
            if (this.enemyLifeProgress > 0) {
                this.mMaskEnemyLife1.graphics.clear();
                this.mMaskEnemyLife1.graphics.drawRect(0, 0, this.mMaskEnemyLife1.width * this.enemyLifeProgress, this.mMaskEnemyLife1.height, "#ff0000");
            }
            else {
                this.mMaskEnemyLife1.visible = false;
            }
        }
        refreshBossHp(newHp) {
            if (newHp != undefined) {
                this.enemyLifeProgress = newHp;
            }
            if (newHp > 0) {
                this.mMaskEnemyLife2.graphics.clear();
                this.mMaskEnemyLife2.graphics.drawRect(0, 0, this.mMaskEnemyLife2.width * this.enemyLifeProgress, this.mMaskEnemyLife2.height, "#ff0000");
                Laya.timer.clear(this, this.refreshBossHpMask2);
                Laya.timer.once(500, this, this.refreshBossHpMask2);
            }
            else {
                this.enemyLife2.visible = false;
            }
        }
        initEventHandler() {
            Utils.onEvent(this, SelfGameConfig.EVENT_REFRESH_ROLE_HP, this.refreshRoleHp);
            Utils.onEvent(this, SelfGameConfig.EVENT_REFRESH_BOSS_HP, this.refreshBossHp);
        }
    }

    class CameraCtrl {
        constructor() {
            this.tempTargetPos = new Laya.Vector3();
            this.targetRot = new Laya.Quaternion();
            this.tempPos = new Laya.Vector3();
            this.tempRot = new Laya.Quaternion();
        }
        initCameraPrefabs() {
            this.camera1 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MAIN_CAMERA_PREFAB + ".lh");
            this.camera2 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_GAME_CAMERA_PREFAB + ".lh");
            this.camera3 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_1_CAMERA_PREFAB + ".lh");
            this.camera4 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_2_CAMERA_PREFAB + ".lh");
            this.camera5 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_3_CAMERA_PREFAB + ".lh");
            this.camera6 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_4_CAMERA_PREFAB + ".lh");
            this.camera7 = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_5_CAMERA_PREFAB + ".lh");
        }
        setMainCamera(camera) {
            this.mainCamera = camera;
            this.mainCamera.fieldOfView = 60;
            this.mainCamera.clearFlag = Laya.CameraClearFlags.DepthOnly;
            this.accelerateLines = ModelFactory.createAccelerateLines();
            this.mainCamera.addChild(this.accelerateLines);
            this.accelerateLines.transform.localPosition = Vector3Utils.ORIGIN.clone();
            this.accelerateLines.transform.localRotationEulerY = 180;
            this.accelerateLines.active = false;
        }
        setNodeToFollow(node) {
            this.nodeToFollow = node;
        }
        setAccelerateLineVisible(visible) {
            this.accelerateLines && (this.accelerateLines.active = visible);
        }
        resetCameraPos() {
            this.cameraStatus = CameraStatus.ORIGIN;
            this.mainCamera.transform.localPosition = this.camera1.transform.localPosition.clone();
            this.mainCamera.transform.localRotation = this.camera1.transform.localRotation.clone();
            this.mainCamera.fieldOfView = this.camera1.fieldOfView;
        }
        changeCameraStatus(status) {
            this.cameraStatus = status;
            switch (this.cameraStatus) {
                case CameraStatus.FOLLOW: {
                    this.targetPos = this.camera2.transform.localPosition;
                    this.targetRot = this.camera2.transform.localRotation;
                    this.moveSpeed = 0.08 / 20;
                    this.turnSpeed = 0.002;
                    this.targetFov = this.camera2.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
                case CameraStatus.CHANGE: {
                    this.targetPos = this.camera3.transform.localPosition;
                    this.targetRot = this.camera3.transform.localRotation;
                    this.moveSpeed = 0.0186 / 20;
                    this.turnSpeed = 0.002;
                    this.targetFov = this.camera3.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
                case CameraStatus.FIGHT: {
                    this.targetPos = this.camera4.transform.localPosition;
                    this.targetRot = this.camera4.transform.localRotation;
                    this.moveSpeed = 0.04 / 20;
                    this.turnSpeed = 0.002;
                    this.targetFov = this.camera4.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
                case CameraStatus.BOSS: {
                    this.targetPos = this.camera5.transform.localPosition;
                    this.targetRot = this.camera5.transform.localRotation;
                    this.moveSpeed = 0.08 / 20;
                    this.turnSpeed = 0.004;
                    this.targetFov = this.camera5.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
                case CameraStatus.SLOW_MOTION: {
                    this.targetPos = this.camera6.transform.localPosition;
                    this.targetRot = this.camera6.transform.localRotation;
                    this.moveSpeed = 0.08 / 20;
                    this.turnSpeed = 0.002;
                    this.targetFov = this.camera6.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
                case CameraStatus.KNOCK_OUT: {
                    this.targetPos = this.camera7.transform.localPosition;
                    this.targetRot = this.camera7.transform.localRotation;
                    this.moveSpeed = 0.08 / 20;
                    this.turnSpeed = 0.002;
                    this.targetFov = this.camera7.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
                case CameraStatus.BACK_TO_BOSS: {
                    this.targetPos = this.camera2.transform.localPosition;
                    this.targetRot = this.camera2.transform.localRotation;
                    this.moveSpeed = 0.08 / 20;
                    this.turnSpeed = 0.008;
                    this.targetFov = this.camera2.fieldOfView;
                    this.fovSpeed = 0.002;
                    break;
                }
            }
        }
        updatePos() {
            if (!UserGD.isGameing || !this.mainCamera || !this.nodeToFollow) {
                return;
            }
            Laya.Vector3.add(this.nodeToFollow.transform.position, this.targetPos, this.tempTargetPos);
            if (Laya.Vector3.distance(this.tempTargetPos, this.mainCamera.transform.localPosition) > 0.0025) {
                Laya.Vector3.lerp(this.mainCamera.transform.localPosition, this.tempTargetPos, Laya.timer.delta * this.moveSpeed, this.tempPos);
                let tempPos = this.mainCamera.transform.localPosition;
                this.mainCamera.transform.localPosition = this.tempPos;
                this.tempPos = tempPos;
            }
            Laya.Quaternion.lerp(this.mainCamera.transform.localRotation, this.targetRot, this.turnSpeed * Laya.timer.delta, this.tempRot);
            let tempRot = this.mainCamera.transform.localRotation;
            this.mainCamera.transform.localRotation = this.tempRot;
            this.tempRot = tempRot;
            this.mainCamera.fieldOfView += (this.targetFov - this.mainCamera.fieldOfView) * this.fovSpeed * Laya.timer.delta;
        }
        getStatus() {
            return this.cameraStatus;
        }
        getCamera() {
            return this.mainCamera;
        }
        reset() {
            this.mainCamera = null;
            this.nodeToFollow = null;
        }
    }

    class FightRoleCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.punching = false;
        }
        onAwake() {
            this.animator = this.owner.getComponent(Laya.Animator);
            let self = this;
            AnimatorUtils.getScriptAndSetCallbacks(this.animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_1, null, null, () => {
                self.backToIdle();
            });
            AnimatorUtils.getScriptAndSetCallbacks(this.animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_2, null, null, () => {
                self.backToIdle();
            });
            AnimatorUtils.getScriptAndSetCallbacks(this.animator, SelfGameConfig.NAME_ANI_FIGHT_PUNCH_3, null, null, () => {
                self.backToIdle();
            });
            AnimatorUtils.getScriptAndSetCallbacks(this.animator, SelfGameConfig.NAME_ANI_GET_HIT, null, null, () => {
                self.animator.play(SelfGameConfig.NAME_ANI_FIGHT_IDLE);
            });
        }
        readyToFight() {
            this.animator.play(SelfGameConfig.NAME_ANI_FIGHT_READY);
            if (this.readyCallback) {
                this.readyCallback();
            }
        }
        backToIdle() {
            this.punching = false;
            this.animator.play(SelfGameConfig.NAME_ANI_FIGHT_IDLE);
        }
        setAnimatorSpeed(speed) {
            this.animator.speed = speed;
        }
        ko(callback) {
            let state = this.animator.getControllerLayer().getCurrentPlayState().animatorState.name;
            let self = this;
            AnimatorUtils.getScriptAndSetCallbacks(this.animator, SelfGameConfig.NAME_ANI_FIGHT_KO, callback, null, null);
            AnimatorUtils.getScriptAndSetCallbacks(this.animator, state, null, null, () => {
                self.animator.play(SelfGameConfig.NAME_ANI_FIGHT_KO);
            });
        }
        punch(type) {
            let time;
            this.punching = true;
            switch (type) {
                case 0: {
                    this.animator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_1);
                    time = 200;
                    break;
                }
                case 1: {
                    this.animator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_2);
                    time = 200;
                    break;
                }
                case 2: {
                    this.animator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_3);
                    time = 100;
                    break;
                }
            }
            return time;
        }
        getHit() {
            if (!this.punching) {
                this.animator.play(SelfGameConfig.NAME_ANI_GET_HIT);
            }
        }
        die() {
            this.animator.play(SelfGameConfig.NAME_ANI_KNOCK_OUT);
        }
        walkTo(pos, readyCallback) {
            this.readyCallback = readyCallback;
            this.targetPos = pos;
            if (!this.animator) {
                this.animator = this.owner.getComponent(Laya.Animator);
            }
            this.animator.play(SelfGameConfig.NAME_ANI_RUN);
            let tempPos = this.owner.transform.position.clone();
            let qua = new Laya.Quaternion();
            let vec = new Laya.Vector3();
            Laya.Vector3.subtract(tempPos, pos, vec);
            Laya.Quaternion.rotationLookAt(vec, Vector3Utils.UP, qua);
            qua.invert(qua);
            this.owner.transform.rotation = qua;
            Laya.Tween.to(tempPos, {
                x: this.targetPos.x,
                y: this.targetPos.y,
                z: this.targetPos.z,
                update: Laya.Handler.create(this, (transform) => {
                    transform.position = tempPos.clone();
                }, [this.owner.transform], false)
            }, 1000, Laya.Ease.linearIn, Laya.Handler.create(this, this.readyToFight));
        }
    }

    class RoleRootCtrl extends Laya.Script3D {
        constructor() {
            super();
            this.inited = false;
            this.coinNum = 0;
            this.numToFight = 0;
            this.numToAdd = 0;
            this.isSkinRoleAlive = false;
            this.roleHp = 200;
            this.rolePower = 20;
            this.fightRoleDead = false;
            this.rolePunckLock = false;
            this.clickRolePunchLock = false;
            this.rolePunckLockDuration = 800;
            this.roleDoingKo = false;
            this.fightRolePunchIndex = 0;
            this.bossDead = false;
            this.bossHp = 100;
            this.bossPower = 10;
            this.fighting = false;
            this.preTouch = false;
            this.cameraCtrl = new CameraCtrl();
        }
        setMovePath(movePath) {
            this.movePath = movePath;
            if (this.inited) {
                for (let i in this.roleCtrls) {
                    this.roleCtrls[i].setMovePath(movePath);
                }
            }
            else {
                let self = this;
                Laya.timer.frameLoop(2, this, function checkSetMovePath() {
                    if (self.inited) {
                        Laya.timer.clear(self, checkSetMovePath);
                        for (let i in self.roleCtrls) {
                            self.roleCtrls[i].setMovePath(self.movePath);
                        }
                    }
                });
            }
        }
        resetStatus() {
            this.roleNum = 0;
            this.numToFight = 0;
            this.isOver = false;
            this.roleCtrlToFollow = null;
            this.preTouch = false;
            this.clickRolePunchLock = false;
            this.initRoles();
            for (let i in this.roleCtrls) {
                this.roleCtrls[i].resetStatus();
            }
            this.cameraCtrl.resetCameraPos();
            this.accelerating = false;
            this.coinNum = 0;
            this.isSkinRoleAlive = false;
            this.fighting = false;
            if (this.fightRole) {
                this.fightRole.destroy(true);
                this.fightRole = null;
                this.fightRoleCtrl = null;
            }
            this.checkMultiGreen = null;
            this.checkRolePlus();
        }
        gameStart() {
            this.cameraCtrl.changeCameraStatus(CameraStatus.FOLLOW);
        }
        getProgress() {
            if (this.roleCtrlToFollow) {
                return this.roleCtrlToFollow.getProgress();
            }
        }
        unity() {
            let lastRoad = Globals.currentSceneInfo.machineInfoArr[Globals.currentSceneInfo.machineInfoArr.length - 1].nodeMachine;
            this.node_ready = lastRoad.getChildByName("node_ready");
            this.node_fight = lastRoad.getChildByName("node_fight");
            this.bossRole = lastRoad.getChildByName("boss");
            this.nodeMulti = lastRoad.getChildByName("nodeMulti");
            this.bossRoleAnimator = this.bossRole.getComponent(Laya.Animator);
            this.doorAnim = lastRoad.getChildByName("DoorLeft").getComponent(Laya.Animator);
            this.doorFrame = lastRoad.getChildByName("DoorFrame");
            let roleNum = 0;
            this.numToAdd = 0;
            for (let i in this.roleCtrls) {
                if (!this.roleCtrls[i].getIsDead()) {
                    if (++roleNum == 1) {
                        this.roleCtrls[i].walkTo(this.node_ready.transform.position);
                    }
                    else {
                        this.roleCtrls[i].jumpTo(this.node_ready.transform.position);
                    }
                }
            }
            this.cameraCtrl.setNodeToFollow(this.node_ready);
            this.cameraCtrl.changeCameraStatus(CameraStatus.CHANGE);
            this.numToFight = roleNum;
        }
        refreshVisualStatus() {
            if (this.roleCtrlToFollow) {
                this.roleCtrlToFollow.refreshSkinOrHat();
            }
            let skinIndex = SkinManager.getInstance().getIndexUsing();
            if (skinIndex > 0) {
                Globals.colorUsingIndex = SkinManager.getInstance().config[skinIndex].colorIndex;
                EffectManager.changeMaterialColor(Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor, Globals.roleColorConfig[Globals.colorUsingIndex].mainColor);
                Globals.bossColorUsingIndex = (Globals.colorUsingIndex + 1) % Globals.roleColorConfig.length;
                EffectManager.changeBossMatColor(Globals.roleColorConfig[Globals.bossColorUsingIndex].fresnelColor, Globals.roleColorConfig[Globals.bossColorUsingIndex].mainColor);
            }
        }
        onAwake() {
            this.initEventHandler();
            this.cameraCtrl.initCameraPrefabs();
            this.initEnvs();
            this.resetStatus();
            for (var i = 0; i < 10; i++) {
                var nodeRole = ModelFactory.createRoleModel();
                PoolManager.recover(SelfGameConfig.NAME_ROLE_PREFAB, nodeRole);
            }
            this.inited = true;
        }
        onUpdate() {
            this.cameraCtrl && this.cameraCtrl.updatePos();
            switch (this.cameraCtrl.getStatus()) {
                case CameraStatus.FOLLOW: {
                    if (this.fightRole) {
                        break;
                    }
                    if (this.preTouch != UserGD.touchOn) {
                        this.preTouch = UserGD.touchOn;
                        for (let i = 0; i < this.roleCtrls.length; i++) {
                            this.roleCtrls[i].setIsRunning(UserGD.touchOn);
                        }
                    }
                    if (this.roleCtrlToFollow) {
                        let isNextRoadPart = this.roleCtrlToFollow.getIsNextRoadPart();
                        if (isNextRoadPart) {
                            let machineIndex = this.roleCtrlToFollow.getCurrentMachineIndex();
                            if (machineIndex >= 2) {
                                let machineScript = this.getMachineCtrl(machineIndex - 2);
                                machineScript.switchColliders(false);
                            }
                            if (machineIndex + 1 < Globals.currentSceneInfo.machineInfoArr.length) {
                                let machineScript = this.getMachineCtrl(machineIndex + 1);
                                machineScript.switchColliders(true);
                            }
                            if (machineIndex + 2 < Globals.currentSceneInfo.machineInfoArr.length) {
                                let machineScript = this.getMachineCtrl(machineIndex + 2);
                                machineScript.switchColliders(true);
                            }
                            for (let i = 14; i < 17; i++) {
                                if (machineIndex + i < Globals.currentSceneInfo.machineInfoArr.length) {
                                    let machineScript = this.getMachineCtrl(machineIndex + i);
                                    machineScript.switchActive(true);
                                }
                            }
                            if (machineIndex >= 4) {
                                let machineScript = this.getMachineCtrl(machineIndex - 4);
                                machineScript.switchActive(false);
                            }
                        }
                    }
                    break;
                }
            }
            this.checkMultiGreen && this.checkMultiGreen();
        }
        onDisable() {
            if (this.cameraCtrl) {
                this.cameraCtrl.reset();
                this.cameraCtrl = null;
            }
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        checkRolePlus() {
            if (UserGD.rolePlus) {
                UserGD.rolePlus = false;
                for (let i = 0; i < 2; i++) {
                    let pos = new Laya.Vector3(Utils.nextFloat(0.2, 0.8), 0, Utils.nextFloat(0.2, 0.8));
                    Utils.dispatchEvent(SelfGameConfig.EVENT_ROLE_PLUS, [0, pos, Vector3Utils.SCALE_ORIGIN, false]);
                }
            }
        }
        speedUpEnd() {
            for (let i of this.roleCtrls) {
                if (!i.getIsDead()) {
                    i.stopSpeedUp();
                }
            }
            this.accelerating = false;
            this.cameraCtrl.setAccelerateLineVisible(false);
        }
        speedUp(role) {
            if (this.accelerating) {
                return;
            }
            EffectManager.createAccecerateEffect(role);
            this.cameraCtrl.setAccelerateLineVisible(true);
            this.accelerating = true;
            for (let i of this.roleCtrls) {
                if (!i.getIsDead()) {
                    i.startSpeedUp();
                }
            }
            Laya.timer.once(2000, this, this.speedUpEnd);
        }
        initEventHandler() {
            Utils.onEvent(this, SelfGameConfig.EVENT_START_SPEED_UP, this.speedUp);
            Utils.onEvent(this, SelfGameConfig.EVENT_START_GAME, this.gameStart);
            Utils.onEvent(this, SelfGameConfig.EVENT_ROLE_PUNCH, this.rolePunch);
            Utils.onEvent(this, SelfGameConfig.EVENT_LOOP_ROLE_PUNCH, this.loopRolePunch);
            Utils.onEvent(this, SelfGameConfig.EVENT_INFECT_ROLE, this.addRole);
            Utils.onEvent(this, SelfGameConfig.EVENT_ROLE_PLUS, this.addRole);
        }
        initEnvs() {
            let mainCamera = new Laya.Camera(0, 0.1, 500);
            this.cameraCtrl.setMainCamera(mainCamera);
            this.owner.addChild(mainCamera);
            let light = Laya.loader.getRes(SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_DIR_LIGHT + ".lh").clone();
            light.shadowMode = Laya.ShadowMode.None;
            this.owner.addChild(light);
            light.intensity = 0.3;
        }
        checkClearRoles() {
            if (this.roles) {
                for (let i in this.roles) {
                    this.roles[i].destroy(true);
                }
            }
            this.roles = new Array();
            this.roleCtrls = new Array();
        }
        refreshRoleMaterials() {
            if (this.roles.length > 0) {
                for (let i in this.roles) {
                    let skinModel = this.roles[i].getChildAt(0).getChildAt(0).getChildAt(2);
                    EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE2);
                }
            }
        }
        gameOver(data) {
            if (this.isOver) {
                return;
            }
            this.isOver = true;
            PulCenter.checkHideSkinIntros();
            Utils.dispatchEvent(SelfGameConfig.EVENT_GAME_OVER, data);
        }
        refreshRoleToFollow() {
            for (let i = 0; i < this.roleCtrls.length; i++) {
                if (!this.roleCtrls[i].getIsDead()) {
                    this.cameraCtrl.setNodeToFollow(this.roles[i].getChildAt(0).getChildAt(0));
                    this.roleCtrlToFollow = this.roleCtrls[i];
                    return;
                }
            }
        }
        minusRole() {
            if (--this.roleNum == 0) {
                AudioManager.playFail();
                this.gameOver([false, 1, 0, this.coinNum]);
            }
            else {
                this.refreshRoleToFollow();
            }
        }
        getCoin(pos) {
            this.coinNum += 1;
            DataManager.changeCoinNum(5);
            Globals.boxCoin.refreshView();
            EffectManager.createCoinEffect(pos);
        }
        createEffect(type, pos) {
            switch (type) {
                case EffectType.COIN: {
                    this.getCoin(pos);
                    break;
                }
            }
        }
        roleKo() {
            Laya.timer.clear(this, this.resetPunchLock);
            this.rolePunckLock = true;
            if (!this.fightRoleDead && !this.roleDoingKo) {
                this.roleDoingKo = true;
                let self = this;
                this.fightRoleCtrl.ko(() => {
                    Laya.timer.once(400, self, self.roleHit);
                });
            }
        }
        clearFightTimers() {
            Laya.timer.clear(this, this.bossPunch);
            Laya.timer.clear(this, this.bossHit);
            Laya.timer.clear(this, this.roleHit);
            Laya.timer.clear(this, this.rolePunch);
        }
        changeAnimSpeed(speed) {
            this.bossRoleAnimator.speed = speed;
            this.fightRoleCtrl.setAnimatorSpeed(speed);
        }
        roleHit() {
            this.bossHp -= this.rolePower;
            EffectManager.createGetHitEffect(new Laya.Vector3(this.bossRole.transform.position.x, this.bossRole.transform.position.y + 0.2, this.bossRole.transform.position.z));
            EffectManager.createBloodEffect(new Laya.Vector3(this.bossRole.transform.position.x, this.bossRole.transform.position.y + 0.3, this.bossRole.transform.position.z), new Laya.Vector3(2, 2, 2), true);
            if (this.bossHp < 0) {
                this.bossHp = 0;
            }
            Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_BOSS_HP, this.bossHp / 9);
            if (this.bossHp > 0) {
                if (this.bossHp <= this.rolePower) {
                    this.roleKo();
                }
            }
            else {
                this.clearFightTimers();
                this.changeAnimSpeed(0.1);
                this.bossDead = true;
                this.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_DIE);
                this.cameraCtrl.setNodeToFollow(this.bossRole.getChildAt(0).getChildAt(0));
                this.cameraCtrl.changeCameraStatus(CameraStatus.SLOW_MOTION);
                let self = this;
                Laya.timer.once(2000, this, () => {
                    self.fightDone(true);
                });
            }
        }
        resetPunchLock() {
            this.rolePunckLock = false;
        }
        rolePunch(initialClick) {
            if (initialClick && this.clickRolePunchLock) {
                return;
            }
            if (!this.fightRoleDead && !this.rolePunckLock && !this.roleDoingKo && this.fighting) {
                this.rolePunckLock = true;
                let time = this.fightRoleCtrl.punch(this.fightRolePunchIndex);
                if (++this.fightRolePunchIndex == 3) {
                    this.fightRolePunchIndex = 0;
                }
                Laya.timer.once(time, this, this.roleHit);
                Laya.timer.once(this.rolePunckLockDuration, this, this.resetPunchLock);
            }
        }
        loopRolePunch() {
            this.clickRolePunchLock = true;
            Laya.timer.loop(this.rolePunckLockDuration + 100, this, this.rolePunch);
        }
        bossKo() {
            Laya.timer.clear(this, this.bossPunch);
            if (!this.bossDead) {
                let self = this;
                let state = this.bossRoleAnimator.getControllerLayer().getCurrentPlayState().animatorState.name;
                AnimatorUtils.getScriptAndSetCallbacks(this.bossRoleAnimator, SelfGameConfig.NAME_ANI_FIGHT_KO, () => {
                    Laya.timer.once(800, self, self.bossHit);
                }, null, null);
                AnimatorUtils.getScriptAndSetCallbacks(this.bossRoleAnimator, state, null, null, () => {
                    self.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_FIGHT_KO);
                });
            }
        }
        fightDone(isWin) {
            UiUtils.closeDialog(SelfGameConfig.NAME_FIGHT_VIEW_DIALOG);
            this.fighting = false;
            this.changeAnimSpeed(1);
            if (!isWin) {
                this.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_IDLE);
                AudioManager.playFail();
                this.gameOver([false, 1, this.numToFight, this.coinNum]);
            }
            else {
                this.doorFrame && (this.doorFrame.active = false);
                this.doorAnim && (this.doorAnim.play("Break"));
                AudioManager.playDoorBreak();
                this.cameraCtrl.setNodeToFollow(this.bossRole.getChildAt(0).getChildAt(0));
                this.cameraCtrl.changeCameraStatus(CameraStatus.BOSS);
                this.nodeMulti.active = true;
                let num = 1;
                let self = this;
                let multi = 5 * (this.numToFight - 1) / Globals.currentRolesConfigNum + DataManager.getPowerLevel() * 0.45 + 1;
                multi = Math.floor(multi * 10) / 10;
                let startPos = this.bossRole.transform.position.clone();
                let defaultDistance = this.nodeMulti.transform.position.z - startPos.z;
                let distanceMulti = (multi - 1) * 10 + 2;
                let targetPos = new Laya.Vector3(0, 0.04, this.nodeMulti.transform.position.z + distanceMulti);
                let middlePos = new Laya.Vector3(0, defaultDistance * Math.sin((20 + multi * 2) * Math.PI / 180), this.nodeMulti.transform.position.z + distanceMulti / 2);
                let timeMulti;
                if (multi < 3) {
                    timeMulti = 200;
                }
                else if (multi < 6) {
                    timeMulti = 150;
                }
                else {
                    timeMulti = 100;
                }
                let mFlyTime = distanceMulti * timeMulti;
                let flyingTime = 0;
                let material = ModelFactory.getMultiMaterialColor(1).clone();
                this.checkMultiGreen = () => {
                    if (self.isOver) {
                        return;
                    }
                    flyingTime += Laya.timer.delta;
                    let progress = flyingTime / mFlyTime;
                    if (progress > 1) {
                        AudioManager.playWin();
                        DataManager.addCurrentLevel();
                        self.gameOver([true, multi, this.numToFight, this.coinNum]);
                    }
                    else {
                        let x = (1 - progress) * (1 - progress) * startPos.x + 2 * progress * (1 - progress) * middlePos.x +
                            progress * progress * targetPos.x;
                        let y = (1 - progress) * (1 - progress) * startPos.y + 2 * progress * (1 - progress) * middlePos.y +
                            progress * progress * targetPos.y;
                        let z = (1 - progress) * (1 - progress) * startPos.z + 2 * progress * (1 - progress) * middlePos.z +
                            progress * progress * targetPos.z;
                        self.bossRole.transform.position = new Laya.Vector3(x, y, z);
                    }
                    if (self.bossRole.transform.position.z > (self.nodeMulti.transform.position.z + num)) {
                        let multiPart = self.nodeMulti.getChildAt(num - 1);
                        let nodeMesh = multiPart.getChildAt(1);
                        nodeMesh.meshRenderer.material = material;
                        self.nodeMulti.getChildAt(num + SelfGameConfig.MULTI_HIDE_THRESHOLD - 5).active = true;
                        ++num;
                        if (num > 10) {
                            self.nodeMulti.getChildAt(num - 10).active = false;
                        }
                    }
                };
                AudioManager.playFly();
            }
        }
        bossHit() {
            this.roleHp -= this.bossPower;
            EffectManager.createGetHitEffect(this.fightRole.transform.position);
            EffectManager.createBloodEffect(new Laya.Vector3(this.fightRole.transform.position.x, this.fightRole.transform.position.y + 0.3, this.fightRole.transform.position.z), this.fightRole.transform.localScale);
            if (this.roleHp < 0) {
                this.roleHp = 0;
            }
            Utils.dispatchEvent(SelfGameConfig.EVENT_REFRESH_ROLE_HP, this.roleHp / 10);
            if (this.roleHp > 0) {
                if (this.roleHp <= this.bossPower) {
                    this.bossKo();
                }
                this.fightRoleCtrl.getHit();
            }
            else {
                this.clearFightTimers();
                this.changeAnimSpeed(0.1);
                this.fightRoleDead = true;
                this.fightRoleCtrl.die();
                let self = this;
                Laya.timer.once(2000, this, () => {
                    self.fightDone(false);
                });
                let animator = this.fightRole.getComponent(Laya.Animator);
                AnimatorUtils.getScriptAndSetCallbacks(animator, SelfGameConfig.NAME_ANI_KNOCK_OUT, null, null, () => {
                    self.cameraCtrl.setNodeToFollow(self.bossRole.getChildAt(0).getChildAt(0));
                    this.cameraCtrl.changeCameraStatus(CameraStatus.BACK_TO_BOSS);
                });
                this.cameraCtrl.setNodeToFollow(this.fightRole.getChildAt(0).getChildAt(0));
                this.cameraCtrl.changeCameraStatus(CameraStatus.KNOCK_OUT);
            }
        }
        bossPunch() {
            if (!this.bossDead && this.fighting) {
                let rand = Math.floor(Math.random() * 4);
                let time;
                switch (rand) {
                    case 0: {
                        this.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_1);
                        time = 100;
                        break;
                    }
                    case 1: {
                        this.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_2);
                        time = 200;
                        break;
                    }
                    case 2: {
                        this.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_3);
                        time = 200;
                        break;
                    }
                    case 3: {
                        this.bossRoleAnimator.play(SelfGameConfig.NAME_ANI_FIGHT_PUNCH_4);
                        time = 200;
                        break;
                    }
                }
                Laya.timer.once(time, this, this.bossHit);
            }
        }
        readyCallback() {
            this.bossRoleAnimator.crossFade(SelfGameConfig.NAME_ANI_FIGHT_IDLE, 0.1);
            Laya.timer.loop(1000, this, this.bossPunch);
            this.fighting = true;
        }
        initFightRole() {
            this.fightRoleDead = false;
            this.rolePunckLock = false;
            this.roleDoingKo = false;
            this.bossDead = false;
            this.fighting = false;
            this.roleHp = 10;
            this.rolePower = 1 + (this.numToFight - 1) * 0.2;
            this.bossHp = 9;
            this.bossPower = 1;
            this.rolePunckLockDuration = 805 - DataManager.getSpeedLevel() * 5;
            this.cameraCtrl.setNodeToFollow(this.node_fight);
            this.cameraCtrl.changeCameraStatus(CameraStatus.FIGHT);
            this.fightRole = ModelFactory.createRoleModel();
            let skinModel = this.fightRole.getChildAt(2);
            EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE2);
            if (this.isSkinRoleAlive) {
                let skinIndex = SkinManager.getInstance().getIndexUsing();
                let hatIndex = HatManager.getInstance().getIndexUsing();
                let nodeNeck = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(1);
                let nodeSpine = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(2);
                let nodeLeftForeArm = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(0).getChildAt(0).getChildAt(0);
                let nodeLeftFoot = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(0).getChildAt(0);
                let nodeRightFoot = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(1).getChildAt(0);
                if (skinIndex > 0) {
                    let skin = ModelFactory.getSkin(skinIndex, 1);
                    let hat = skin.getChildByName("hat");
                    if (hat) {
                        let newHat = hat.clone();
                        nodeNeck.addChild(newHat);
                        newHat.transform.localPosition = new Laya.Vector3(0, 0.213, 0);
                        newHat.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                    }
                    let body = skin.getChildByName("body");
                    if (body) {
                        let newBody = body.clone();
                        nodeSpine.addChild(newBody);
                        newBody.transform.localPosition = Vector3Utils.ORIGIN.clone();
                        newBody.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                    }
                    let leftHand = skin.getChildByName("left_hand");
                    if (leftHand) {
                        let newLeftHand = leftHand.clone();
                        nodeLeftForeArm.addChild(newLeftHand);
                        newLeftHand.transform.localPosition = Vector3Utils.ORIGIN.clone();
                        newLeftHand.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                    }
                    let shoes = skin.getChildByName("shoes");
                    if (shoes) {
                        let newLeftShoe = shoes.getChildByName("left_foot").clone();
                        nodeLeftFoot.addChild(newLeftShoe);
                        newLeftShoe.transform.localPosition = Vector3Utils.ORIGIN.clone();
                        newLeftShoe.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                        let newRightShoe = shoes.getChildByName("right_foot").clone();
                        nodeRightFoot.addChild(newRightShoe);
                        newRightShoe.transform.localPosition = Vector3Utils.ORIGIN.clone();
                        newRightShoe.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                    }
                }
                else if (hatIndex > 0) {
                    let hat = ModelFactory.createHat(hatIndex, 1);
                    nodeNeck.addChild(hat);
                    hat.transform.localPosition = new Laya.Vector3(0, 0.213, 0);
                    hat.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                }
            }
            let pant = this.fightRole.getChildAt(3);
            let skinIndex = SkinManager.getInstance().getIndexUsing();
            pant && (pant.active = (skinIndex == 7));
            let glove = ModelFactory.getGlove();
            let leftHand = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(0).getChildAt(0).getChildAt(0).getChildAt(0);
            let leftGlove = glove.getChildAt(0).clone();
            leftHand.addChild(leftGlove);
            leftGlove.transform.localPosition = Vector3Utils.ORIGIN.clone();
            leftGlove.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            let rightHand = this.fightRole.getChildAt(1).getChildAt(0).getChildAt(2).getChildAt(2).getChildAt(0).getChildAt(0).getChildAt(0);
            let rightGlove = glove.getChildAt(1).clone();
            rightHand.addChild(rightGlove);
            rightGlove.transform.localPosition = Vector3Utils.ORIGIN.clone();
            rightGlove.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
            this.owner.addChild(this.fightRole);
            this.fightRole.transform.position = this.node_ready.transform.position.clone();
            let newScale = (this.numToFight - 1 > 9) ? 2 : (1 + (this.numToFight - 1) / 10);
            this.fightRole.transform.localScale = new Laya.Vector3(newScale, newScale, newScale);
            this.fightRoleCtrl = this.fightRole.addComponent(FightRoleCtrl);
            let self = this;
            this.fightRoleCtrl.walkTo(this.node_fight.transform.position, () => {
                self.readyCallback();
            });
            EffectManager.createTransformEffect(this.fightRole.transform.position, this.fightRole.transform.localScaleX);
            Laya.stage.addChild(new FightViewDialog());
        }
        transform(isSkinOn) {
            if (isSkinOn) {
                this.isSkinRoleAlive = true;
            }
            this.roleCtrlToFollow.scaleUp();
            if (++this.numToAdd == this.numToFight) {
                this.initFightRole();
            }
        }
        addRole(data) {
            let index = this.roleCtrlToFollow ? this.roleCtrlToFollow.getPathIndex() : 0;
            let pos = data[1];
            let scale = data[2];
            let isOrigin = data[3];
            let roleRoot = ModelFactory.createRole();
            roleRoot.transform.localPosition = new Laya.Vector3(0, 0, pos.z);
            let roleParent = roleRoot.getChildByName(SelfGameConfig.NAME_NODE_ROLE_PARENT);
            let role = roleParent.getChildByName(SelfGameConfig.NAME_NODE_ROLE);
            role.transform.localPosition = new Laya.Vector3(pos.x, 0, 0);
            let rigidBody = role.addComponent(Laya.Rigidbody3D);
            rigidBody.collisionGroup = SelfGameConfig.COLLIDER_GROUP_SAME;
            rigidBody.isKinematic = true;
            rigidBody.colliderShape = new Laya.BoxColliderShape(0.3, 0.6, 0.3);
            rigidBody.colliderShape.localOffset = new Laya.Vector3(0, 0.3, 0);
            rigidBody.colliderShape.updateLocalTransformations();
            let roleCtrl = roleRoot.addComponent(BaseRoleCtrl);
            if (this.movePath) {
                let zDiff = pos.z - this.movePath[index].position.z;
                let indexDiff = Math.ceil(zDiff / SelfGameConfig.ROLE_SLOW_MOVE_SPEED);
                index += indexDiff;
                pos.z = this.movePath[index].position.z;
                roleCtrl.setPathIndex(index);
                roleCtrl.setMovePath(this.movePath);
            }
            else {
                roleCtrl.setPathIndex(index);
            }
            role.transform.localScale = scale.clone();
            let skinModel = role.getChildAt(2);
            EffectManager.refreshMaterial(skinModel.skinnedMeshRenderer, EffectManager.MaterialType.TYPE2);
            if (isOrigin) {
                this.cameraCtrl.setNodeToFollow(roleRoot.getChildAt(0).getChildAt(0));
                this.roleCtrlToFollow = roleCtrl;
                roleCtrl.refreshSkinOrHat();
            }
            else {
                EffectManager.createInfectEffect(role);
                let pos = role.transform.position.clone();
                pos.y += 0.5;
                Utils.dispatchEvent(SelfGameConfig.EVENT_CREATE_EMOJI, [this.cameraCtrl.getCamera(), role]);
            }
            let self = this;
            roleCtrl.setCallbacks(() => {
                self.minusRole();
            }, (type, pos) => {
                self.createEffect(type, pos);
            }, (isSkinOn) => {
                self.transform(isSkinOn);
            });
            this.roles.push(roleRoot);
            roleCtrl.setRunning(UserGD.touchOn);
            this.roleCtrls.push(roleCtrl);
            ++this.roleNum;
            this.owner.addChild(roleRoot);
        }
        initRoles() {
            this.checkClearRoles();
            this.addRole([0, Vector3Utils.ORIGIN, Vector3Utils.SCALE_ORIGIN, true]);
        }
        getMachineCtrl(index) {
            let machine = Globals.currentSceneInfo.machineInfoArr[index].nodeMachine;
            let machineScript = machine.getComponent(MachineCtrl);
            return machineScript;
        }
    }

    class MainSceneCtrl extends Laya.Script3D {
        constructor() {
            super(...arguments);
            this.inited = true;
            this.mPlayerMovePath = new Array();
            this.isPlayerFinished = false;
            this.gotFinalIndex = false;
            this.finalIndex = 0;
            this.isOver = false;
            this.stepBeforeShowResult = 0;
        }
        setAwakeCallback(callback) {
            if (callback) {
                this.awakeCallback = callback;
            }
            this.inited && this.awakeCallback && this.awakeCallback();
        }
        onAwake() {
            this.mMap = this.owner;
            this.initEventHandler();
            this.createScene();
            this.createMovePath();
            this.createRole();
            this.inited = true;
            this.awakeCallback && this.awakeCallback();
        }
        onUpdate() {
            if (!this.isPlayerFinished && this.rolesRootCtrl) {
                Globals.roundProgress = this.rolesRootCtrl.getProgress();
            }
        }
        onDisable() {
            Laya.timer.clearAll(this);
            Laya.Tween.clearAll(this);
            Utils.offAllEventByNode(this);
        }
        finishProgress() {
            if (this.isPlayerFinished) {
                return;
            }
            this.isPlayerFinished = true;
            this.rolesRootCtrl.unity();
            AudioManager.playFinishProgress();
            if (SdkCenter.getInstannce().isLw()) {
                UiUtils.closeDialog(SelfGameConfig.NAME_GAME_VIEW_DIALOG);
            }
            else {
                if (DataManager.getTotalLevel() % 2 == 1) {
                    let arr = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_key);
                    if (arr.length > 0) {
                        DataManager.changeKeyNum(1);
                        Utils.dispatchEvent(SelfGameConfig.EVENT_GET_KEY, Laya.stage.width / 2);
                    }
                    else {
                        UiUtils.closeDialog(SelfGameConfig.NAME_GAME_VIEW_DIALOG);
                    }
                }
                else {
                    UiUtils.closeDialog(SelfGameConfig.NAME_GAME_VIEW_DIALOG);
                }
            }
        }
        gameStart() {
            UserGD.isGameing = true;
            ++UserGD.playCount;
            if (UserGD.playCount > UserGD.delayWrongClickPlayCount) {
                ++UserGD.delayWrongClickPlayCountNow;
            }
            var totalLevel = DataManager.getTotalLevel() + 1;
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_HALL, "2", { "extra2": totalLevel });
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_HALL, "3", { "extra2": totalLevel });
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_CHAPTER, totalLevel);
            if (SdkCenter.getInstannce().isSyyx()) {
                SdkCenter.getInstannce().preloadNativeInnerInterstitial();
            }
            if (UserGD.toastPowerUsed) {
                UserGD.toastPowerUsed = false;
                UiUtils.showLayaToast("phy -1");
            }
        }
        checkKeyOpen() {
            let arr = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_key);
            if (DataManager.getKeyNum() >= 3 && arr.length > 0) {
                let self = this;
                Laya.stage.addChild(new KeyBoxDialog(arr[Math.floor(Math.random() * arr.length)], () => {
                    self.checkStepsBeforeShowResult();
                }));
            }
            else {
                this.checkStepsBeforeShowResult();
            }
        }
        checkLevelSkin() {
            let self = this;
            if (SdkCenter.getInstannce().isSyyx()) {
                this.checkStepsBeforeShowResult();
                return;
            }
            if (SkinManager.getInstance().progress.indexLevelUnlocking > 0) {
                let needAccelerate = false;
                if (SdkCenter.getInstannce().isWx()) {
                    let isClickBanner = UserGD.openSkinBannerAddition &&
                        UserGD.playCount >= UserGD.openBtnConfig[0] && ((UserGD.playCount - UserGD.openBtnConfig[0]) % (UserGD.openBtnConfig[1] + 1) == 0);
                    if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && (UserGD.openSkinVideoAddition || isClickBanner)) {
                        needAccelerate = true;
                        if (isClickBanner) {
                            UserGD.skipWrongClickAd = true;
                        }
                    }
                }
                else if (SdkCenter.getInstannce().isQQ()) {
                    let isClickBanner = UserGD.openSkinBannerAddition &&
                        UserGD.playCount >= UserGD.openBtnConfig[0] && ((UserGD.playCount - UserGD.openBtnConfig[0]) % (UserGD.openBtnConfig[1] + 1) == 0);
                    if (UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && (UserGD.openSkinVideoAddition || isClickBanner)) {
                        needAccelerate = true;
                        if (isClickBanner) {
                            UserGD.skipWrongClickAd = true;
                        }
                    }
                }
                else {
                }
                Laya.stage.addChild(new LevelThroughSkinDialog(true, needAccelerate, () => {
                    self.checkStepsBeforeShowResult();
                }));
            }
            else {
                this.checkStepsBeforeShowResult();
            }
        }
        checkWrongClick() {
            let self = this;
            if (SdkCenter.getInstannce().isWx()) {
                if (!UserGD.skipWrongClickAd && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openBtn &&
                    UserGD.playCount >= UserGD.openBtnConfig[0] && ((UserGD.playCount - UserGD.openBtnConfig[0]) % (UserGD.openBtnConfig[1] + 1) == 0)) {
                    Laya.stage.addChild(new WrongClickAd(() => {
                        self.checkStepsBeforeShowResult();
                    }));
                }
                else {
                    this.checkStepsBeforeShowResult();
                }
            }
            else if (SdkCenter.getInstannce().isQQ()) {
                if (!UserGD.skipWrongClickAd && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openBtn &&
                    UserGD.playCount >= UserGD.openBtnConfig[0] && ((UserGD.playCount - UserGD.openBtnConfig[0]) % (UserGD.openBtnConfig[1] + 1) == 0)) {
                    let left = UserGD.openWrongClickCount % (UserGD.openBtnConfig[3] + UserGD.openBtnConfig[4]);
                    let isClickAppBox;
                    if (UserGD.openBtnConfig[2]) {
                        if (left < UserGD.openBtnConfig[4]) {
                            isClickAppBox = 1;
                        }
                        else {
                            isClickAppBox = 0;
                        }
                    }
                    else {
                        if (left < UserGD.openBtnConfig[3]) {
                            isClickAppBox = 0;
                        }
                        else {
                            isClickAppBox = 1;
                        }
                    }
                    Laya.stage.addChild(new WrongClickAd(() => {
                        self.checkStepsBeforeShowResult();
                    }, isClickAppBox));
                }
                else {
                    this.checkStepsBeforeShowResult();
                }
            }
            else {
                this.checkStepsBeforeShowResult();
            }
        }
        checkStepsBeforeShowResult() {
            switch (++this.stepBeforeShowResult) {
                case 1: {
                    this.checkLevelSkin();
                    break;
                }
                case 2: {
                    this.checkWrongClick();
                    break;
                }
                default: {
                    SdkCenter.getInstannce().showInterstitialAd();
                    Laya.stage.addChild(new ResultViewDialog(this.tempResultData));
                }
            }
        }
        showGameResult(data) {
            let self = this;
            this.tempResultData = data;
            JoyStickCtrl.setTouchBlock(true);
            Laya.timer.once(2000, this, () => {
                if (SdkCenter.getInstannce().isLw()) {
                    let callback = () => {
                        UiUtils.closeDialog(SelfGameConfig.NAME_GAME_VIEW_DIALOG);
                        UserGD.isGameing = false;
                        Laya.stage.addChild(new ResultViewDialog(data));
                    };
                    if (PulCenter.checkLwCondition("wrongClick")) {
                        if (UserGD.playCount == LwConfig.lwCustomConfig[5]
                            || (UserGD.playCount - LwConfig.lwCustomConfig[5]) % (LwConfig.lwCustomConfig[6] + 1) == 0) {
                            Laya.stage.addChild(new WrongClickAd(() => {
                                PulCenter.checkToShowInference(1, callback);
                            }));
                        }
                        else {
                            PulCenter.checkToShowInference(1, callback);
                        }
                    }
                    else {
                        PulCenter.checkToShowInference(1, callback);
                    }
                }
                else {
                    UiUtils.closeDialog(SelfGameConfig.NAME_GAME_VIEW_DIALOG);
                    UserGD.isGameing = false;
                    UserGD.skipWrongClickAd = false;
                    self.checkStepsBeforeShowResult();
                }
            });
        }
        refreshRoleVisualStatus(type) {
            switch (type) {
                case 1: {
                    this.changeRoleColor();
                    break;
                }
                case 2: {
                    SkinManager.getInstance().resetStatus();
                    if (this.rolesRootCtrl) {
                        this.rolesRootCtrl.refreshVisualStatus();
                    }
                    break;
                }
                case 3: {
                    HatManager.getInstance().resetStatus();
                    if (this.rolesRootCtrl) {
                        this.rolesRootCtrl.refreshVisualStatus();
                    }
                    break;
                }
            }
        }
        machineExplode(indexes) {
            for (let i in indexes) {
                let ctrl = Globals.currentSceneInfo.machineInfoArr[indexes[i]].nodeMachine.getComponent(MachineCtrl);
                ctrl.selfExplode();
            }
        }
        initEventHandler() {
            Utils.onEvent(this, SelfGameConfig.EVENT_FINISH_PROGRESS, this.finishProgress);
            Utils.onEvent(this, SelfGameConfig.EVENT_START_GAME, this.gameStart);
            Utils.onEvent(this, SelfGameConfig.EVENT_GAME_OVER, this.showGameResult);
            Utils.onEvent(this, SelfGameConfig.EVENT_REFRESH_ROLE_VISUAL_STATUS, this.refreshRoleVisualStatus);
            Utils.onEvent(this, SelfGameConfig.EVENT_MACHINE_EXPLODE, this.machineExplode);
        }
        createScene() {
            let nodeContent = new Laya.Sprite3D;
            this.mMap.addChild(nodeContent);
            let nodeEffectRoot = new Laya.Sprite3D;
            this.mMap.addChild(nodeEffectRoot);
            EffectManager.initEffectRoot(nodeEffectRoot);
            Globals.currentRolesConfigNum = 0;
            var startPosition = Vector3Utils.ORIGIN.clone();
            var preLastPoint = null;
            if (UserGD.playCount > 0) {
                Globals.bossUsingHatIndex = Utils.nextInt(1, 14);
            }
            for (let i = 0; i < Globals.currentSceneInfo.machineInfoArr.length; i++) {
                let machineInfo = Globals.currentSceneInfo.machineInfoArr[i];
                let road;
                if (i == 0) {
                    road = ModelFactory.createStartPart();
                }
                else if (i == Globals.currentSceneInfo.machineInfoArr.length - 1) {
                    road = ModelFactory.createEndPart();
                }
                else {
                    road = ModelFactory.createRoad();
                    let nodeMachine = new Laya.Sprite3D("root_machine");
                    road.addChild(nodeMachine);
                    nodeMachine.transform.localPosition = Vector3Utils.ORIGIN.clone();
                    nodeMachine.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
                    let machineConfig = road.getChildByName("machine_config");
                    for (let j = 0; j < machineInfo.modelNames.length; j++) {
                        if (machineInfo.modelNames[j]) {
                            let machine = ModelFactory.createMachine(machineInfo.modelNames[j]);
                            nodeMachine.addChild(machine);
                            let configNode = machineConfig.getChildAt(j);
                            machine.transform.localPosition = configNode.transform.localPosition.clone();
                            machine.transform.localRotation = configNode.transform.localRotation.clone();
                        }
                        else {
                            let nullNode = new Laya.Sprite3D("null");
                            nodeMachine.addChild(nullNode);
                        }
                    }
                }
                nodeContent.addChild(road);
                let nodePathNode = road.getChildByName("node_path");
                let lastPoint = nodePathNode.getChildAt(nodePathNode.numChildren - 1);
                machineInfo.nodeMachine = road;
                machineInfo.position = startPosition.clone();
                machineInfo.nodePath = nodePathNode;
                road.transform.position = startPosition;
                if (preLastPoint) {
                    road.transform.localRotationEuler = preLastPoint.transform.rotationEuler.clone();
                }
                let lastPos = new Laya.Vector3();
                Laya.Vector3.transformQuat(lastPoint.transform.localPosition, road.transform.rotation, lastPos);
                Laya.Vector3.add(startPosition, lastPos, startPosition);
                let machineScript = road.addComponent(MachineCtrl);
                machineScript.setConfig(Globals.currentSceneInfo.roadConfigArray[i], i);
                if (i < 5) {
                    machineScript.switchColliders(true);
                }
                else {
                    machineScript.switchColliders(false);
                }
                if (i < 15) {
                    machineScript.switchActive(true);
                }
                else {
                    machineScript.switchActive(false);
                }
                preLastPoint = lastPoint;
            }
        }
        createStraightLinePath(machineIndex, curNodePath, nextNodePath, isForce) {
            if (curNodePath.name != "point" && !isForce) {
                return;
            }
            let distance = Laya.Vector3.distance(curNodePath.transform.position, nextNodePath.transform.position);
            let count = Math.floor(distance / SelfGameConfig.ROLE_SLOW_MOVE_SPEED);
            let arr = new Array();
            for (let i = 0; i < count; i++) {
                let outPosition = new Laya.Vector3();
                Laya.Vector3.lerp(curNodePath.transform.position, nextNodePath.transform.position, i / count, outPosition);
                let roadInfo = new RoadInfo();
                roadInfo.machineIndex = machineIndex;
                roadInfo.position = outPosition;
                roadInfo.rotation = curNodePath.transform.rotation;
                if (isForce && i == 0) {
                    roadInfo.type = curNodePath.name;
                    if (curNodePath.name == "final") {
                        this.gotFinalIndex = true;
                    }
                }
                else {
                    roadInfo.type = "point";
                }
                arr.push(roadInfo);
            }
            if (!this.gotFinalIndex) {
                this.finalIndex += count;
            }
            return arr;
        }
        createSectionPath(machineIndex, curNodePath, nextNodePath) {
            let roadInfoArr;
            roadInfoArr = this.createStraightLinePath(machineIndex, curNodePath, nextNodePath, false);
            if (!roadInfoArr) {
                roadInfoArr = this.createStraightLinePath(machineIndex, curNodePath, nextNodePath, true);
            }
            return roadInfoArr;
        }
        createMovePath() {
            for (let i = 0; i < Globals.currentSceneInfo.roadConfigArray.length; i++) {
                let machineInfo = Globals.currentSceneInfo.machineInfoArr[i];
                let roadInfoArr = null;
                for (var j = 0; j < machineInfo.nodePath.numChildren - 1; j++) {
                    roadInfoArr =
                        this.createSectionPath(i, machineInfo.nodePath.getChildAt(j), machineInfo.nodePath.getChildAt(j + 1));
                    for (var u = 0; u < roadInfoArr.length; u++) {
                        this.mPlayerMovePath.push(roadInfoArr[u]);
                    }
                }
            }
        }
        createRole() {
            Globals.roundProgress = 0;
            this.rolesRoot = new Laya.Sprite3D();
            this.rolesRootCtrl = this.rolesRoot.addComponent(RoleRootCtrl);
            Globals.colorUsingIndex = Math.floor(Math.random() * Globals.roleColorConfig.length);
            while (Globals.colorUsingIndex == Globals.bossColorUsingIndex) {
                Globals.colorUsingIndex = Math.floor(Math.random() * Globals.roleColorConfig.length);
            }
            EffectManager.changeMaterialColor(Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
            this.rolesRootCtrl.setMovePath(this.mPlayerMovePath);
            this.mMap.addChild(this.rolesRoot);
            this.rolesRoot.transform.localPosition = Vector3Utils.ORIGIN.clone();
            this.rolesRoot.transform.localRotationEuler = Vector3Utils.ORIGIN.clone();
        }
        changeRoleColor() {
            if (++Globals.colorUsingIndex == Globals.roleColorConfig.length) {
                Globals.colorUsingIndex = 0;
            }
            if (Globals.colorUsingIndex == Globals.bossColorUsingIndex) {
                if (++Globals.colorUsingIndex == Globals.roleColorConfig.length) {
                    Globals.colorUsingIndex = 0;
                }
            }
            EffectManager.changeMaterialColor(Globals.roleColorConfig[Globals.colorUsingIndex].fresnelColor.clone(), Globals.roleColorConfig[Globals.colorUsingIndex].mainColor.clone());
        }
        resetScene() {
            UserGD.isGameing = false;
            this.isPlayerFinished = false;
            this.isOver = false;
            this.stepBeforeShowResult = 0;
            for (let i = 0; i < Globals.currentSceneInfo.machineInfoArr.length; i++) {
                let machine = Globals.currentSceneInfo.machineInfoArr[i].nodeMachine;
                let machineScript = machine.getComponent(MachineCtrl);
                machineScript.resetStatus();
                if (i < 5) {
                    machineScript.switchColliders(true);
                }
                else {
                    machineScript.switchColliders(false);
                }
                if (i < 15) {
                    machineScript.switchActive(true);
                }
                else {
                    machineScript.switchActive(false);
                }
            }
            this.rolesRootCtrl.resetStatus();
        }
    }

    class LaunchSceneCtrl {
        constructor() {
            this.gConfigLoadTime = 3;
            this.mInitNavAdCount = 0;
            this.mInitCount = 0;
            this.m3dResArr = [
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_DIR_LIGHT + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_WATER_SURFAVE + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MAIN_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_GAME_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_1_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_2_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_3_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_4_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_END_5_CAMERA_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_BASIC_ROAD_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROLE_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_BOSS_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROAD_START_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_ROAD_END_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_JUMP_NODE_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_NODE_COIN_PREFAB + ".lh",
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_MULTI_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_ACCELERATE_LINES_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_BOSS_GLOVE_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SHOP_ROLE_PREFAB + ".lh"
            ];
            this.m3dResArrAferShow = [
                SelfGameConfig.PATH_MAIN_SCENE_ROOT + SelfGameConfig.NAME_SHOP_LIGHT + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_EXPLOSION_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_COIN_EFFECT_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_ROLE_GLOVE_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SMASH_CRASH_RPEAFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_GET_HIT_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_BLOOD_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_ACCELERATE_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_TRANSFORM_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_INFECT_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_FOOTPRINT_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_CUT_AXIS_XY_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_CUT_AXIS_YZ_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_CUT_AXIS_XZ_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_FIREWORK_PREFAB + ".lh",
                SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_NODE_WALL_BREAK_PREFAB + ".lh"
            ];
            this.isWrongClicked = false;
            this.isClickLevelSkinBanner = false;
            this.mStartLoadTIme = new Date().getTime();
            this.initConfigs();
            this.showLoading();
            this.initEventListenerBeforeLoadResources();
            this.preLoadJsonFile();
        }
        preLoadJsonFile() {
            var self = this;
            let res = [{ url: "lmatfile.json", type: Laya.Loader.JSON }];
            Laya.loader.load(res, Laya.Handler.create(this, () => {
                let d3res = Laya.loader.getRes('lmatfile.json');
                for (let key in d3res) {
                    let url = Laya.URL.formatURL(key);
                    if (!Laya.Loader.preLoadedMap[url]) {
                        let str = d3res[key];
                        let obj = JSON.parse(str);
                        Laya.Loader.preLoadedMap[url] = obj;
                    }
                }
                self.preLoadBinFile();
            }));
        }
        preLoadBinFile() {
            var self = this;
            let res = [{ url: "lmlanifile.bin", type: Laya.Loader.BUFFER }];
            Laya.loader.load(res, Laya.Handler.create(this, (res) => {
                let d3bin = Laya.loader.getRes('lmlanifile.bin');
                self.pasred3bin(d3bin);
            }));
        }
        pasred3bin(d3bin) {
            let b = new Laya.Byte(d3bin);
            let len = b.readUint32();
            let str = b.readUTFBytes(len);
            let descJson = JSON.parse(str);
            let oldPos = b.pos;
            for (let key in descJson) {
                let url = Laya.URL.formatURL(key);
                if (!Laya.Loader.preLoadedMap[url]) {
                    let obj = descJson[key];
                    b.pos = obj.start + oldPos;
                    let buf = b.readArrayBuffer(obj.end + oldPos);
                    Laya.Loader.preLoadedMap[url] = buf;
                    Laya.Loader.preLoadedMap[key] = buf;
                }
            }
            this.processLoadgConfig();
        }
        initConfigs() {
            Laya.MouseManager.multiTouchEnabled = false;
            UiUtils.init();
            UserGD.isIphoneX = UiUtils.checkIsIphoneX();
            AudioManager.init();
            EffectManager.init();
            Globals.bossUsingHatIndex = Utils.nextInt(1, 14);
            this.m3dResArr.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_BOSS_HAT_PREFAB + Globals.bossUsingHatIndex + ".lh");
            for (let i = 1; i < 15; i++) {
                if (i == Globals.bossUsingHatIndex) {
                    continue;
                }
                this.m3dResArrAferShow.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_BOSS_HAT_PREFAB + i + ".lh");
            }
            UserGD.isNewPlayer = DataManager.checkIsNewPlayer();
        }
        destroyMap() {
            if (this.mMap && !this.mMap.destroyed) {
                EffectManager.clearAllEffects();
                Globals.resetData();
                this.mMap.destroy(true);
                this.mMap = null;
            }
            Laya.Resource.destroyUnusedResources();
        }
        initEventListenerBeforeLoadResources() {
            let self = this;
            Utils.onEvent(this, SelfGameConfig.EVENT_INIT_NAV_AD_PROGRESS, this.processInitNavAdComplete);
            Utils.onEvent(this, SelfGameConfig.EVENT_NEXT_STAGE, () => {
                if (!SdkCenter.getInstannce().isLw()) {
                    SkinManager.getInstance().tryOver();
                    HatManager.getInstance().tryOver();
                }
                let realProcess = () => {
                    if (!self.mLoadingDialog) {
                        self.mLoadingDialog = new LoadingDialog();
                        Laya.stage.addChild(self.mLoadingDialog);
                    }
                    self.destroyMap();
                    self.create3dScene();
                };
                let checkKeyOpen = () => {
                    if (SdkCenter.getInstannce().isSyyx() || SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ()) {
                        let arr = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_key);
                        if (DataManager.getKeyNum() >= 3 && arr.length > 0) {
                            Laya.stage.addChild(new KeyBoxDialog(arr[Math.floor(Math.random() * arr.length)], realProcess));
                        }
                        else {
                            realProcess();
                        }
                    }
                    else {
                        realProcess();
                    }
                };
                let checkLevelSkin = () => {
                    if (SdkCenter.getInstannce().isSyyx()) {
                        if (SkinManager.getInstance().progress.indexLevelUnlocking > 0) {
                            Laya.stage.addChild(new LevelThroughSkinDialog(true, true, checkKeyOpen, true));
                        }
                        else {
                            checkKeyOpen();
                        }
                    }
                    else {
                        checkKeyOpen();
                    }
                };
                checkLevelSkin();
            });
            Utils.onEvent(this, SelfGameConfig.EVENT_RESET_STAGE, (isBackFromResult) => {
                if (!SdkCenter.getInstannce().isLw()) {
                    SkinManager.getInstance().tryOver();
                    HatManager.getInstance().tryOver();
                }
                let finalProcess = () => {
                    self.mScene3dCtrl.resetScene();
                    Laya.stage.addChild(new MainViewDialog());
                };
                if (isBackFromResult) {
                    let checkKeyOpen = () => {
                        if (SdkCenter.getInstannce().isSyyx() || SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ()) {
                            let arr = HatManager.getInstance().getLockedArray(HatManager.TYPE.type_key);
                            if (DataManager.getKeyNum() >= 3 && arr.length > 0) {
                                Laya.stage.addChild(new KeyBoxDialog(arr[Math.floor(Math.random() * arr.length)], finalProcess));
                            }
                            else {
                                finalProcess();
                            }
                        }
                        else {
                            finalProcess();
                        }
                    };
                    let checkLevelSkin = () => {
                        if (SdkCenter.getInstannce().isSyyx()) {
                            if (SkinManager.getInstance().progress.indexLevelUnlocking > 0) {
                                Laya.stage.addChild(new LevelThroughSkinDialog(true, true, checkKeyOpen));
                            }
                            else {
                                checkKeyOpen();
                            }
                        }
                        else {
                            checkKeyOpen();
                        }
                    };
                    checkLevelSkin();
                }
                else {
                    finalProcess();
                }
            });
        }
        resLock() {
        }
        processInitNavAdComplete() {
            if (++this.mInitNavAdCount == 2) {
                UserGD.navAdLoaded = true;
                Utils.dispatchEvent(SelfGameConfig.EVENT_CREATE_NAV_ADS, true);
                console.log("完成互推广告初始化，创建全屏互推");
            }
        }
        requestConfig(callback) {
            let requestNum = 6;
            let currentCompleteNum = 0;
            let requestComplete = () => {
                ++currentCompleteNum;
                if (requestNum == currentCompleteNum) {
                    if (callback) {
                        callback();
                    }
                }
            };
            DataManager.loadJson("MachineConfig", (json) => {
                Globals.machineFileNames = json.machine;
                Globals.roleConfigArray = json.role;
                Globals.coinConfigArray = json.coin;
                requestComplete();
            });
            DataManager.loadJson("Bg3dConfig", (json) => {
                Globals.bg3dConfig = new Array();
                for (let i in json) {
                    let config = {
                        bg: json[i].bg,
                        fog: new Laya.Vector3(json[i].fog[0] / 255, json[i].fog[1] / 255, json[i].fog[2] / 255)
                    };
                    Globals.bg3dConfig.push(config);
                }
                requestComplete();
            });
            DataManager.loadJson("RoleColorConfig", (json) => {
                Globals.roleColorConfig = new Array();
                for (let i in json) {
                    Globals.roleColorConfig.push(new ColorConfig(json[i]));
                }
                requestComplete();
            });
            DataManager.loadJson("LevelConfig", (json) => {
                for (let i = 0; i < json.length; i++) {
                    let levelInfo = new LevelInfo();
                    for (let j = 0; j < json[i].length; j++) {
                        levelInfo.roadConfigArray.push(new RoadConfig(json[i][j]));
                    }
                    Globals.levelConfig.push(levelInfo);
                }
                Globals.maxLevel = Globals.levelConfig.length;
                requestComplete();
            });
            let self = this;
            DataManager.loadJson("SkinConfig", (json) => {
                if (!SdkCenter.getInstannce().isLw()) {
                    SkinManager.getInstance().init(json);
                    let indexUsing = SkinManager.getInstance().getIndexUsing();
                    if (indexUsing > 0) {
                        self.m3dResArr.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SKIN_ROAD_PREFAB + indexUsing + ".lh");
                    }
                    for (let i = 1; i < SkinManager.getInstance().config.length; i++) {
                        self.m3dResArrAferShow.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SKIN_SHOP_PREFAB + i + ".lh");
                        if (i == indexUsing) {
                            continue;
                        }
                        self.m3dResArrAferShow.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_SKIN_ROAD_PREFAB + i + ".lh");
                    }
                    let arr = SkinManager.getInstance().getLockedArray(SkinManager.TYPE.type_level);
                    let resArr = new Array;
                    for (let i in arr) {
                        resArr.push("game/skins/skin_" + arr[i] + ".png");
                    }
                    if (resArr.length > 0) {
                        Laya.loader.load(resArr);
                    }
                }
                requestComplete();
            });
            DataManager.loadJson("HatConfig", (json) => {
                if (!SdkCenter.getInstannce().isLw()) {
                    HatManager.getInstance().init(json);
                    let indexUsing = HatManager.getInstance().getIndexUsing();
                    if (indexUsing > 0) {
                        self.m3dResArr.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_HAT_ROAD_PREFAB + indexUsing + ".lh");
                    }
                    for (let i = 1; i < HatManager.getInstance().config.length; i++) {
                        self.m3dResArrAferShow.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_HAT_SHOP_PREFAB + i + ".lh");
                        if (i == indexUsing) {
                            continue;
                        }
                        self.m3dResArrAferShow.push(SelfGameConfig.PATH_EFFECT_SCENE_ROOT + SelfGameConfig.NAME_HAT_ROAD_PREFAB + i + ".lh");
                    }
                }
                requestComplete();
            });
        }
        loadResources() {
            let self = this;
            let nameArr = ["res", "res2d", "res3d", "spine"];
            if (SdkCenter.getInstannce().isSyyx()) {
                nameArr = ["res3d"];
            }
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_TYPE_LOAD_STUFF, "1");
            SdkCenter.getInstannce().loadSubpackage(nameArr, () => {
                SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_TYPE_LOAD_STUFF, "2");
                console.log("分包加载完成");
                let afterRequestConfig = () => {
                    DataManager.getSkinOnlineUnlockStatus();
                    if (!(SdkCenter.getInstannce().isVivo() || SdkCenter.getInstannce().isOppo())) {
                        Laya.loader.create(self.m3dResArr, Laya.Handler.create(self, () => {
                            self.resLock();
                            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_TYPE_LOAD_STUFF, "3");
                            console.log("加载3d资源完成");
                            self.processInitComplete();
                        }));
                        if (SdkCenter.getInstannce().isWx() || SdkCenter.getInstannce().isQQ()) {
                            self.processInitNavAdComplete();
                        }
                    }
                    else {
                        Laya.loader.create(self.m3dResArr, Laya.Handler.create(self, () => {
                            self.resLock();
                            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_TYPE_LOAD_STUFF, "3");
                            console.log("加载3d资源完成");
                            self.processInitComplete();
                        }));
                        self.processInitNavAdComplete();
                    }
                };
                self.requestConfig(afterRequestConfig);
                AudioManager.playBgm();
            }, () => { });
        }
        onShow() {
            AudioManager.playBgm();
            PulCenter.resumeGame();
            if (UserGD.toastOnShow) {
                UserGD.toastOnShow = false;
                UiUtils.showLayaToast(UserGD.strToastOnShow);
            }
            let wrongClickAd = Laya.stage.getChildByName(SelfGameConfig.NAME_WRONGCLICK_DIALOG);
            if (wrongClickAd && this.isWrongClicked) {
                this.isWrongClicked = false;
                wrongClickAd.receiveReward(true);
            }
            let levelSkinDialog = Laya.stage.getChildByName(SelfGameConfig.NAME_LEVEL_SKIN_DIALOG);
            if (levelSkinDialog && this.isClickLevelSkinBanner) {
                this.isClickLevelSkinBanner = false;
                levelSkinDialog.receiveReward(true);
            }
        }
        onHide() {
            AudioManager.stopBgm();
            PulCenter.pauseGame();
            let wrongClickAd = Laya.stage.getChildByName(SelfGameConfig.NAME_WRONGCLICK_DIALOG);
            if (wrongClickAd) {
                this.isWrongClicked = wrongClickAd.isWrongClicked;
                if (this.isWrongClicked) {
                    wrongClickAd.stopDecrease();
                }
            }
            let levelSkinDialog = Laya.stage.getChildByName(SelfGameConfig.NAME_LEVEL_SKIN_DIALOG);
            if (levelSkinDialog) {
                this.isClickLevelSkinBanner = levelSkinDialog.isShowingBanner;
                if (this.isClickLevelSkinBanner) {
                    levelSkinDialog.stopDecrease();
                }
            }
        }
        create3dScene() {
            console.log("创建3d场景");
            let self = this;
            Globals.currentSceneInfo = new SceneInfo();
            Globals.currentSceneInfo.level = DataManager.getCurrentLevel();
            Globals.currentSceneInfo.roadConfigArray =
                JSON.parse(JSON.stringify(Globals.levelConfig[Globals.currentSceneInfo.level].roadConfigArray));
            ModelFactory.createScene(Globals.currentSceneInfo, (scene3d) => {
                console.log("创建3d场景成功");
                self.mMap = scene3d;
                self.mScene3dCtrl = scene3d.addComponent(MainSceneCtrl);
                let closeLoading = () => {
                    if (self.mLoadingDialog) {
                        self.mLoadingDialog.removeSelf();
                        self.mLoadingDialog = null;
                    }
                };
                let createMainView = () => {
                    if (!Laya.stage.getChildByName(SelfGameConfig.NAME_MAIN_VIEW_DIALOG)) {
                        Laya.stage.addChild(new MainViewDialog());
                    }
                };
                self.mScene3dCtrl.setAwakeCallback(() => {
                    if (SdkCenter.getInstannce().isLw() && UserGD.playCount == 0) {
                        console.log("乐玩首次创建主页");
                        let mainView = new MainViewDialog();
                        let callback = () => {
                            Laya.stage.addChild(mainView);
                        };
                        PulCenter.checkToShowInference(0, callback);
                        closeLoading();
                    }
                    else if (SdkCenter.getInstannce().isWx() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openStartbtn && UserGD.playCount < 1) {
                        if (!Laya.stage.getChildByName(SelfGameConfig.NAME_WRONGCLICK_DIALOG)) {
                            Laya.stage.addChild(new WrongClickAd(createMainView, null, closeLoading));
                        }
                    }
                    else if (SdkCenter.getInstannce().isQQ() && UserGD.isOfficial && (UserGD.showExtension || UserGD.sceneSwitch) && UserGD.openStartbtn && UserGD.playCount < 1) {
                        if (!Laya.stage.getChildByName(SelfGameConfig.NAME_WRONGCLICK_DIALOG)) {
                            Laya.stage.addChild(new WrongClickAd(createMainView, UserGD.openBtnConfig[2], closeLoading));
                        }
                    }
                    else {
                        createMainView();
                        closeLoading();
                    }
                });
            });
        }
        initSuccess() {
            let date = new Date();
            let diff = (date.getTime() - UserGD.timeWhileInGame.getTime()) / 1000;
            this.create3dScene();
            if ((Globals.skinOnlineUnlockStatus.skinIndex > 0 || Globals.skinOnlineUnlockStatus.hatIndex > 0) && !Globals.skinOnlineUnlockStatus.unlocked && UserGD.onlineRewardConfig > 0) {
                UserGD.onlineSkinIntro = new OnlineSkinIntro();
                Laya.stage.addChild(UserGD.onlineSkinIntro);
            }
            if (!SdkCenter.getInstannce().isLw()) {
                if (SkinManager.getInstance().progress.indexLevelUnlocking > 0) {
                    UserGD.levelSkinIntro = new LevelSkinIntro();
                    Laya.stage.addChild(UserGD.levelSkinIntro);
                }
            }
            setTimeout(() => {
                Laya.loader.create(this.m3dResArrAferShow, Laya.Handler.create(this, () => {
                    EffectManager.prePlayEffects();
                    Globals.isResLoadedAfterShow = true;
                }));
            }, 5000);
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_HALL, "1");
            var loadingEndTime = new Date().getTime();
            var timeCostLoading = (loadingEndTime - this.mStartLoadTIme) * 0.001;
            SdkCenter.getInstannce().aldSendEvent(PulCenter.EVENT_HALL, "5", { "costTime": timeCostLoading });
        }
        processInitComplete() {
            console.log("加载回调", this.mInitCount);
            var limit = 2;
            if (++this.mInitCount == limit) {
                this.initSuccess();
            }
        }
        processLoadgConfig() {
            let self = this;
            Laya.loader.load("gConfig.json", Laya.Handler.create(this, (data) => {
                let syncProcess = () => {
                    self.loadResources();
                    SdkCenter.getInstannce().onShow(self.onShow);
                    SdkCenter.getInstannce().onHide(self.onHide);
                };
                if (data) {
                    SdkCenter.getInstannce().init({
                        "gameConfig": data
                    }, () => {
                        SdkCenter.getInstannce().setVibrate(DataManager.isVibrate());
                        self.processInitComplete();
                        if (SdkCenter.getInstannce().isLw()) {
                            Laya.timer.loop(10, this, function s() {
                                if (SdkCenter.getInstannce().getSdk().sdkInitOk) {
                                    PulCenter.createBottomAd();
                                    PulCenter.createDoubleAd();
                                    Laya.timer.clear(this, s);
                                }
                            });
                        }
                    });
                    syncProcess();
                }
                else if (--self.gConfigLoadTime > 0) {
                    self.processLoadgConfig();
                }
                else {
                    SdkCenter.getInstannce().init({
                        "gameConfig": {}
                    }, () => {
                        SdkCenter.getInstannce().setVibrate(DataManager.isVibrate());
                        self.processInitComplete();
                    });
                    syncProcess();
                }
            }));
        }
        showLoading() {
            let self = this;
            Laya.loader.load("loading/LoadingDialog.json", Laya.Handler.create(this, () => {
                self.mLoadingDialog = new LoadingDialog();
                Laya.stage.addChild(self.mLoadingDialog);
            }));
        }
    }

    class ui_button_scale extends Laya.Script {
        constructor() {
            super();
            this.this_scale_x = 0;
            this.this_scale_y = 0;
            this.is_enable = false;
        }
        onAwake() {
            this.this_sprite = this.owner;
            Laya.timer.callLater(this, () => {
                this.this_scale_x = this.this_sprite.scaleX;
                this.this_scale_y = this.this_sprite.scaleY;
            });
        }
        onEnable() {
            if (!this.is_enable) {
                this.is_enable = true;
                Laya.timer.frameOnce(1, this, this.set_scale, undefined, true);
            }
        }
        onDisable() {
            if (this.is_enable) {
                this.is_enable = false;
                this.this_sprite.offAll(Laya.Event.MOUSE_DOWN);
                this.this_sprite.offAll(Laya.Event.MOUSE_UP);
                this.this_sprite.offAll(Laya.Event.MOUSE_OUT);
            }
        }
        set_scale() {
            this.this_sprite.on(Laya.Event.MOUSE_DOWN, this, () => {
                Laya.Tween.clearTween(this.this_sprite);
                Laya.Tween.to(this.this_sprite, { scaleX: 0.9 * this.this_scale_x, scaleY: 0.9 * this.this_scale_y }, 75);
            });
            this.this_sprite.on(Laya.Event.MOUSE_UP, this, () => {
                Laya.Tween.clearTween(this.this_sprite);
                Laya.Tween.to(this.this_sprite, { scaleX: 1 * this.this_scale_x, scaleY: 1 * this.this_scale_y }, 100);
            });
            this.this_sprite.on(Laya.Event.MOUSE_OUT, this, () => {
                Laya.Tween.clearTween(this.this_sprite);
                this.this_sprite.scale(1 * this.this_scale_x, 1 * this.this_scale_y);
            });
        }
    }

    class GameConfig {
        constructor() {
        }
        static init() {
            var reg = Laya.ClassUtils.regClass;
            reg("syyx_sdk/utils/ui_button_scale.ts", ui_button_scale);
        }
    }
    GameConfig.width = 750;
    GameConfig.height = 1334;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "vertical";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "loading/LoadingDialog.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    GameConfig.init();

    class Main {
        constructor() {
            UserGD.timeWhileInGame = new Date();
            if (window["Laya3D"])
                Laya3D.init(GameConfig.width, GameConfig.height);
            else
                Laya.init(GameConfig.width, GameConfig.height, Laya["WebGL"]);
            Laya["Physics"] && Laya["Physics"].enable();
            Laya["DebugPanel"] && Laya["DebugPanel"].enable();
            Laya.stage.scaleMode = GameConfig.scaleMode;
            Laya.stage.screenMode = GameConfig.screenMode;
            Laya.stage.alignV = GameConfig.alignV;
            Laya.stage.alignH = GameConfig.alignH;
            Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;
            if (GameConfig.debug || Laya.Utils.getQueryString("debug") == "true")
                Laya.enableDebugPanel();
            if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"])
                Laya["PhysicsDebugDraw"].enable();
            if (GameConfig.stat)
                Laya.Stat.show();
            Laya.alertGlobalError(true);
            Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
        }
        onVersionLoaded() {
            Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
        }
        onConfigLoaded() {
            new LaunchSceneCtrl();
        }
    }
    new Main();

}());
